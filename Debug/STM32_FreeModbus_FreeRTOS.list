
STM32_FreeModbus_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000612c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  080062cc  080062cc  000162cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006734  08006734  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08006734  08006734  00016734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800673c  0800673c  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800673c  0800673c  0001673c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006740  08006740  00016740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08006744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000471c  200000fc  08006840  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004818  08006840  00024818  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a019  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004389  00000000  00000000  0003a145  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001400  00000000  00000000  0003e4d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011b8  00000000  00000000  0003f8d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bea2  00000000  00000000  00040a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015a30  00000000  00000000  0005c92a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009714f  00000000  00000000  0007235a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001094a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005664  00000000  00000000  00109524  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000fc 	.word	0x200000fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080062b4 	.word	0x080062b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000100 	.word	0x20000100
 80001dc:	080062b4 	.word	0x080062b4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_Init+0x40>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <HAL_Init+0x40>)
 800058a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_Init+0x40>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <HAL_Init+0x40>)
 8000596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <HAL_Init+0x40>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_Init+0x40>)
 80005a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a8:	2003      	movs	r0, #3
 80005aa:	f000 f92b 	bl	8000804 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ae:	200f      	movs	r0, #15
 80005b0:	f000 f808 	bl	80005c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b4:	f004 fc82 	bl	8004ebc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023c00 	.word	0x40023c00

080005c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <HAL_InitTick+0x54>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_InitTick+0x58>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005da:	fbb3 f3f1 	udiv	r3, r3, r1
 80005de:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f943 	bl	800086e <HAL_SYSTICK_Config>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e00e      	b.n	8000610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b0f      	cmp	r3, #15
 80005f6:	d80a      	bhi.n	800060e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f8:	2200      	movs	r2, #0
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000600:	f000 f90b 	bl	800081a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <HAL_InitTick+0x5c>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	e000      	b.n	8000610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000094 	.word	0x20000094
 800061c:	20000004 	.word	0x20000004
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_IncTick+0x20>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_IncTick+0x24>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4413      	add	r3, r2
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <HAL_IncTick+0x24>)
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000004 	.word	0x20000004
 8000648:	20004220 	.word	0x20004220

0800064c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return uwTick;
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <HAL_GetTick+0x14>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	20004220 	.word	0x20004220

08000664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f003 0307 	and.w	r3, r3, #7
 8000672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067a:	68ba      	ldr	r2, [r7, #8]
 800067c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000680:	4013      	ands	r3, r2
 8000682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800068c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000696:	4a04      	ldr	r2, [pc, #16]	; (80006a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	60d3      	str	r3, [r2, #12]
}
 800069c:	bf00      	nop
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b0:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <__NVIC_GetPriorityGrouping+0x18>)
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	0a1b      	lsrs	r3, r3, #8
 80006b6:	f003 0307 	and.w	r3, r3, #7
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	db0b      	blt.n	80006f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	f003 021f 	and.w	r2, r3, #31
 80006e0:	4907      	ldr	r1, [pc, #28]	; (8000700 <__NVIC_EnableIRQ+0x38>)
 80006e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e6:	095b      	lsrs	r3, r3, #5
 80006e8:	2001      	movs	r0, #1
 80006ea:	fa00 f202 	lsl.w	r2, r0, r2
 80006ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e000e100 	.word	0xe000e100

08000704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	6039      	str	r1, [r7, #0]
 800070e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000714:	2b00      	cmp	r3, #0
 8000716:	db0a      	blt.n	800072e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	b2da      	uxtb	r2, r3
 800071c:	490c      	ldr	r1, [pc, #48]	; (8000750 <__NVIC_SetPriority+0x4c>)
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000722:	0112      	lsls	r2, r2, #4
 8000724:	b2d2      	uxtb	r2, r2
 8000726:	440b      	add	r3, r1
 8000728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800072c:	e00a      	b.n	8000744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	b2da      	uxtb	r2, r3
 8000732:	4908      	ldr	r1, [pc, #32]	; (8000754 <__NVIC_SetPriority+0x50>)
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	f003 030f 	and.w	r3, r3, #15
 800073a:	3b04      	subs	r3, #4
 800073c:	0112      	lsls	r2, r2, #4
 800073e:	b2d2      	uxtb	r2, r2
 8000740:	440b      	add	r3, r1
 8000742:	761a      	strb	r2, [r3, #24]
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	e000e100 	.word	0xe000e100
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000758:	b480      	push	{r7}
 800075a:	b089      	sub	sp, #36	; 0x24
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	60b9      	str	r1, [r7, #8]
 8000762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	f003 0307 	and.w	r3, r3, #7
 800076a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800076c:	69fb      	ldr	r3, [r7, #28]
 800076e:	f1c3 0307 	rsb	r3, r3, #7
 8000772:	2b04      	cmp	r3, #4
 8000774:	bf28      	it	cs
 8000776:	2304      	movcs	r3, #4
 8000778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	3304      	adds	r3, #4
 800077e:	2b06      	cmp	r3, #6
 8000780:	d902      	bls.n	8000788 <NVIC_EncodePriority+0x30>
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	3b03      	subs	r3, #3
 8000786:	e000      	b.n	800078a <NVIC_EncodePriority+0x32>
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800078c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000790:	69bb      	ldr	r3, [r7, #24]
 8000792:	fa02 f303 	lsl.w	r3, r2, r3
 8000796:	43da      	mvns	r2, r3
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	401a      	ands	r2, r3
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	fa01 f303 	lsl.w	r3, r1, r3
 80007aa:	43d9      	mvns	r1, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b0:	4313      	orrs	r3, r2
         );
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3724      	adds	r7, #36	; 0x24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
	...

080007c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	3b01      	subs	r3, #1
 80007cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007d0:	d301      	bcc.n	80007d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007d2:	2301      	movs	r3, #1
 80007d4:	e00f      	b.n	80007f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007d6:	4a0a      	ldr	r2, [pc, #40]	; (8000800 <SysTick_Config+0x40>)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3b01      	subs	r3, #1
 80007dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007de:	210f      	movs	r1, #15
 80007e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007e4:	f7ff ff8e 	bl	8000704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007e8:	4b05      	ldr	r3, [pc, #20]	; (8000800 <SysTick_Config+0x40>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ee:	4b04      	ldr	r3, [pc, #16]	; (8000800 <SysTick_Config+0x40>)
 80007f0:	2207      	movs	r2, #7
 80007f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007f4:	2300      	movs	r3, #0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	e000e010 	.word	0xe000e010

08000804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f7ff ff29 	bl	8000664 <__NVIC_SetPriorityGrouping>
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800081a:	b580      	push	{r7, lr}
 800081c:	b086      	sub	sp, #24
 800081e:	af00      	add	r7, sp, #0
 8000820:	4603      	mov	r3, r0
 8000822:	60b9      	str	r1, [r7, #8]
 8000824:	607a      	str	r2, [r7, #4]
 8000826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800082c:	f7ff ff3e 	bl	80006ac <__NVIC_GetPriorityGrouping>
 8000830:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	68b9      	ldr	r1, [r7, #8]
 8000836:	6978      	ldr	r0, [r7, #20]
 8000838:	f7ff ff8e 	bl	8000758 <NVIC_EncodePriority>
 800083c:	4602      	mov	r2, r0
 800083e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000842:	4611      	mov	r1, r2
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ff5d 	bl	8000704 <__NVIC_SetPriority>
}
 800084a:	bf00      	nop
 800084c:	3718      	adds	r7, #24
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
 8000858:	4603      	mov	r3, r0
 800085a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800085c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ff31 	bl	80006c8 <__NVIC_EnableIRQ>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b082      	sub	sp, #8
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f7ff ffa2 	bl	80007c0 <SysTick_Config>
 800087c:	4603      	mov	r3, r0
}
 800087e:	4618      	mov	r0, r3
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000886:	b480      	push	{r7}
 8000888:	b083      	sub	sp, #12
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000894:	b2db      	uxtb	r3, r3
 8000896:	2b02      	cmp	r3, #2
 8000898:	d004      	beq.n	80008a4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2280      	movs	r2, #128	; 0x80
 800089e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80008a0:	2301      	movs	r3, #1
 80008a2:	e00c      	b.n	80008be <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2205      	movs	r2, #5
 80008a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f022 0201 	bic.w	r2, r2, #1
 80008ba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
	...

080008cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b089      	sub	sp, #36	; 0x24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80008de:	2300      	movs	r3, #0
 80008e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
 80008e6:	e159      	b.n	8000b9c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80008e8:	2201      	movs	r2, #1
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	fa02 f303 	lsl.w	r3, r2, r3
 80008f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	697a      	ldr	r2, [r7, #20]
 80008f8:	4013      	ands	r3, r2
 80008fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008fc:	693a      	ldr	r2, [r7, #16]
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	429a      	cmp	r2, r3
 8000902:	f040 8148 	bne.w	8000b96 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	2b02      	cmp	r3, #2
 800090c:	d003      	beq.n	8000916 <HAL_GPIO_Init+0x4a>
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	2b12      	cmp	r3, #18
 8000914:	d123      	bne.n	800095e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	08da      	lsrs	r2, r3, #3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	3208      	adds	r2, #8
 800091e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000922:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	f003 0307 	and.w	r3, r3, #7
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	220f      	movs	r2, #15
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	43db      	mvns	r3, r3
 8000934:	69ba      	ldr	r2, [r7, #24]
 8000936:	4013      	ands	r3, r2
 8000938:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	691a      	ldr	r2, [r3, #16]
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	f003 0307 	and.w	r3, r3, #7
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	69ba      	ldr	r2, [r7, #24]
 800094c:	4313      	orrs	r3, r2
 800094e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	08da      	lsrs	r2, r3, #3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3208      	adds	r2, #8
 8000958:	69b9      	ldr	r1, [r7, #24]
 800095a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	2203      	movs	r2, #3
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	43db      	mvns	r3, r3
 8000970:	69ba      	ldr	r2, [r7, #24]
 8000972:	4013      	ands	r3, r2
 8000974:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	f003 0203 	and.w	r2, r3, #3
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	69ba      	ldr	r2, [r7, #24]
 8000988:	4313      	orrs	r3, r2
 800098a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	69ba      	ldr	r2, [r7, #24]
 8000990:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d00b      	beq.n	80009b2 <HAL_GPIO_Init+0xe6>
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	2b02      	cmp	r3, #2
 80009a0:	d007      	beq.n	80009b2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009a6:	2b11      	cmp	r3, #17
 80009a8:	d003      	beq.n	80009b2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	2b12      	cmp	r3, #18
 80009b0:	d130      	bne.n	8000a14 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	2203      	movs	r2, #3
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	43db      	mvns	r3, r3
 80009c4:	69ba      	ldr	r2, [r7, #24]
 80009c6:	4013      	ands	r3, r2
 80009c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	68da      	ldr	r2, [r3, #12]
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	69ba      	ldr	r2, [r7, #24]
 80009d8:	4313      	orrs	r3, r2
 80009da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	69ba      	ldr	r2, [r7, #24]
 80009e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009e8:	2201      	movs	r2, #1
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	43db      	mvns	r3, r3
 80009f2:	69ba      	ldr	r2, [r7, #24]
 80009f4:	4013      	ands	r3, r2
 80009f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	091b      	lsrs	r3, r3, #4
 80009fe:	f003 0201 	and.w	r2, r3, #1
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	69ba      	ldr	r2, [r7, #24]
 8000a12:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	2203      	movs	r2, #3
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	43db      	mvns	r3, r3
 8000a26:	69ba      	ldr	r2, [r7, #24]
 8000a28:	4013      	ands	r3, r2
 8000a2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	689a      	ldr	r2, [r3, #8]
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	69ba      	ldr	r2, [r7, #24]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	69ba      	ldr	r2, [r7, #24]
 8000a42:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	f000 80a2 	beq.w	8000b96 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	4b56      	ldr	r3, [pc, #344]	; (8000bb0 <HAL_GPIO_Init+0x2e4>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5a:	4a55      	ldr	r2, [pc, #340]	; (8000bb0 <HAL_GPIO_Init+0x2e4>)
 8000a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a60:	6453      	str	r3, [r2, #68]	; 0x44
 8000a62:	4b53      	ldr	r3, [pc, #332]	; (8000bb0 <HAL_GPIO_Init+0x2e4>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a6e:	4a51      	ldr	r2, [pc, #324]	; (8000bb4 <HAL_GPIO_Init+0x2e8>)
 8000a70:	69fb      	ldr	r3, [r7, #28]
 8000a72:	089b      	lsrs	r3, r3, #2
 8000a74:	3302      	adds	r3, #2
 8000a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	f003 0303 	and.w	r3, r3, #3
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	220f      	movs	r2, #15
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a48      	ldr	r2, [pc, #288]	; (8000bb8 <HAL_GPIO_Init+0x2ec>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d019      	beq.n	8000ace <HAL_GPIO_Init+0x202>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a47      	ldr	r2, [pc, #284]	; (8000bbc <HAL_GPIO_Init+0x2f0>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d013      	beq.n	8000aca <HAL_GPIO_Init+0x1fe>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a46      	ldr	r2, [pc, #280]	; (8000bc0 <HAL_GPIO_Init+0x2f4>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d00d      	beq.n	8000ac6 <HAL_GPIO_Init+0x1fa>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a45      	ldr	r2, [pc, #276]	; (8000bc4 <HAL_GPIO_Init+0x2f8>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d007      	beq.n	8000ac2 <HAL_GPIO_Init+0x1f6>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a44      	ldr	r2, [pc, #272]	; (8000bc8 <HAL_GPIO_Init+0x2fc>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d101      	bne.n	8000abe <HAL_GPIO_Init+0x1f2>
 8000aba:	2304      	movs	r3, #4
 8000abc:	e008      	b.n	8000ad0 <HAL_GPIO_Init+0x204>
 8000abe:	2307      	movs	r3, #7
 8000ac0:	e006      	b.n	8000ad0 <HAL_GPIO_Init+0x204>
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	e004      	b.n	8000ad0 <HAL_GPIO_Init+0x204>
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	e002      	b.n	8000ad0 <HAL_GPIO_Init+0x204>
 8000aca:	2301      	movs	r3, #1
 8000acc:	e000      	b.n	8000ad0 <HAL_GPIO_Init+0x204>
 8000ace:	2300      	movs	r3, #0
 8000ad0:	69fa      	ldr	r2, [r7, #28]
 8000ad2:	f002 0203 	and.w	r2, r2, #3
 8000ad6:	0092      	lsls	r2, r2, #2
 8000ad8:	4093      	lsls	r3, r2
 8000ada:	69ba      	ldr	r2, [r7, #24]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ae0:	4934      	ldr	r1, [pc, #208]	; (8000bb4 <HAL_GPIO_Init+0x2e8>)
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	089b      	lsrs	r3, r3, #2
 8000ae6:	3302      	adds	r3, #2
 8000ae8:	69ba      	ldr	r2, [r7, #24]
 8000aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000aee:	4b37      	ldr	r3, [pc, #220]	; (8000bcc <HAL_GPIO_Init+0x300>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	43db      	mvns	r3, r3
 8000af8:	69ba      	ldr	r2, [r7, #24]
 8000afa:	4013      	ands	r3, r2
 8000afc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d003      	beq.n	8000b12 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000b0a:	69ba      	ldr	r2, [r7, #24]
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b12:	4a2e      	ldr	r2, [pc, #184]	; (8000bcc <HAL_GPIO_Init+0x300>)
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b18:	4b2c      	ldr	r3, [pc, #176]	; (8000bcc <HAL_GPIO_Init+0x300>)
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	43db      	mvns	r3, r3
 8000b22:	69ba      	ldr	r2, [r7, #24]
 8000b24:	4013      	ands	r3, r2
 8000b26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d003      	beq.n	8000b3c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000b34:	69ba      	ldr	r2, [r7, #24]
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b3c:	4a23      	ldr	r2, [pc, #140]	; (8000bcc <HAL_GPIO_Init+0x300>)
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b42:	4b22      	ldr	r3, [pc, #136]	; (8000bcc <HAL_GPIO_Init+0x300>)
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	43db      	mvns	r3, r3
 8000b4c:	69ba      	ldr	r2, [r7, #24]
 8000b4e:	4013      	ands	r3, r2
 8000b50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d003      	beq.n	8000b66 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000b5e:	69ba      	ldr	r2, [r7, #24]
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b66:	4a19      	ldr	r2, [pc, #100]	; (8000bcc <HAL_GPIO_Init+0x300>)
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b6c:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <HAL_GPIO_Init+0x300>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	43db      	mvns	r3, r3
 8000b76:	69ba      	ldr	r2, [r7, #24]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d003      	beq.n	8000b90 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000b88:	69ba      	ldr	r2, [r7, #24]
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b90:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <HAL_GPIO_Init+0x300>)
 8000b92:	69bb      	ldr	r3, [r7, #24]
 8000b94:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	61fb      	str	r3, [r7, #28]
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	2b0f      	cmp	r3, #15
 8000ba0:	f67f aea2 	bls.w	80008e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ba4:	bf00      	nop
 8000ba6:	3724      	adds	r7, #36	; 0x24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40013800 	.word	0x40013800
 8000bb8:	40020000 	.word	0x40020000
 8000bbc:	40020400 	.word	0x40020400
 8000bc0:	40020800 	.word	0x40020800
 8000bc4:	40020c00 	.word	0x40020c00
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40013c00 	.word	0x40013c00

08000bd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d101      	bne.n	8000be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e22d      	b.n	800103e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d075      	beq.n	8000cda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bee:	4ba3      	ldr	r3, [pc, #652]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	f003 030c 	and.w	r3, r3, #12
 8000bf6:	2b04      	cmp	r3, #4
 8000bf8:	d00c      	beq.n	8000c14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bfa:	4ba0      	ldr	r3, [pc, #640]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c02:	2b08      	cmp	r3, #8
 8000c04:	d112      	bne.n	8000c2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c06:	4b9d      	ldr	r3, [pc, #628]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c12:	d10b      	bne.n	8000c2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c14:	4b99      	ldr	r3, [pc, #612]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d05b      	beq.n	8000cd8 <HAL_RCC_OscConfig+0x108>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d157      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e208      	b.n	800103e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c34:	d106      	bne.n	8000c44 <HAL_RCC_OscConfig+0x74>
 8000c36:	4b91      	ldr	r3, [pc, #580]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a90      	ldr	r2, [pc, #576]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c40:	6013      	str	r3, [r2, #0]
 8000c42:	e01d      	b.n	8000c80 <HAL_RCC_OscConfig+0xb0>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c4c:	d10c      	bne.n	8000c68 <HAL_RCC_OscConfig+0x98>
 8000c4e:	4b8b      	ldr	r3, [pc, #556]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a8a      	ldr	r2, [pc, #552]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c58:	6013      	str	r3, [r2, #0]
 8000c5a:	4b88      	ldr	r3, [pc, #544]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a87      	ldr	r2, [pc, #540]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	e00b      	b.n	8000c80 <HAL_RCC_OscConfig+0xb0>
 8000c68:	4b84      	ldr	r3, [pc, #528]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a83      	ldr	r2, [pc, #524]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c72:	6013      	str	r3, [r2, #0]
 8000c74:	4b81      	ldr	r3, [pc, #516]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a80      	ldr	r2, [pc, #512]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d013      	beq.n	8000cb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c88:	f7ff fce0 	bl	800064c <HAL_GetTick>
 8000c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c8e:	e008      	b.n	8000ca2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c90:	f7ff fcdc 	bl	800064c <HAL_GetTick>
 8000c94:	4602      	mov	r2, r0
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	2b64      	cmp	r3, #100	; 0x64
 8000c9c:	d901      	bls.n	8000ca2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	e1cd      	b.n	800103e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ca2:	4b76      	ldr	r3, [pc, #472]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d0f0      	beq.n	8000c90 <HAL_RCC_OscConfig+0xc0>
 8000cae:	e014      	b.n	8000cda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb0:	f7ff fccc 	bl	800064c <HAL_GetTick>
 8000cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cb6:	e008      	b.n	8000cca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cb8:	f7ff fcc8 	bl	800064c <HAL_GetTick>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	2b64      	cmp	r3, #100	; 0x64
 8000cc4:	d901      	bls.n	8000cca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	e1b9      	b.n	800103e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cca:	4b6c      	ldr	r3, [pc, #432]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d1f0      	bne.n	8000cb8 <HAL_RCC_OscConfig+0xe8>
 8000cd6:	e000      	b.n	8000cda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d063      	beq.n	8000dae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ce6:	4b65      	ldr	r3, [pc, #404]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	f003 030c 	and.w	r3, r3, #12
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d00b      	beq.n	8000d0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cf2:	4b62      	ldr	r3, [pc, #392]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cfa:	2b08      	cmp	r3, #8
 8000cfc:	d11c      	bne.n	8000d38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cfe:	4b5f      	ldr	r3, [pc, #380]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d116      	bne.n	8000d38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d0a:	4b5c      	ldr	r3, [pc, #368]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d005      	beq.n	8000d22 <HAL_RCC_OscConfig+0x152>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d001      	beq.n	8000d22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e18d      	b.n	800103e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d22:	4b56      	ldr	r3, [pc, #344]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	691b      	ldr	r3, [r3, #16]
 8000d2e:	00db      	lsls	r3, r3, #3
 8000d30:	4952      	ldr	r1, [pc, #328]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000d32:	4313      	orrs	r3, r2
 8000d34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d36:	e03a      	b.n	8000dae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d020      	beq.n	8000d82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d40:	4b4f      	ldr	r3, [pc, #316]	; (8000e80 <HAL_RCC_OscConfig+0x2b0>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d46:	f7ff fc81 	bl	800064c <HAL_GetTick>
 8000d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d4c:	e008      	b.n	8000d60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d4e:	f7ff fc7d 	bl	800064c <HAL_GetTick>
 8000d52:	4602      	mov	r2, r0
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d901      	bls.n	8000d60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	e16e      	b.n	800103e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d60:	4b46      	ldr	r3, [pc, #280]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f003 0302 	and.w	r3, r3, #2
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d0f0      	beq.n	8000d4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d6c:	4b43      	ldr	r3, [pc, #268]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	691b      	ldr	r3, [r3, #16]
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	4940      	ldr	r1, [pc, #256]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	600b      	str	r3, [r1, #0]
 8000d80:	e015      	b.n	8000dae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d82:	4b3f      	ldr	r3, [pc, #252]	; (8000e80 <HAL_RCC_OscConfig+0x2b0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d88:	f7ff fc60 	bl	800064c <HAL_GetTick>
 8000d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d8e:	e008      	b.n	8000da2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d90:	f7ff fc5c 	bl	800064c <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d901      	bls.n	8000da2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e14d      	b.n	800103e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000da2:	4b36      	ldr	r3, [pc, #216]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d1f0      	bne.n	8000d90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 0308 	and.w	r3, r3, #8
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d030      	beq.n	8000e1c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d016      	beq.n	8000df0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dc2:	4b30      	ldr	r3, [pc, #192]	; (8000e84 <HAL_RCC_OscConfig+0x2b4>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dc8:	f7ff fc40 	bl	800064c <HAL_GetTick>
 8000dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dce:	e008      	b.n	8000de2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dd0:	f7ff fc3c 	bl	800064c <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d901      	bls.n	8000de2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000dde:	2303      	movs	r3, #3
 8000de0:	e12d      	b.n	800103e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000de2:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d0f0      	beq.n	8000dd0 <HAL_RCC_OscConfig+0x200>
 8000dee:	e015      	b.n	8000e1c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000df0:	4b24      	ldr	r3, [pc, #144]	; (8000e84 <HAL_RCC_OscConfig+0x2b4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000df6:	f7ff fc29 	bl	800064c <HAL_GetTick>
 8000dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dfc:	e008      	b.n	8000e10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dfe:	f7ff fc25 	bl	800064c <HAL_GetTick>
 8000e02:	4602      	mov	r2, r0
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d901      	bls.n	8000e10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	e116      	b.n	800103e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e10:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e14:	f003 0302 	and.w	r3, r3, #2
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d1f0      	bne.n	8000dfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f003 0304 	and.w	r3, r3, #4
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	f000 80a0 	beq.w	8000f6a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d10f      	bne.n	8000e5a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	4a0e      	ldr	r2, [pc, #56]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e48:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000e56:	2301      	movs	r3, #1
 8000e58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <HAL_RCC_OscConfig+0x2b8>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d121      	bne.n	8000eaa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <HAL_RCC_OscConfig+0x2b8>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <HAL_RCC_OscConfig+0x2b8>)
 8000e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e72:	f7ff fbeb 	bl	800064c <HAL_GetTick>
 8000e76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e78:	e011      	b.n	8000e9e <HAL_RCC_OscConfig+0x2ce>
 8000e7a:	bf00      	nop
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	42470000 	.word	0x42470000
 8000e84:	42470e80 	.word	0x42470e80
 8000e88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e8c:	f7ff fbde 	bl	800064c <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d901      	bls.n	8000e9e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e0cf      	b.n	800103e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e9e:	4b6a      	ldr	r3, [pc, #424]	; (8001048 <HAL_RCC_OscConfig+0x478>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d0f0      	beq.n	8000e8c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d106      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x2f0>
 8000eb2:	4b66      	ldr	r3, [pc, #408]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 8000eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eb6:	4a65      	ldr	r2, [pc, #404]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8000ebe:	e01c      	b.n	8000efa <HAL_RCC_OscConfig+0x32a>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	2b05      	cmp	r3, #5
 8000ec6:	d10c      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x312>
 8000ec8:	4b60      	ldr	r3, [pc, #384]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 8000eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ecc:	4a5f      	ldr	r2, [pc, #380]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 8000ece:	f043 0304 	orr.w	r3, r3, #4
 8000ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8000ed4:	4b5d      	ldr	r3, [pc, #372]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 8000ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ed8:	4a5c      	ldr	r2, [pc, #368]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	6713      	str	r3, [r2, #112]	; 0x70
 8000ee0:	e00b      	b.n	8000efa <HAL_RCC_OscConfig+0x32a>
 8000ee2:	4b5a      	ldr	r3, [pc, #360]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 8000ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ee6:	4a59      	ldr	r2, [pc, #356]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 8000ee8:	f023 0301 	bic.w	r3, r3, #1
 8000eec:	6713      	str	r3, [r2, #112]	; 0x70
 8000eee:	4b57      	ldr	r3, [pc, #348]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 8000ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ef2:	4a56      	ldr	r2, [pc, #344]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 8000ef4:	f023 0304 	bic.w	r3, r3, #4
 8000ef8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d015      	beq.n	8000f2e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f02:	f7ff fba3 	bl	800064c <HAL_GetTick>
 8000f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f08:	e00a      	b.n	8000f20 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f0a:	f7ff fb9f 	bl	800064c <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d901      	bls.n	8000f20 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e08e      	b.n	800103e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f20:	4b4a      	ldr	r3, [pc, #296]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 8000f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d0ee      	beq.n	8000f0a <HAL_RCC_OscConfig+0x33a>
 8000f2c:	e014      	b.n	8000f58 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f2e:	f7ff fb8d 	bl	800064c <HAL_GetTick>
 8000f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f34:	e00a      	b.n	8000f4c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f36:	f7ff fb89 	bl	800064c <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d901      	bls.n	8000f4c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e078      	b.n	800103e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f4c:	4b3f      	ldr	r3, [pc, #252]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 8000f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1ee      	bne.n	8000f36 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f58:	7dfb      	ldrb	r3, [r7, #23]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d105      	bne.n	8000f6a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f5e:	4b3b      	ldr	r3, [pc, #236]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	4a3a      	ldr	r2, [pc, #232]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 8000f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d064      	beq.n	800103c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f72:	4b36      	ldr	r3, [pc, #216]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	f003 030c 	and.w	r3, r3, #12
 8000f7a:	2b08      	cmp	r3, #8
 8000f7c:	d05c      	beq.n	8001038 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d141      	bne.n	800100a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f86:	4b32      	ldr	r3, [pc, #200]	; (8001050 <HAL_RCC_OscConfig+0x480>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8c:	f7ff fb5e 	bl	800064c <HAL_GetTick>
 8000f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f92:	e008      	b.n	8000fa6 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f94:	f7ff fb5a 	bl	800064c <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d901      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e04b      	b.n	800103e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fa6:	4b29      	ldr	r3, [pc, #164]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1f0      	bne.n	8000f94 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69da      	ldr	r2, [r3, #28]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6a1b      	ldr	r3, [r3, #32]
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc0:	019b      	lsls	r3, r3, #6
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc8:	085b      	lsrs	r3, r3, #1
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	041b      	lsls	r3, r3, #16
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd4:	061b      	lsls	r3, r3, #24
 8000fd6:	491d      	ldr	r1, [pc, #116]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fdc:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <HAL_RCC_OscConfig+0x480>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe2:	f7ff fb33 	bl	800064c <HAL_GetTick>
 8000fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fe8:	e008      	b.n	8000ffc <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fea:	f7ff fb2f 	bl	800064c <HAL_GetTick>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d901      	bls.n	8000ffc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	e020      	b.n	800103e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ffc:	4b13      	ldr	r3, [pc, #76]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d0f0      	beq.n	8000fea <HAL_RCC_OscConfig+0x41a>
 8001008:	e018      	b.n	800103c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <HAL_RCC_OscConfig+0x480>)
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001010:	f7ff fb1c 	bl	800064c <HAL_GetTick>
 8001014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001016:	e008      	b.n	800102a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001018:	f7ff fb18 	bl	800064c <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b02      	cmp	r3, #2
 8001024:	d901      	bls.n	800102a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e009      	b.n	800103e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1f0      	bne.n	8001018 <HAL_RCC_OscConfig+0x448>
 8001036:	e001      	b.n	800103c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e000      	b.n	800103e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40007000 	.word	0x40007000
 800104c:	40023800 	.word	0x40023800
 8001050:	42470060 	.word	0x42470060

08001054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d101      	bne.n	8001068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e0ca      	b.n	80011fe <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001068:	4b67      	ldr	r3, [pc, #412]	; (8001208 <HAL_RCC_ClockConfig+0x1b4>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 030f 	and.w	r3, r3, #15
 8001070:	683a      	ldr	r2, [r7, #0]
 8001072:	429a      	cmp	r2, r3
 8001074:	d90c      	bls.n	8001090 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001076:	4b64      	ldr	r3, [pc, #400]	; (8001208 <HAL_RCC_ClockConfig+0x1b4>)
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800107e:	4b62      	ldr	r3, [pc, #392]	; (8001208 <HAL_RCC_ClockConfig+0x1b4>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	683a      	ldr	r2, [r7, #0]
 8001088:	429a      	cmp	r2, r3
 800108a:	d001      	beq.n	8001090 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e0b6      	b.n	80011fe <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 0302 	and.w	r3, r3, #2
 8001098:	2b00      	cmp	r3, #0
 800109a:	d020      	beq.n	80010de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0304 	and.w	r3, r3, #4
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d005      	beq.n	80010b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010a8:	4b58      	ldr	r3, [pc, #352]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	4a57      	ldr	r2, [pc, #348]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 80010ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 0308 	and.w	r3, r3, #8
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d005      	beq.n	80010cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010c0:	4b52      	ldr	r3, [pc, #328]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	4a51      	ldr	r2, [pc, #324]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 80010c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010cc:	4b4f      	ldr	r3, [pc, #316]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	494c      	ldr	r1, [pc, #304]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 80010da:	4313      	orrs	r3, r2
 80010dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d044      	beq.n	8001174 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d107      	bne.n	8001102 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010f2:	4b46      	ldr	r3, [pc, #280]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d119      	bne.n	8001132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e07d      	b.n	80011fe <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2b02      	cmp	r3, #2
 8001108:	d003      	beq.n	8001112 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800110e:	2b03      	cmp	r3, #3
 8001110:	d107      	bne.n	8001122 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001112:	4b3e      	ldr	r3, [pc, #248]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d109      	bne.n	8001132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e06d      	b.n	80011fe <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001122:	4b3a      	ldr	r3, [pc, #232]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e065      	b.n	80011fe <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001132:	4b36      	ldr	r3, [pc, #216]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f023 0203 	bic.w	r2, r3, #3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	4933      	ldr	r1, [pc, #204]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 8001140:	4313      	orrs	r3, r2
 8001142:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001144:	f7ff fa82 	bl	800064c <HAL_GetTick>
 8001148:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800114a:	e00a      	b.n	8001162 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800114c:	f7ff fa7e 	bl	800064c <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	f241 3288 	movw	r2, #5000	; 0x1388
 800115a:	4293      	cmp	r3, r2
 800115c:	d901      	bls.n	8001162 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e04d      	b.n	80011fe <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001162:	4b2a      	ldr	r3, [pc, #168]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f003 020c 	and.w	r2, r3, #12
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	429a      	cmp	r2, r3
 8001172:	d1eb      	bne.n	800114c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001174:	4b24      	ldr	r3, [pc, #144]	; (8001208 <HAL_RCC_ClockConfig+0x1b4>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 030f 	and.w	r3, r3, #15
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	429a      	cmp	r2, r3
 8001180:	d20c      	bcs.n	800119c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001182:	4b21      	ldr	r3, [pc, #132]	; (8001208 <HAL_RCC_ClockConfig+0x1b4>)
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800118a:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <HAL_RCC_ClockConfig+0x1b4>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	429a      	cmp	r2, r3
 8001196:	d001      	beq.n	800119c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e030      	b.n	80011fe <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d008      	beq.n	80011ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011a8:	4b18      	ldr	r3, [pc, #96]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	4915      	ldr	r1, [pc, #84]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 80011b6:	4313      	orrs	r3, r2
 80011b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0308 	and.w	r3, r3, #8
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d009      	beq.n	80011da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011c6:	4b11      	ldr	r3, [pc, #68]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	490d      	ldr	r1, [pc, #52]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 80011d6:	4313      	orrs	r3, r2
 80011d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011da:	f000 f81d 	bl	8001218 <HAL_RCC_GetSysClockFreq>
 80011de:	4601      	mov	r1, r0
 80011e0:	4b0a      	ldr	r3, [pc, #40]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	091b      	lsrs	r3, r3, #4
 80011e6:	f003 030f 	and.w	r3, r3, #15
 80011ea:	4a09      	ldr	r2, [pc, #36]	; (8001210 <HAL_RCC_ClockConfig+0x1bc>)
 80011ec:	5cd3      	ldrb	r3, [r2, r3]
 80011ee:	fa21 f303 	lsr.w	r3, r1, r3
 80011f2:	4a08      	ldr	r2, [pc, #32]	; (8001214 <HAL_RCC_ClockConfig+0x1c0>)
 80011f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80011f6:	200f      	movs	r0, #15
 80011f8:	f7ff f9e4 	bl	80005c4 <HAL_InitTick>

  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40023c00 	.word	0x40023c00
 800120c:	40023800 	.word	0x40023800
 8001210:	08006648 	.word	0x08006648
 8001214:	20000094 	.word	0x20000094

08001218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	2300      	movs	r3, #0
 8001228:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800122a:	2300      	movs	r3, #0
 800122c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800122e:	4b50      	ldr	r3, [pc, #320]	; (8001370 <HAL_RCC_GetSysClockFreq+0x158>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 030c 	and.w	r3, r3, #12
 8001236:	2b04      	cmp	r3, #4
 8001238:	d007      	beq.n	800124a <HAL_RCC_GetSysClockFreq+0x32>
 800123a:	2b08      	cmp	r3, #8
 800123c:	d008      	beq.n	8001250 <HAL_RCC_GetSysClockFreq+0x38>
 800123e:	2b00      	cmp	r3, #0
 8001240:	f040 808d 	bne.w	800135e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001244:	4b4b      	ldr	r3, [pc, #300]	; (8001374 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001246:	60bb      	str	r3, [r7, #8]
       break;
 8001248:	e08c      	b.n	8001364 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800124a:	4b4b      	ldr	r3, [pc, #300]	; (8001378 <HAL_RCC_GetSysClockFreq+0x160>)
 800124c:	60bb      	str	r3, [r7, #8]
      break;
 800124e:	e089      	b.n	8001364 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001250:	4b47      	ldr	r3, [pc, #284]	; (8001370 <HAL_RCC_GetSysClockFreq+0x158>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001258:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800125a:	4b45      	ldr	r3, [pc, #276]	; (8001370 <HAL_RCC_GetSysClockFreq+0x158>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d023      	beq.n	80012ae <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001266:	4b42      	ldr	r3, [pc, #264]	; (8001370 <HAL_RCC_GetSysClockFreq+0x158>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	099b      	lsrs	r3, r3, #6
 800126c:	f04f 0400 	mov.w	r4, #0
 8001270:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001274:	f04f 0200 	mov.w	r2, #0
 8001278:	ea03 0501 	and.w	r5, r3, r1
 800127c:	ea04 0602 	and.w	r6, r4, r2
 8001280:	4a3d      	ldr	r2, [pc, #244]	; (8001378 <HAL_RCC_GetSysClockFreq+0x160>)
 8001282:	fb02 f106 	mul.w	r1, r2, r6
 8001286:	2200      	movs	r2, #0
 8001288:	fb02 f205 	mul.w	r2, r2, r5
 800128c:	440a      	add	r2, r1
 800128e:	493a      	ldr	r1, [pc, #232]	; (8001378 <HAL_RCC_GetSysClockFreq+0x160>)
 8001290:	fba5 0101 	umull	r0, r1, r5, r1
 8001294:	1853      	adds	r3, r2, r1
 8001296:	4619      	mov	r1, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f04f 0400 	mov.w	r4, #0
 800129e:	461a      	mov	r2, r3
 80012a0:	4623      	mov	r3, r4
 80012a2:	f7fe ffed 	bl	8000280 <__aeabi_uldivmod>
 80012a6:	4603      	mov	r3, r0
 80012a8:	460c      	mov	r4, r1
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	e049      	b.n	8001342 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012ae:	4b30      	ldr	r3, [pc, #192]	; (8001370 <HAL_RCC_GetSysClockFreq+0x158>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	099b      	lsrs	r3, r3, #6
 80012b4:	f04f 0400 	mov.w	r4, #0
 80012b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	ea03 0501 	and.w	r5, r3, r1
 80012c4:	ea04 0602 	and.w	r6, r4, r2
 80012c8:	4629      	mov	r1, r5
 80012ca:	4632      	mov	r2, r6
 80012cc:	f04f 0300 	mov.w	r3, #0
 80012d0:	f04f 0400 	mov.w	r4, #0
 80012d4:	0154      	lsls	r4, r2, #5
 80012d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80012da:	014b      	lsls	r3, r1, #5
 80012dc:	4619      	mov	r1, r3
 80012de:	4622      	mov	r2, r4
 80012e0:	1b49      	subs	r1, r1, r5
 80012e2:	eb62 0206 	sbc.w	r2, r2, r6
 80012e6:	f04f 0300 	mov.w	r3, #0
 80012ea:	f04f 0400 	mov.w	r4, #0
 80012ee:	0194      	lsls	r4, r2, #6
 80012f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80012f4:	018b      	lsls	r3, r1, #6
 80012f6:	1a5b      	subs	r3, r3, r1
 80012f8:	eb64 0402 	sbc.w	r4, r4, r2
 80012fc:	f04f 0100 	mov.w	r1, #0
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	00e2      	lsls	r2, r4, #3
 8001306:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800130a:	00d9      	lsls	r1, r3, #3
 800130c:	460b      	mov	r3, r1
 800130e:	4614      	mov	r4, r2
 8001310:	195b      	adds	r3, r3, r5
 8001312:	eb44 0406 	adc.w	r4, r4, r6
 8001316:	f04f 0100 	mov.w	r1, #0
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	02a2      	lsls	r2, r4, #10
 8001320:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001324:	0299      	lsls	r1, r3, #10
 8001326:	460b      	mov	r3, r1
 8001328:	4614      	mov	r4, r2
 800132a:	4618      	mov	r0, r3
 800132c:	4621      	mov	r1, r4
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f04f 0400 	mov.w	r4, #0
 8001334:	461a      	mov	r2, r3
 8001336:	4623      	mov	r3, r4
 8001338:	f7fe ffa2 	bl	8000280 <__aeabi_uldivmod>
 800133c:	4603      	mov	r3, r0
 800133e:	460c      	mov	r4, r1
 8001340:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001342:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <HAL_RCC_GetSysClockFreq+0x158>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	0c1b      	lsrs	r3, r3, #16
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	3301      	adds	r3, #1
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	fbb2 f3f3 	udiv	r3, r2, r3
 800135a:	60bb      	str	r3, [r7, #8]
      break;
 800135c:	e002      	b.n	8001364 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800135e:	4b05      	ldr	r3, [pc, #20]	; (8001374 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001360:	60bb      	str	r3, [r7, #8]
      break;
 8001362:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001364:	68bb      	ldr	r3, [r7, #8]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800136e:	bf00      	nop
 8001370:	40023800 	.word	0x40023800
 8001374:	00f42400 	.word	0x00f42400
 8001378:	017d7840 	.word	0x017d7840

0800137c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001380:	4b03      	ldr	r3, [pc, #12]	; (8001390 <HAL_RCC_GetHCLKFreq+0x14>)
 8001382:	681b      	ldr	r3, [r3, #0]
}
 8001384:	4618      	mov	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	20000094 	.word	0x20000094

08001394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001398:	f7ff fff0 	bl	800137c <HAL_RCC_GetHCLKFreq>
 800139c:	4601      	mov	r1, r0
 800139e:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	0a9b      	lsrs	r3, r3, #10
 80013a4:	f003 0307 	and.w	r3, r3, #7
 80013a8:	4a03      	ldr	r2, [pc, #12]	; (80013b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013aa:	5cd3      	ldrb	r3, [r2, r3]
 80013ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40023800 	.word	0x40023800
 80013b8:	08006658 	.word	0x08006658

080013bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80013c0:	f7ff ffdc 	bl	800137c <HAL_RCC_GetHCLKFreq>
 80013c4:	4601      	mov	r1, r0
 80013c6:	4b05      	ldr	r3, [pc, #20]	; (80013dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	0b5b      	lsrs	r3, r3, #13
 80013cc:	f003 0307 	and.w	r3, r3, #7
 80013d0:	4a03      	ldr	r2, [pc, #12]	; (80013e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013d2:	5cd3      	ldrb	r3, [r2, r3]
 80013d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013d8:	4618      	mov	r0, r3
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40023800 	.word	0x40023800
 80013e0:	08006658 	.word	0x08006658

080013e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e01d      	b.n	8001432 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d106      	bne.n	8001410 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f003 ff02 	bl	8005214 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2202      	movs	r2, #2
 8001414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3304      	adds	r3, #4
 8001420:	4619      	mov	r1, r3
 8001422:	4610      	mov	r0, r2
 8001424:	f000 f992 	bl	800174c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800143a:	b480      	push	{r7}
 800143c:	b085      	sub	sp, #20
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	68da      	ldr	r2, [r3, #12]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f042 0201 	orr.w	r2, r2, #1
 8001450:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 0307 	and.w	r3, r3, #7
 800145c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2b06      	cmp	r3, #6
 8001462:	d007      	beq.n	8001474 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f042 0201 	orr.w	r2, r2, #1
 8001472:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001482:	b480      	push	{r7}
 8001484:	b083      	sub	sp, #12
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68da      	ldr	r2, [r3, #12]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f022 0201 	bic.w	r2, r2, #1
 8001498:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6a1a      	ldr	r2, [r3, #32]
 80014a0:	f241 1311 	movw	r3, #4369	; 0x1111
 80014a4:	4013      	ands	r3, r2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10f      	bne.n	80014ca <HAL_TIM_Base_Stop_IT+0x48>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6a1a      	ldr	r2, [r3, #32]
 80014b0:	f240 4344 	movw	r3, #1092	; 0x444
 80014b4:	4013      	ands	r3, r2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d107      	bne.n	80014ca <HAL_TIM_Base_Stop_IT+0x48>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 0201 	bic.w	r2, r2, #1
 80014c8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d122      	bne.n	8001534 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d11b      	bne.n	8001534 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f06f 0202 	mvn.w	r2, #2
 8001504:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2201      	movs	r2, #1
 800150a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	f003 0303 	and.w	r3, r3, #3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f000 f8f8 	bl	8001710 <HAL_TIM_IC_CaptureCallback>
 8001520:	e005      	b.n	800152e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 f8ea 	bl	80016fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f000 f8fb 	bl	8001724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	2b04      	cmp	r3, #4
 8001540:	d122      	bne.n	8001588 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	2b04      	cmp	r3, #4
 800154e:	d11b      	bne.n	8001588 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f06f 0204 	mvn.w	r2, #4
 8001558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2202      	movs	r2, #2
 800155e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f000 f8ce 	bl	8001710 <HAL_TIM_IC_CaptureCallback>
 8001574:	e005      	b.n	8001582 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 f8c0 	bl	80016fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f000 f8d1 	bl	8001724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	2b08      	cmp	r3, #8
 8001594:	d122      	bne.n	80015dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	f003 0308 	and.w	r3, r3, #8
 80015a0:	2b08      	cmp	r3, #8
 80015a2:	d11b      	bne.n	80015dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f06f 0208 	mvn.w	r2, #8
 80015ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2204      	movs	r2, #4
 80015b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	f003 0303 	and.w	r3, r3, #3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f000 f8a4 	bl	8001710 <HAL_TIM_IC_CaptureCallback>
 80015c8:	e005      	b.n	80015d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 f896 	bl	80016fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f000 f8a7 	bl	8001724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	f003 0310 	and.w	r3, r3, #16
 80015e6:	2b10      	cmp	r3, #16
 80015e8:	d122      	bne.n	8001630 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	f003 0310 	and.w	r3, r3, #16
 80015f4:	2b10      	cmp	r3, #16
 80015f6:	d11b      	bne.n	8001630 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f06f 0210 	mvn.w	r2, #16
 8001600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2208      	movs	r2, #8
 8001606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 f87a 	bl	8001710 <HAL_TIM_IC_CaptureCallback>
 800161c:	e005      	b.n	800162a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 f86c 	bl	80016fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 f87d 	bl	8001724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b01      	cmp	r3, #1
 800163c:	d10e      	bne.n	800165c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	2b01      	cmp	r3, #1
 800164a:	d107      	bne.n	800165c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f06f 0201 	mvn.w	r2, #1
 8001654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 f846 	bl	80016e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001666:	2b80      	cmp	r3, #128	; 0x80
 8001668:	d10e      	bne.n	8001688 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001674:	2b80      	cmp	r3, #128	; 0x80
 8001676:	d107      	bne.n	8001688 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 f8ec 	bl	8001860 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001692:	2b40      	cmp	r3, #64	; 0x40
 8001694:	d10e      	bne.n	80016b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016a0:	2b40      	cmp	r3, #64	; 0x40
 80016a2:	d107      	bne.n	80016b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80016ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 f842 	bl	8001738 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	f003 0320 	and.w	r3, r3, #32
 80016be:	2b20      	cmp	r3, #32
 80016c0:	d10e      	bne.n	80016e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	f003 0320 	and.w	r3, r3, #32
 80016cc:	2b20      	cmp	r3, #32
 80016ce:	d107      	bne.n	80016e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f06f 0220 	mvn.w	r2, #32
 80016d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 f8b6 	bl	800184c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a34      	ldr	r2, [pc, #208]	; (8001830 <TIM_Base_SetConfig+0xe4>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d00f      	beq.n	8001784 <TIM_Base_SetConfig+0x38>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800176a:	d00b      	beq.n	8001784 <TIM_Base_SetConfig+0x38>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a31      	ldr	r2, [pc, #196]	; (8001834 <TIM_Base_SetConfig+0xe8>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d007      	beq.n	8001784 <TIM_Base_SetConfig+0x38>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a30      	ldr	r2, [pc, #192]	; (8001838 <TIM_Base_SetConfig+0xec>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d003      	beq.n	8001784 <TIM_Base_SetConfig+0x38>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a2f      	ldr	r2, [pc, #188]	; (800183c <TIM_Base_SetConfig+0xf0>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d108      	bne.n	8001796 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800178a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	4313      	orrs	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a25      	ldr	r2, [pc, #148]	; (8001830 <TIM_Base_SetConfig+0xe4>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d01b      	beq.n	80017d6 <TIM_Base_SetConfig+0x8a>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017a4:	d017      	beq.n	80017d6 <TIM_Base_SetConfig+0x8a>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a22      	ldr	r2, [pc, #136]	; (8001834 <TIM_Base_SetConfig+0xe8>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d013      	beq.n	80017d6 <TIM_Base_SetConfig+0x8a>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a21      	ldr	r2, [pc, #132]	; (8001838 <TIM_Base_SetConfig+0xec>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d00f      	beq.n	80017d6 <TIM_Base_SetConfig+0x8a>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a20      	ldr	r2, [pc, #128]	; (800183c <TIM_Base_SetConfig+0xf0>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d00b      	beq.n	80017d6 <TIM_Base_SetConfig+0x8a>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a1f      	ldr	r2, [pc, #124]	; (8001840 <TIM_Base_SetConfig+0xf4>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d007      	beq.n	80017d6 <TIM_Base_SetConfig+0x8a>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a1e      	ldr	r2, [pc, #120]	; (8001844 <TIM_Base_SetConfig+0xf8>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d003      	beq.n	80017d6 <TIM_Base_SetConfig+0x8a>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a1d      	ldr	r2, [pc, #116]	; (8001848 <TIM_Base_SetConfig+0xfc>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d108      	bne.n	80017e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a08      	ldr	r2, [pc, #32]	; (8001830 <TIM_Base_SetConfig+0xe4>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d103      	bne.n	800181c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	691a      	ldr	r2, [r3, #16]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	615a      	str	r2, [r3, #20]
}
 8001822:	bf00      	nop
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40010000 	.word	0x40010000
 8001834:	40000400 	.word	0x40000400
 8001838:	40000800 	.word	0x40000800
 800183c:	40000c00 	.word	0x40000c00
 8001840:	40014000 	.word	0x40014000
 8001844:	40014400 	.word	0x40014400
 8001848:	40014800 	.word	0x40014800

0800184c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e03f      	b.n	8001906 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d106      	bne.n	80018a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f003 fd0c 	bl	80052b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2224      	movs	r2, #36	; 0x24
 80018a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68da      	ldr	r2, [r3, #12]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 fbed 	bl	8002098 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	691a      	ldr	r2, [r3, #16]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80018cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	695a      	ldr	r2, [r3, #20]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80018dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	68da      	ldr	r2, [r3, #12]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2220      	movs	r2, #32
 80018f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2220      	movs	r2, #32
 8001900:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b088      	sub	sp, #32
 8001912:	af02      	add	r7, sp, #8
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	603b      	str	r3, [r7, #0]
 800191a:	4613      	mov	r3, r2
 800191c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b20      	cmp	r3, #32
 800192c:	f040 8083 	bne.w	8001a36 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d002      	beq.n	800193c <HAL_UART_Transmit+0x2e>
 8001936:	88fb      	ldrh	r3, [r7, #6]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e07b      	b.n	8001a38 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001946:	2b01      	cmp	r3, #1
 8001948:	d101      	bne.n	800194e <HAL_UART_Transmit+0x40>
 800194a:	2302      	movs	r3, #2
 800194c:	e074      	b.n	8001a38 <HAL_UART_Transmit+0x12a>
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2201      	movs	r2, #1
 8001952:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2221      	movs	r2, #33	; 0x21
 8001960:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001964:	f7fe fe72 	bl	800064c <HAL_GetTick>
 8001968:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	88fa      	ldrh	r2, [r7, #6]
 800196e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	88fa      	ldrh	r2, [r7, #6]
 8001974:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001976:	e042      	b.n	80019fe <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800197c:	b29b      	uxth	r3, r3
 800197e:	3b01      	subs	r3, #1
 8001980:	b29a      	uxth	r2, r3
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800198e:	d122      	bne.n	80019d6 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	2200      	movs	r2, #0
 8001998:	2180      	movs	r1, #128	; 0x80
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f000 fa10 	bl	8001dc0 <UART_WaitOnFlagUntilTimeout>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e046      	b.n	8001a38 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	461a      	mov	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019bc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d103      	bne.n	80019ce <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	3302      	adds	r3, #2
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	e017      	b.n	80019fe <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	3301      	adds	r3, #1
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	e013      	b.n	80019fe <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	2200      	movs	r2, #0
 80019de:	2180      	movs	r1, #128	; 0x80
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f000 f9ed 	bl	8001dc0 <UART_WaitOnFlagUntilTimeout>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e023      	b.n	8001a38 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	1c5a      	adds	r2, r3, #1
 80019f4:	60ba      	str	r2, [r7, #8]
 80019f6:	781a      	ldrb	r2, [r3, #0]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1b7      	bne.n	8001978 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2140      	movs	r1, #64	; 0x40
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f000 f9d4 	bl	8001dc0 <UART_WaitOnFlagUntilTimeout>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e00a      	b.n	8001a38 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2220      	movs	r2, #32
 8001a26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	e000      	b.n	8001a38 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001a36:	2302      	movs	r3, #2
  }
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	af02      	add	r7, sp, #8
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b20      	cmp	r3, #32
 8001a5e:	f040 8090 	bne.w	8001b82 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d002      	beq.n	8001a6e <HAL_UART_Receive+0x2e>
 8001a68:	88fb      	ldrh	r3, [r7, #6]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e088      	b.n	8001b84 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d101      	bne.n	8001a80 <HAL_UART_Receive+0x40>
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	e081      	b.n	8001b84 <HAL_UART_Receive+0x144>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2222      	movs	r2, #34	; 0x22
 8001a92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001a96:	f7fe fdd9 	bl	800064c <HAL_GetTick>
 8001a9a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	88fa      	ldrh	r2, [r7, #6]
 8001aa0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	88fa      	ldrh	r2, [r7, #6]
 8001aa6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001aa8:	e05c      	b.n	8001b64 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ac0:	d12b      	bne.n	8001b1a <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2120      	movs	r1, #32
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f000 f977 	bl	8001dc0 <UART_WaitOnFlagUntilTimeout>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e053      	b.n	8001b84 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d10c      	bne.n	8001b02 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	3302      	adds	r3, #2
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	e030      	b.n	8001b64 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	3301      	adds	r3, #1
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	e024      	b.n	8001b64 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	2200      	movs	r2, #0
 8001b22:	2120      	movs	r1, #32
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f000 f94b 	bl	8001dc0 <UART_WaitOnFlagUntilTimeout>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e027      	b.n	8001b84 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d108      	bne.n	8001b4e <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6859      	ldr	r1, [r3, #4]
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	60ba      	str	r2, [r7, #8]
 8001b48:	b2ca      	uxtb	r2, r1
 8001b4a:	701a      	strb	r2, [r3, #0]
 8001b4c:	e00a      	b.n	8001b64 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	1c59      	adds	r1, r3, #1
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b60:	b2d2      	uxtb	r2, r2
 8001b62:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d19d      	bne.n	8001aaa <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2220      	movs	r2, #32
 8001b72:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	e000      	b.n	8001b84 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8001b82:	2302      	movs	r3, #2
  }
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b088      	sub	sp, #32
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d10d      	bne.n	8001bde <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	f003 0320 	and.w	r3, r3, #32
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d008      	beq.n	8001bde <HAL_UART_IRQHandler+0x52>
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	f003 0320 	and.w	r3, r3, #32
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f9dc 	bl	8001f94 <UART_Receive_IT>
      return;
 8001bdc:	e0cc      	b.n	8001d78 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 80ab 	beq.w	8001d3c <HAL_UART_IRQHandler+0x1b0>
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d105      	bne.n	8001bfc <HAL_UART_IRQHandler+0x70>
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f000 80a0 	beq.w	8001d3c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00a      	beq.n	8001c1c <HAL_UART_IRQHandler+0x90>
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d005      	beq.n	8001c1c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c14:	f043 0201 	orr.w	r2, r3, #1
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00a      	beq.n	8001c3c <HAL_UART_IRQHandler+0xb0>
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d005      	beq.n	8001c3c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c34:	f043 0202 	orr.w	r2, r3, #2
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00a      	beq.n	8001c5c <HAL_UART_IRQHandler+0xd0>
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d005      	beq.n	8001c5c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c54:	f043 0204 	orr.w	r2, r3, #4
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00a      	beq.n	8001c7c <HAL_UART_IRQHandler+0xf0>
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c74:	f043 0208 	orr.w	r2, r3, #8
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d078      	beq.n	8001d76 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f003 0320 	and.w	r3, r3, #32
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d007      	beq.n	8001c9e <HAL_UART_IRQHandler+0x112>
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	f003 0320 	and.w	r3, r3, #32
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d002      	beq.n	8001c9e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f97b 	bl	8001f94 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca8:	2b40      	cmp	r3, #64	; 0x40
 8001caa:	bf0c      	ite	eq
 8001cac:	2301      	moveq	r3, #1
 8001cae:	2300      	movne	r3, #0
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb8:	f003 0308 	and.w	r3, r3, #8
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d102      	bne.n	8001cc6 <HAL_UART_IRQHandler+0x13a>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d031      	beq.n	8001d2a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f8c4 	bl	8001e54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd6:	2b40      	cmp	r3, #64	; 0x40
 8001cd8:	d123      	bne.n	8001d22 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	695a      	ldr	r2, [r3, #20]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ce8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d013      	beq.n	8001d1a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf6:	4a22      	ldr	r2, [pc, #136]	; (8001d80 <HAL_UART_IRQHandler+0x1f4>)
 8001cf8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fdc1 	bl	8000886 <HAL_DMA_Abort_IT>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d016      	beq.n	8001d38 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d14:	4610      	mov	r0, r2
 8001d16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d18:	e00e      	b.n	8001d38 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f846 	bl	8001dac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d20:	e00a      	b.n	8001d38 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f842 	bl	8001dac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d28:	e006      	b.n	8001d38 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f83e 	bl	8001dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001d36:	e01e      	b.n	8001d76 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d38:	bf00      	nop
    return;
 8001d3a:	e01c      	b.n	8001d76 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d008      	beq.n	8001d58 <HAL_UART_IRQHandler+0x1cc>
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 f8b1 	bl	8001eb8 <UART_Transmit_IT>
    return;
 8001d56:	e00f      	b.n	8001d78 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00a      	beq.n	8001d78 <HAL_UART_IRQHandler+0x1ec>
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f8f9 	bl	8001f64 <UART_EndTransmit_IT>
    return;
 8001d72:	bf00      	nop
 8001d74:	e000      	b.n	8001d78 <HAL_UART_IRQHandler+0x1ec>
    return;
 8001d76:	bf00      	nop
  }
}
 8001d78:	3720      	adds	r7, #32
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	08001e91 	.word	0x08001e91

08001d84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	603b      	str	r3, [r7, #0]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dd0:	e02c      	b.n	8001e2c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dd8:	d028      	beq.n	8001e2c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d007      	beq.n	8001df0 <UART_WaitOnFlagUntilTimeout+0x30>
 8001de0:	f7fe fc34 	bl	800064c <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d21d      	bcs.n	8001e2c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001dfe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	695a      	ldr	r2, [r3, #20]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 0201 	bic.w	r2, r2, #1
 8001e0e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2220      	movs	r2, #32
 8001e14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2220      	movs	r2, #32
 8001e1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e00f      	b.n	8001e4c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	4013      	ands	r3, r2
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	bf0c      	ite	eq
 8001e3c:	2301      	moveq	r3, #1
 8001e3e:	2300      	movne	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	461a      	mov	r2, r3
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d0c3      	beq.n	8001dd2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68da      	ldr	r2, [r3, #12]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001e6a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	695a      	ldr	r2, [r3, #20]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0201 	bic.w	r2, r2, #1
 8001e7a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001eaa:	68f8      	ldr	r0, [r7, #12]
 8001eac:	f7ff ff7e 	bl	8001dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001eb0:	bf00      	nop
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b21      	cmp	r3, #33	; 0x21
 8001eca:	d144      	bne.n	8001f56 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ed4:	d11a      	bne.n	8001f0c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001eea:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d105      	bne.n	8001f00 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	1c9a      	adds	r2, r3, #2
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	621a      	str	r2, [r3, #32]
 8001efe:	e00e      	b.n	8001f1e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	621a      	str	r2, [r3, #32]
 8001f0a:	e008      	b.n	8001f1e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	1c59      	adds	r1, r3, #1
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6211      	str	r1, [r2, #32]
 8001f16:	781a      	ldrb	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	3b01      	subs	r3, #1
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10f      	bne.n	8001f52 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68da      	ldr	r2, [r3, #12]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f40:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68da      	ldr	r2, [r3, #12]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f50:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	e000      	b.n	8001f58 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8001f56:	2302      	movs	r3, #2
  }
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68da      	ldr	r2, [r3, #12]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f7a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff fefd 	bl	8001d84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b22      	cmp	r3, #34	; 0x22
 8001fa6:	d171      	bne.n	800208c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fb0:	d123      	bne.n	8001ffa <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10e      	bne.n	8001fde <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd6:	1c9a      	adds	r2, r3, #2
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	629a      	str	r2, [r3, #40]	; 0x28
 8001fdc:	e029      	b.n	8002032 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff2:	1c5a      	adds	r2, r3, #1
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	629a      	str	r2, [r3, #40]	; 0x28
 8001ff8:	e01b      	b.n	8002032 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10a      	bne.n	8002018 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6858      	ldr	r0, [r3, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200c:	1c59      	adds	r1, r3, #1
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	6291      	str	r1, [r2, #40]	; 0x28
 8002012:	b2c2      	uxtb	r2, r0
 8002014:	701a      	strb	r2, [r3, #0]
 8002016:	e00c      	b.n	8002032 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	b2da      	uxtb	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002024:	1c58      	adds	r0, r3, #1
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	6288      	str	r0, [r1, #40]	; 0x28
 800202a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002036:	b29b      	uxth	r3, r3
 8002038:	3b01      	subs	r3, #1
 800203a:	b29b      	uxth	r3, r3
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	4619      	mov	r1, r3
 8002040:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002042:	2b00      	cmp	r3, #0
 8002044:	d120      	bne.n	8002088 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68da      	ldr	r2, [r3, #12]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 0220 	bic.w	r2, r2, #32
 8002054:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68da      	ldr	r2, [r3, #12]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002064:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	695a      	ldr	r2, [r3, #20]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0201 	bic.w	r2, r2, #1
 8002074:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2220      	movs	r2, #32
 800207a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff fe8a 	bl	8001d98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002084:	2300      	movs	r3, #0
 8002086:	e002      	b.n	800208e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002088:	2300      	movs	r3, #0
 800208a:	e000      	b.n	800208e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800208c:	2302      	movs	r3, #2
  }
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
	...

08002098 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002098:	b5b0      	push	{r4, r5, r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80020d8:	f023 030c 	bic.w	r3, r3, #12
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6812      	ldr	r2, [r2, #0]
 80020e0:	68f9      	ldr	r1, [r7, #12]
 80020e2:	430b      	orrs	r3, r1
 80020e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	699a      	ldr	r2, [r3, #24]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002104:	f040 80e4 	bne.w	80022d0 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4aab      	ldr	r2, [pc, #684]	; (80023bc <UART_SetConfig+0x324>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d004      	beq.n	800211c <UART_SetConfig+0x84>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4aaa      	ldr	r2, [pc, #680]	; (80023c0 <UART_SetConfig+0x328>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d16c      	bne.n	80021f6 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800211c:	f7ff f94e 	bl	80013bc <HAL_RCC_GetPCLK2Freq>
 8002120:	4602      	mov	r2, r0
 8002122:	4613      	mov	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	009a      	lsls	r2, r3, #2
 800212a:	441a      	add	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	fbb2 f3f3 	udiv	r3, r2, r3
 8002136:	4aa3      	ldr	r2, [pc, #652]	; (80023c4 <UART_SetConfig+0x32c>)
 8002138:	fba2 2303 	umull	r2, r3, r2, r3
 800213c:	095b      	lsrs	r3, r3, #5
 800213e:	011c      	lsls	r4, r3, #4
 8002140:	f7ff f93c 	bl	80013bc <HAL_RCC_GetPCLK2Freq>
 8002144:	4602      	mov	r2, r0
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	009a      	lsls	r2, r3, #2
 800214e:	441a      	add	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	fbb2 f5f3 	udiv	r5, r2, r3
 800215a:	f7ff f92f 	bl	80013bc <HAL_RCC_GetPCLK2Freq>
 800215e:	4602      	mov	r2, r0
 8002160:	4613      	mov	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	009a      	lsls	r2, r3, #2
 8002168:	441a      	add	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	fbb2 f3f3 	udiv	r3, r2, r3
 8002174:	4a93      	ldr	r2, [pc, #588]	; (80023c4 <UART_SetConfig+0x32c>)
 8002176:	fba2 2303 	umull	r2, r3, r2, r3
 800217a:	095b      	lsrs	r3, r3, #5
 800217c:	2264      	movs	r2, #100	; 0x64
 800217e:	fb02 f303 	mul.w	r3, r2, r3
 8002182:	1aeb      	subs	r3, r5, r3
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	3332      	adds	r3, #50	; 0x32
 8002188:	4a8e      	ldr	r2, [pc, #568]	; (80023c4 <UART_SetConfig+0x32c>)
 800218a:	fba2 2303 	umull	r2, r3, r2, r3
 800218e:	095b      	lsrs	r3, r3, #5
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002196:	441c      	add	r4, r3
 8002198:	f7ff f910 	bl	80013bc <HAL_RCC_GetPCLK2Freq>
 800219c:	4602      	mov	r2, r0
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	009a      	lsls	r2, r3, #2
 80021a6:	441a      	add	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	fbb2 f5f3 	udiv	r5, r2, r3
 80021b2:	f7ff f903 	bl	80013bc <HAL_RCC_GetPCLK2Freq>
 80021b6:	4602      	mov	r2, r0
 80021b8:	4613      	mov	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	009a      	lsls	r2, r3, #2
 80021c0:	441a      	add	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021cc:	4a7d      	ldr	r2, [pc, #500]	; (80023c4 <UART_SetConfig+0x32c>)
 80021ce:	fba2 2303 	umull	r2, r3, r2, r3
 80021d2:	095b      	lsrs	r3, r3, #5
 80021d4:	2264      	movs	r2, #100	; 0x64
 80021d6:	fb02 f303 	mul.w	r3, r2, r3
 80021da:	1aeb      	subs	r3, r5, r3
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	3332      	adds	r3, #50	; 0x32
 80021e0:	4a78      	ldr	r2, [pc, #480]	; (80023c4 <UART_SetConfig+0x32c>)
 80021e2:	fba2 2303 	umull	r2, r3, r2, r3
 80021e6:	095b      	lsrs	r3, r3, #5
 80021e8:	f003 0207 	and.w	r2, r3, #7
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4422      	add	r2, r4
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	e154      	b.n	80024a0 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80021f6:	f7ff f8cd 	bl	8001394 <HAL_RCC_GetPCLK1Freq>
 80021fa:	4602      	mov	r2, r0
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	009a      	lsls	r2, r3, #2
 8002204:	441a      	add	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002210:	4a6c      	ldr	r2, [pc, #432]	; (80023c4 <UART_SetConfig+0x32c>)
 8002212:	fba2 2303 	umull	r2, r3, r2, r3
 8002216:	095b      	lsrs	r3, r3, #5
 8002218:	011c      	lsls	r4, r3, #4
 800221a:	f7ff f8bb 	bl	8001394 <HAL_RCC_GetPCLK1Freq>
 800221e:	4602      	mov	r2, r0
 8002220:	4613      	mov	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	009a      	lsls	r2, r3, #2
 8002228:	441a      	add	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	fbb2 f5f3 	udiv	r5, r2, r3
 8002234:	f7ff f8ae 	bl	8001394 <HAL_RCC_GetPCLK1Freq>
 8002238:	4602      	mov	r2, r0
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	009a      	lsls	r2, r3, #2
 8002242:	441a      	add	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	fbb2 f3f3 	udiv	r3, r2, r3
 800224e:	4a5d      	ldr	r2, [pc, #372]	; (80023c4 <UART_SetConfig+0x32c>)
 8002250:	fba2 2303 	umull	r2, r3, r2, r3
 8002254:	095b      	lsrs	r3, r3, #5
 8002256:	2264      	movs	r2, #100	; 0x64
 8002258:	fb02 f303 	mul.w	r3, r2, r3
 800225c:	1aeb      	subs	r3, r5, r3
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	3332      	adds	r3, #50	; 0x32
 8002262:	4a58      	ldr	r2, [pc, #352]	; (80023c4 <UART_SetConfig+0x32c>)
 8002264:	fba2 2303 	umull	r2, r3, r2, r3
 8002268:	095b      	lsrs	r3, r3, #5
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002270:	441c      	add	r4, r3
 8002272:	f7ff f88f 	bl	8001394 <HAL_RCC_GetPCLK1Freq>
 8002276:	4602      	mov	r2, r0
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	009a      	lsls	r2, r3, #2
 8002280:	441a      	add	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	fbb2 f5f3 	udiv	r5, r2, r3
 800228c:	f7ff f882 	bl	8001394 <HAL_RCC_GetPCLK1Freq>
 8002290:	4602      	mov	r2, r0
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	009a      	lsls	r2, r3, #2
 800229a:	441a      	add	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a6:	4a47      	ldr	r2, [pc, #284]	; (80023c4 <UART_SetConfig+0x32c>)
 80022a8:	fba2 2303 	umull	r2, r3, r2, r3
 80022ac:	095b      	lsrs	r3, r3, #5
 80022ae:	2264      	movs	r2, #100	; 0x64
 80022b0:	fb02 f303 	mul.w	r3, r2, r3
 80022b4:	1aeb      	subs	r3, r5, r3
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	3332      	adds	r3, #50	; 0x32
 80022ba:	4a42      	ldr	r2, [pc, #264]	; (80023c4 <UART_SetConfig+0x32c>)
 80022bc:	fba2 2303 	umull	r2, r3, r2, r3
 80022c0:	095b      	lsrs	r3, r3, #5
 80022c2:	f003 0207 	and.w	r2, r3, #7
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4422      	add	r2, r4
 80022cc:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80022ce:	e0e7      	b.n	80024a0 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a39      	ldr	r2, [pc, #228]	; (80023bc <UART_SetConfig+0x324>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d004      	beq.n	80022e4 <UART_SetConfig+0x24c>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a38      	ldr	r2, [pc, #224]	; (80023c0 <UART_SetConfig+0x328>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d171      	bne.n	80023c8 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80022e4:	f7ff f86a 	bl	80013bc <HAL_RCC_GetPCLK2Freq>
 80022e8:	4602      	mov	r2, r0
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	009a      	lsls	r2, r3, #2
 80022f2:	441a      	add	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fe:	4a31      	ldr	r2, [pc, #196]	; (80023c4 <UART_SetConfig+0x32c>)
 8002300:	fba2 2303 	umull	r2, r3, r2, r3
 8002304:	095b      	lsrs	r3, r3, #5
 8002306:	011c      	lsls	r4, r3, #4
 8002308:	f7ff f858 	bl	80013bc <HAL_RCC_GetPCLK2Freq>
 800230c:	4602      	mov	r2, r0
 800230e:	4613      	mov	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	009a      	lsls	r2, r3, #2
 8002316:	441a      	add	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	fbb2 f5f3 	udiv	r5, r2, r3
 8002322:	f7ff f84b 	bl	80013bc <HAL_RCC_GetPCLK2Freq>
 8002326:	4602      	mov	r2, r0
 8002328:	4613      	mov	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	009a      	lsls	r2, r3, #2
 8002330:	441a      	add	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	fbb2 f3f3 	udiv	r3, r2, r3
 800233c:	4a21      	ldr	r2, [pc, #132]	; (80023c4 <UART_SetConfig+0x32c>)
 800233e:	fba2 2303 	umull	r2, r3, r2, r3
 8002342:	095b      	lsrs	r3, r3, #5
 8002344:	2264      	movs	r2, #100	; 0x64
 8002346:	fb02 f303 	mul.w	r3, r2, r3
 800234a:	1aeb      	subs	r3, r5, r3
 800234c:	011b      	lsls	r3, r3, #4
 800234e:	3332      	adds	r3, #50	; 0x32
 8002350:	4a1c      	ldr	r2, [pc, #112]	; (80023c4 <UART_SetConfig+0x32c>)
 8002352:	fba2 2303 	umull	r2, r3, r2, r3
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800235c:	441c      	add	r4, r3
 800235e:	f7ff f82d 	bl	80013bc <HAL_RCC_GetPCLK2Freq>
 8002362:	4602      	mov	r2, r0
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	009a      	lsls	r2, r3, #2
 800236c:	441a      	add	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	fbb2 f5f3 	udiv	r5, r2, r3
 8002378:	f7ff f820 	bl	80013bc <HAL_RCC_GetPCLK2Freq>
 800237c:	4602      	mov	r2, r0
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	009a      	lsls	r2, r3, #2
 8002386:	441a      	add	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002392:	4a0c      	ldr	r2, [pc, #48]	; (80023c4 <UART_SetConfig+0x32c>)
 8002394:	fba2 2303 	umull	r2, r3, r2, r3
 8002398:	095b      	lsrs	r3, r3, #5
 800239a:	2264      	movs	r2, #100	; 0x64
 800239c:	fb02 f303 	mul.w	r3, r2, r3
 80023a0:	1aeb      	subs	r3, r5, r3
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	3332      	adds	r3, #50	; 0x32
 80023a6:	4a07      	ldr	r2, [pc, #28]	; (80023c4 <UART_SetConfig+0x32c>)
 80023a8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ac:	095b      	lsrs	r3, r3, #5
 80023ae:	f003 020f 	and.w	r2, r3, #15
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4422      	add	r2, r4
 80023b8:	609a      	str	r2, [r3, #8]
 80023ba:	e071      	b.n	80024a0 <UART_SetConfig+0x408>
 80023bc:	40011000 	.word	0x40011000
 80023c0:	40011400 	.word	0x40011400
 80023c4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80023c8:	f7fe ffe4 	bl	8001394 <HAL_RCC_GetPCLK1Freq>
 80023cc:	4602      	mov	r2, r0
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	009a      	lsls	r2, r3, #2
 80023d6:	441a      	add	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e2:	4a31      	ldr	r2, [pc, #196]	; (80024a8 <UART_SetConfig+0x410>)
 80023e4:	fba2 2303 	umull	r2, r3, r2, r3
 80023e8:	095b      	lsrs	r3, r3, #5
 80023ea:	011c      	lsls	r4, r3, #4
 80023ec:	f7fe ffd2 	bl	8001394 <HAL_RCC_GetPCLK1Freq>
 80023f0:	4602      	mov	r2, r0
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	009a      	lsls	r2, r3, #2
 80023fa:	441a      	add	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	fbb2 f5f3 	udiv	r5, r2, r3
 8002406:	f7fe ffc5 	bl	8001394 <HAL_RCC_GetPCLK1Freq>
 800240a:	4602      	mov	r2, r0
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	009a      	lsls	r2, r3, #2
 8002414:	441a      	add	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002420:	4a21      	ldr	r2, [pc, #132]	; (80024a8 <UART_SetConfig+0x410>)
 8002422:	fba2 2303 	umull	r2, r3, r2, r3
 8002426:	095b      	lsrs	r3, r3, #5
 8002428:	2264      	movs	r2, #100	; 0x64
 800242a:	fb02 f303 	mul.w	r3, r2, r3
 800242e:	1aeb      	subs	r3, r5, r3
 8002430:	011b      	lsls	r3, r3, #4
 8002432:	3332      	adds	r3, #50	; 0x32
 8002434:	4a1c      	ldr	r2, [pc, #112]	; (80024a8 <UART_SetConfig+0x410>)
 8002436:	fba2 2303 	umull	r2, r3, r2, r3
 800243a:	095b      	lsrs	r3, r3, #5
 800243c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002440:	441c      	add	r4, r3
 8002442:	f7fe ffa7 	bl	8001394 <HAL_RCC_GetPCLK1Freq>
 8002446:	4602      	mov	r2, r0
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	009a      	lsls	r2, r3, #2
 8002450:	441a      	add	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	fbb2 f5f3 	udiv	r5, r2, r3
 800245c:	f7fe ff9a 	bl	8001394 <HAL_RCC_GetPCLK1Freq>
 8002460:	4602      	mov	r2, r0
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	009a      	lsls	r2, r3, #2
 800246a:	441a      	add	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	fbb2 f3f3 	udiv	r3, r2, r3
 8002476:	4a0c      	ldr	r2, [pc, #48]	; (80024a8 <UART_SetConfig+0x410>)
 8002478:	fba2 2303 	umull	r2, r3, r2, r3
 800247c:	095b      	lsrs	r3, r3, #5
 800247e:	2264      	movs	r2, #100	; 0x64
 8002480:	fb02 f303 	mul.w	r3, r2, r3
 8002484:	1aeb      	subs	r3, r5, r3
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	3332      	adds	r3, #50	; 0x32
 800248a:	4a07      	ldr	r2, [pc, #28]	; (80024a8 <UART_SetConfig+0x410>)
 800248c:	fba2 2303 	umull	r2, r3, r2, r3
 8002490:	095b      	lsrs	r3, r3, #5
 8002492:	f003 020f 	and.w	r2, r3, #15
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4422      	add	r2, r4
 800249c:	609a      	str	r2, [r3, #8]
}
 800249e:	e7ff      	b.n	80024a0 <UART_SetConfig+0x408>
 80024a0:	bf00      	nop
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bdb0      	pop	{r4, r5, r7, pc}
 80024a8:	51eb851f 	.word	0x51eb851f

080024ac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80024b6:	2300      	movs	r3, #0
 80024b8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80024ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024be:	2b84      	cmp	r3, #132	; 0x84
 80024c0:	d005      	beq.n	80024ce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80024c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	4413      	add	r3, r2
 80024ca:	3303      	adds	r3, #3
 80024cc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80024ce:	68fb      	ldr	r3, [r7, #12]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80024e0:	f000 fadc 	bl	8002a9c <vTaskStartScheduler>
  
  return osOK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	bd80      	pop	{r7, pc}

080024ea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80024ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ec:	b089      	sub	sp, #36	; 0x24
 80024ee:	af04      	add	r7, sp, #16
 80024f0:	6078      	str	r0, [r7, #4]
 80024f2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d020      	beq.n	800253e <osThreadCreate+0x54>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d01c      	beq.n	800253e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685c      	ldr	r4, [r3, #4]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681d      	ldr	r5, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691e      	ldr	r6, [r3, #16]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff ffc8 	bl	80024ac <makeFreeRtosPriority>
 800251c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002526:	9202      	str	r2, [sp, #8]
 8002528:	9301      	str	r3, [sp, #4]
 800252a:	9100      	str	r1, [sp, #0]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	4632      	mov	r2, r6
 8002530:	4629      	mov	r1, r5
 8002532:	4620      	mov	r0, r4
 8002534:	f000 f8f8 	bl	8002728 <xTaskCreateStatic>
 8002538:	4603      	mov	r3, r0
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	e01c      	b.n	8002578 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685c      	ldr	r4, [r3, #4]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800254a:	b29e      	uxth	r6, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff ffaa 	bl	80024ac <makeFreeRtosPriority>
 8002558:	4602      	mov	r2, r0
 800255a:	f107 030c 	add.w	r3, r7, #12
 800255e:	9301      	str	r3, [sp, #4]
 8002560:	9200      	str	r2, [sp, #0]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	4632      	mov	r2, r6
 8002566:	4629      	mov	r1, r5
 8002568:	4620      	mov	r0, r4
 800256a:	f000 f936 	bl	80027da <xTaskCreate>
 800256e:	4603      	mov	r3, r0
 8002570:	2b01      	cmp	r3, #1
 8002572:	d001      	beq.n	8002578 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002574:	2300      	movs	r3, #0
 8002576:	e000      	b.n	800257a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002578:	68fb      	ldr	r3, [r7, #12]
}
 800257a:	4618      	mov	r0, r3
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002582 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b084      	sub	sp, #16
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <osDelay+0x16>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	e000      	b.n	800259a <osDelay+0x18>
 8002598:	2301      	movs	r3, #1
 800259a:	4618      	mov	r0, r3
 800259c:	f000 fa4a 	bl	8002a34 <vTaskDelay>
  
  return osOK;
 80025a0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80025ae:	f000 fd6b 	bl	8003088 <xTaskGetSchedulerState>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d001      	beq.n	80025bc <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 80025b8:	f000 ff9e 	bl	80034f8 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80025bc:	bf00      	nop
 80025be:	bd80      	pop	{r7, pc}

080025c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f103 0208 	add.w	r2, r3, #8
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f103 0208 	add.w	r2, r3, #8
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f103 0208 	add.w	r2, r3, #8
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800261a:	b480      	push	{r7}
 800261c:	b085      	sub	sp, #20
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
 8002622:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	601a      	str	r2, [r3, #0]
}
 8002656:	bf00      	nop
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002662:	b480      	push	{r7}
 8002664:	b085      	sub	sp, #20
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002678:	d103      	bne.n	8002682 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	e00c      	b.n	800269c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	3308      	adds	r3, #8
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	e002      	b.n	8002690 <vListInsert+0x2e>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	429a      	cmp	r2, r3
 800269a:	d2f6      	bcs.n	800268a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	601a      	str	r2, [r3, #0]
}
 80026c8:	bf00      	nop
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6892      	ldr	r2, [r2, #8]
 80026ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6852      	ldr	r2, [r2, #4]
 80026f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d103      	bne.n	8002708 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	1e5a      	subs	r2, r3, #1
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08e      	sub	sp, #56	; 0x38
 800272c:	af04      	add	r7, sp, #16
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
 8002734:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002738:	2b00      	cmp	r3, #0
 800273a:	d109      	bne.n	8002750 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800273c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002740:	f383 8811 	msr	BASEPRI, r3
 8002744:	f3bf 8f6f 	isb	sy
 8002748:	f3bf 8f4f 	dsb	sy
 800274c:	623b      	str	r3, [r7, #32]
 800274e:	e7fe      	b.n	800274e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002752:	2b00      	cmp	r3, #0
 8002754:	d109      	bne.n	800276a <xTaskCreateStatic+0x42>
 8002756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800275a:	f383 8811 	msr	BASEPRI, r3
 800275e:	f3bf 8f6f 	isb	sy
 8002762:	f3bf 8f4f 	dsb	sy
 8002766:	61fb      	str	r3, [r7, #28]
 8002768:	e7fe      	b.n	8002768 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800276a:	2354      	movs	r3, #84	; 0x54
 800276c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	2b54      	cmp	r3, #84	; 0x54
 8002772:	d009      	beq.n	8002788 <xTaskCreateStatic+0x60>
 8002774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002778:	f383 8811 	msr	BASEPRI, r3
 800277c:	f3bf 8f6f 	isb	sy
 8002780:	f3bf 8f4f 	dsb	sy
 8002784:	61bb      	str	r3, [r7, #24]
 8002786:	e7fe      	b.n	8002786 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800278a:	2b00      	cmp	r3, #0
 800278c:	d01e      	beq.n	80027cc <xTaskCreateStatic+0xa4>
 800278e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002790:	2b00      	cmp	r3, #0
 8002792:	d01b      	beq.n	80027cc <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002796:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800279c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	2202      	movs	r2, #2
 80027a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80027a6:	2300      	movs	r3, #0
 80027a8:	9303      	str	r3, [sp, #12]
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	9302      	str	r3, [sp, #8]
 80027ae:	f107 0314 	add.w	r3, r7, #20
 80027b2:	9301      	str	r3, [sp, #4]
 80027b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68b9      	ldr	r1, [r7, #8]
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 f850 	bl	8002864 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80027c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027c6:	f000 f8cb 	bl	8002960 <prvAddNewTaskToReadyList>
 80027ca:	e001      	b.n	80027d0 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80027d0:	697b      	ldr	r3, [r7, #20]
	}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3728      	adds	r7, #40	; 0x28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b08c      	sub	sp, #48	; 0x30
 80027de:	af04      	add	r7, sp, #16
 80027e0:	60f8      	str	r0, [r7, #12]
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	603b      	str	r3, [r7, #0]
 80027e6:	4613      	mov	r3, r2
 80027e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027ea:	88fb      	ldrh	r3, [r7, #6]
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 fed0 	bl	8003594 <pvPortMalloc>
 80027f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00e      	beq.n	800281a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80027fc:	2054      	movs	r0, #84	; 0x54
 80027fe:	f000 fec9 	bl	8003594 <pvPortMalloc>
 8002802:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	631a      	str	r2, [r3, #48]	; 0x30
 8002810:	e005      	b.n	800281e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002812:	6978      	ldr	r0, [r7, #20]
 8002814:	f000 ff80 	bl	8003718 <vPortFree>
 8002818:	e001      	b.n	800281e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d017      	beq.n	8002854 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800282c:	88fa      	ldrh	r2, [r7, #6]
 800282e:	2300      	movs	r3, #0
 8002830:	9303      	str	r3, [sp, #12]
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	9302      	str	r3, [sp, #8]
 8002836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002838:	9301      	str	r3, [sp, #4]
 800283a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	68b9      	ldr	r1, [r7, #8]
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 f80e 	bl	8002864 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002848:	69f8      	ldr	r0, [r7, #28]
 800284a:	f000 f889 	bl	8002960 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800284e:	2301      	movs	r3, #1
 8002850:	61bb      	str	r3, [r7, #24]
 8002852:	e002      	b.n	800285a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002854:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002858:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800285a:	69bb      	ldr	r3, [r7, #24]
	}
 800285c:	4618      	mov	r0, r3
 800285e:	3720      	adds	r7, #32
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
 8002870:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002874:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800287c:	3b01      	subs	r3, #1
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	f023 0307 	bic.w	r3, r3, #7
 800288a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	2b00      	cmp	r3, #0
 8002894:	d009      	beq.n	80028aa <prvInitialiseNewTask+0x46>
 8002896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289a:	f383 8811 	msr	BASEPRI, r3
 800289e:	f3bf 8f6f 	isb	sy
 80028a2:	f3bf 8f4f 	dsb	sy
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	e7fe      	b.n	80028a8 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
 80028ae:	e012      	b.n	80028d6 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	4413      	add	r3, r2
 80028b6:	7819      	ldrb	r1, [r3, #0]
 80028b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	4413      	add	r3, r2
 80028be:	3334      	adds	r3, #52	; 0x34
 80028c0:	460a      	mov	r2, r1
 80028c2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	4413      	add	r3, r2
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d006      	beq.n	80028de <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	3301      	adds	r3, #1
 80028d4:	61fb      	str	r3, [r7, #28]
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	2b0f      	cmp	r3, #15
 80028da:	d9e9      	bls.n	80028b0 <prvInitialiseNewTask+0x4c>
 80028dc:	e000      	b.n	80028e0 <prvInitialiseNewTask+0x7c>
		{
			break;
 80028de:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80028e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80028e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ea:	2b06      	cmp	r3, #6
 80028ec:	d901      	bls.n	80028f2 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80028ee:	2306      	movs	r3, #6
 80028f0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80028f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028f6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80028f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028fc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80028fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002900:	2200      	movs	r2, #0
 8002902:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002906:	3304      	adds	r3, #4
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff fe79 	bl	8002600 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800290e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002910:	3318      	adds	r3, #24
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff fe74 	bl	8002600 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800291c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800291e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002920:	f1c3 0207 	rsb	r2, r3, #7
 8002924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002926:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800292c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800292e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002930:	2200      	movs	r2, #0
 8002932:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	68f9      	ldr	r1, [r7, #12]
 8002940:	69b8      	ldr	r0, [r7, #24]
 8002942:	f000 fc25 	bl	8003190 <pxPortInitialiseStack>
 8002946:	4602      	mov	r2, r0
 8002948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800294a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800294c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294e:	2b00      	cmp	r3, #0
 8002950:	d002      	beq.n	8002958 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002956:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002958:	bf00      	nop
 800295a:	3720      	adds	r7, #32
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002968:	f000 fd38 	bl	80033dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800296c:	4b2a      	ldr	r3, [pc, #168]	; (8002a18 <prvAddNewTaskToReadyList+0xb8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	3301      	adds	r3, #1
 8002972:	4a29      	ldr	r2, [pc, #164]	; (8002a18 <prvAddNewTaskToReadyList+0xb8>)
 8002974:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002976:	4b29      	ldr	r3, [pc, #164]	; (8002a1c <prvAddNewTaskToReadyList+0xbc>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d109      	bne.n	8002992 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800297e:	4a27      	ldr	r2, [pc, #156]	; (8002a1c <prvAddNewTaskToReadyList+0xbc>)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002984:	4b24      	ldr	r3, [pc, #144]	; (8002a18 <prvAddNewTaskToReadyList+0xb8>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d110      	bne.n	80029ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800298c:	f000 fabc 	bl	8002f08 <prvInitialiseTaskLists>
 8002990:	e00d      	b.n	80029ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002992:	4b23      	ldr	r3, [pc, #140]	; (8002a20 <prvAddNewTaskToReadyList+0xc0>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d109      	bne.n	80029ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800299a:	4b20      	ldr	r3, [pc, #128]	; (8002a1c <prvAddNewTaskToReadyList+0xbc>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d802      	bhi.n	80029ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80029a8:	4a1c      	ldr	r2, [pc, #112]	; (8002a1c <prvAddNewTaskToReadyList+0xbc>)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80029ae:	4b1d      	ldr	r3, [pc, #116]	; (8002a24 <prvAddNewTaskToReadyList+0xc4>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	3301      	adds	r3, #1
 80029b4:	4a1b      	ldr	r2, [pc, #108]	; (8002a24 <prvAddNewTaskToReadyList+0xc4>)
 80029b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029bc:	2201      	movs	r2, #1
 80029be:	409a      	lsls	r2, r3
 80029c0:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <prvAddNewTaskToReadyList+0xc8>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	4a18      	ldr	r2, [pc, #96]	; (8002a28 <prvAddNewTaskToReadyList+0xc8>)
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ce:	4613      	mov	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4a15      	ldr	r2, [pc, #84]	; (8002a2c <prvAddNewTaskToReadyList+0xcc>)
 80029d8:	441a      	add	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	3304      	adds	r3, #4
 80029de:	4619      	mov	r1, r3
 80029e0:	4610      	mov	r0, r2
 80029e2:	f7ff fe1a 	bl	800261a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80029e6:	f000 fd27 	bl	8003438 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80029ea:	4b0d      	ldr	r3, [pc, #52]	; (8002a20 <prvAddNewTaskToReadyList+0xc0>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00e      	beq.n	8002a10 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80029f2:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <prvAddNewTaskToReadyList+0xbc>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d207      	bcs.n	8002a10 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002a00:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <prvAddNewTaskToReadyList+0xd0>)
 8002a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	f3bf 8f4f 	dsb	sy
 8002a0c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a10:	bf00      	nop
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	20000218 	.word	0x20000218
 8002a1c:	20000118 	.word	0x20000118
 8002a20:	20000224 	.word	0x20000224
 8002a24:	20000234 	.word	0x20000234
 8002a28:	20000220 	.word	0x20000220
 8002a2c:	2000011c 	.word	0x2000011c
 8002a30:	e000ed04 	.word	0xe000ed04

08002a34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d016      	beq.n	8002a74 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002a46:	4b13      	ldr	r3, [pc, #76]	; (8002a94 <vTaskDelay+0x60>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d009      	beq.n	8002a62 <vTaskDelay+0x2e>
 8002a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a52:	f383 8811 	msr	BASEPRI, r3
 8002a56:	f3bf 8f6f 	isb	sy
 8002a5a:	f3bf 8f4f 	dsb	sy
 8002a5e:	60bb      	str	r3, [r7, #8]
 8002a60:	e7fe      	b.n	8002a60 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002a62:	f000 f879 	bl	8002b58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002a66:	2100      	movs	r1, #0
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 fb2b 	bl	80030c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002a6e:	f000 f881 	bl	8002b74 <xTaskResumeAll>
 8002a72:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d107      	bne.n	8002a8a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002a7a:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <vTaskDelay+0x64>)
 8002a7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	f3bf 8f4f 	dsb	sy
 8002a86:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002a8a:	bf00      	nop
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20000240 	.word	0x20000240
 8002a98:	e000ed04 	.word	0xe000ed04

08002a9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08a      	sub	sp, #40	; 0x28
 8002aa0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002aaa:	463a      	mov	r2, r7
 8002aac:	1d39      	adds	r1, r7, #4
 8002aae:	f107 0308 	add.w	r3, r7, #8
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f001 ffec 	bl	8004a90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002ab8:	6839      	ldr	r1, [r7, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	9202      	str	r2, [sp, #8]
 8002ac0:	9301      	str	r3, [sp, #4]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	460a      	mov	r2, r1
 8002aca:	491d      	ldr	r1, [pc, #116]	; (8002b40 <vTaskStartScheduler+0xa4>)
 8002acc:	481d      	ldr	r0, [pc, #116]	; (8002b44 <vTaskStartScheduler+0xa8>)
 8002ace:	f7ff fe2b 	bl	8002728 <xTaskCreateStatic>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	4b1c      	ldr	r3, [pc, #112]	; (8002b48 <vTaskStartScheduler+0xac>)
 8002ad6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002ad8:	4b1b      	ldr	r3, [pc, #108]	; (8002b48 <vTaskStartScheduler+0xac>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d002      	beq.n	8002ae6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	617b      	str	r3, [r7, #20]
 8002ae4:	e001      	b.n	8002aea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d115      	bne.n	8002b1c <vTaskStartScheduler+0x80>
 8002af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af4:	f383 8811 	msr	BASEPRI, r3
 8002af8:	f3bf 8f6f 	isb	sy
 8002afc:	f3bf 8f4f 	dsb	sy
 8002b00:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002b02:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <vTaskStartScheduler+0xb0>)
 8002b04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b08:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002b0a:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <vTaskStartScheduler+0xb4>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002b10:	4b10      	ldr	r3, [pc, #64]	; (8002b54 <vTaskStartScheduler+0xb8>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002b16:	f000 fbc3 	bl	80032a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002b1a:	e00d      	b.n	8002b38 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b22:	d109      	bne.n	8002b38 <vTaskStartScheduler+0x9c>
 8002b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b28:	f383 8811 	msr	BASEPRI, r3
 8002b2c:	f3bf 8f6f 	isb	sy
 8002b30:	f3bf 8f4f 	dsb	sy
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	e7fe      	b.n	8002b36 <vTaskStartScheduler+0x9a>
}
 8002b38:	bf00      	nop
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	080062cc 	.word	0x080062cc
 8002b44:	08002ed9 	.word	0x08002ed9
 8002b48:	2000023c 	.word	0x2000023c
 8002b4c:	20000238 	.word	0x20000238
 8002b50:	20000224 	.word	0x20000224
 8002b54:	2000021c 	.word	0x2000021c

08002b58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002b5c:	4b04      	ldr	r3, [pc, #16]	; (8002b70 <vTaskSuspendAll+0x18>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	3301      	adds	r3, #1
 8002b62:	4a03      	ldr	r2, [pc, #12]	; (8002b70 <vTaskSuspendAll+0x18>)
 8002b64:	6013      	str	r3, [r2, #0]
}
 8002b66:	bf00      	nop
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	20000240 	.word	0x20000240

08002b74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002b82:	4b41      	ldr	r3, [pc, #260]	; (8002c88 <xTaskResumeAll+0x114>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d109      	bne.n	8002b9e <xTaskResumeAll+0x2a>
 8002b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8e:	f383 8811 	msr	BASEPRI, r3
 8002b92:	f3bf 8f6f 	isb	sy
 8002b96:	f3bf 8f4f 	dsb	sy
 8002b9a:	603b      	str	r3, [r7, #0]
 8002b9c:	e7fe      	b.n	8002b9c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002b9e:	f000 fc1d 	bl	80033dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002ba2:	4b39      	ldr	r3, [pc, #228]	; (8002c88 <xTaskResumeAll+0x114>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	4a37      	ldr	r2, [pc, #220]	; (8002c88 <xTaskResumeAll+0x114>)
 8002baa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bac:	4b36      	ldr	r3, [pc, #216]	; (8002c88 <xTaskResumeAll+0x114>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d161      	bne.n	8002c78 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002bb4:	4b35      	ldr	r3, [pc, #212]	; (8002c8c <xTaskResumeAll+0x118>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d05d      	beq.n	8002c78 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bbc:	e02e      	b.n	8002c1c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002bbe:	4b34      	ldr	r3, [pc, #208]	; (8002c90 <xTaskResumeAll+0x11c>)
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	3318      	adds	r3, #24
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff fd82 	bl	80026d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff fd7d 	bl	80026d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	2201      	movs	r2, #1
 8002be0:	409a      	lsls	r2, r3
 8002be2:	4b2c      	ldr	r3, [pc, #176]	; (8002c94 <xTaskResumeAll+0x120>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	4a2a      	ldr	r2, [pc, #168]	; (8002c94 <xTaskResumeAll+0x120>)
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4a27      	ldr	r2, [pc, #156]	; (8002c98 <xTaskResumeAll+0x124>)
 8002bfa:	441a      	add	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	3304      	adds	r3, #4
 8002c00:	4619      	mov	r1, r3
 8002c02:	4610      	mov	r0, r2
 8002c04:	f7ff fd09 	bl	800261a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c0c:	4b23      	ldr	r3, [pc, #140]	; (8002c9c <xTaskResumeAll+0x128>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d302      	bcc.n	8002c1c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8002c16:	4b22      	ldr	r3, [pc, #136]	; (8002ca0 <xTaskResumeAll+0x12c>)
 8002c18:	2201      	movs	r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c1c:	4b1c      	ldr	r3, [pc, #112]	; (8002c90 <xTaskResumeAll+0x11c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1cc      	bne.n	8002bbe <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002c2a:	f000 fa07 	bl	800303c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002c2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ca4 <xTaskResumeAll+0x130>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d010      	beq.n	8002c5c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002c3a:	f000 f837 	bl	8002cac <xTaskIncrementTick>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d002      	beq.n	8002c4a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002c44:	4b16      	ldr	r3, [pc, #88]	; (8002ca0 <xTaskResumeAll+0x12c>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f1      	bne.n	8002c3a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8002c56:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <xTaskResumeAll+0x130>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002c5c:	4b10      	ldr	r3, [pc, #64]	; (8002ca0 <xTaskResumeAll+0x12c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d009      	beq.n	8002c78 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002c64:	2301      	movs	r3, #1
 8002c66:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002c68:	4b0f      	ldr	r3, [pc, #60]	; (8002ca8 <xTaskResumeAll+0x134>)
 8002c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	f3bf 8f4f 	dsb	sy
 8002c74:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002c78:	f000 fbde 	bl	8003438 <vPortExitCritical>

	return xAlreadyYielded;
 8002c7c:	68bb      	ldr	r3, [r7, #8]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20000240 	.word	0x20000240
 8002c8c:	20000218 	.word	0x20000218
 8002c90:	200001d8 	.word	0x200001d8
 8002c94:	20000220 	.word	0x20000220
 8002c98:	2000011c 	.word	0x2000011c
 8002c9c:	20000118 	.word	0x20000118
 8002ca0:	2000022c 	.word	0x2000022c
 8002ca4:	20000228 	.word	0x20000228
 8002ca8:	e000ed04 	.word	0xe000ed04

08002cac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cb6:	4b50      	ldr	r3, [pc, #320]	; (8002df8 <xTaskIncrementTick+0x14c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f040 808c 	bne.w	8002dd8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002cc0:	4b4e      	ldr	r3, [pc, #312]	; (8002dfc <xTaskIncrementTick+0x150>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002cc8:	4a4c      	ldr	r2, [pc, #304]	; (8002dfc <xTaskIncrementTick+0x150>)
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d11f      	bne.n	8002d14 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002cd4:	4b4a      	ldr	r3, [pc, #296]	; (8002e00 <xTaskIncrementTick+0x154>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d009      	beq.n	8002cf2 <xTaskIncrementTick+0x46>
 8002cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce2:	f383 8811 	msr	BASEPRI, r3
 8002ce6:	f3bf 8f6f 	isb	sy
 8002cea:	f3bf 8f4f 	dsb	sy
 8002cee:	603b      	str	r3, [r7, #0]
 8002cf0:	e7fe      	b.n	8002cf0 <xTaskIncrementTick+0x44>
 8002cf2:	4b43      	ldr	r3, [pc, #268]	; (8002e00 <xTaskIncrementTick+0x154>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	4b42      	ldr	r3, [pc, #264]	; (8002e04 <xTaskIncrementTick+0x158>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a40      	ldr	r2, [pc, #256]	; (8002e00 <xTaskIncrementTick+0x154>)
 8002cfe:	6013      	str	r3, [r2, #0]
 8002d00:	4a40      	ldr	r2, [pc, #256]	; (8002e04 <xTaskIncrementTick+0x158>)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	4b40      	ldr	r3, [pc, #256]	; (8002e08 <xTaskIncrementTick+0x15c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	4a3e      	ldr	r2, [pc, #248]	; (8002e08 <xTaskIncrementTick+0x15c>)
 8002d0e:	6013      	str	r3, [r2, #0]
 8002d10:	f000 f994 	bl	800303c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002d14:	4b3d      	ldr	r3, [pc, #244]	; (8002e0c <xTaskIncrementTick+0x160>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d34d      	bcc.n	8002dba <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d1e:	4b38      	ldr	r3, [pc, #224]	; (8002e00 <xTaskIncrementTick+0x154>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <xTaskIncrementTick+0x80>
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e000      	b.n	8002d2e <xTaskIncrementTick+0x82>
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d004      	beq.n	8002d3c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d32:	4b36      	ldr	r3, [pc, #216]	; (8002e0c <xTaskIncrementTick+0x160>)
 8002d34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d38:	601a      	str	r2, [r3, #0]
					break;
 8002d3a:	e03e      	b.n	8002dba <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002d3c:	4b30      	ldr	r3, [pc, #192]	; (8002e00 <xTaskIncrementTick+0x154>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d203      	bcs.n	8002d5c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002d54:	4a2d      	ldr	r2, [pc, #180]	; (8002e0c <xTaskIncrementTick+0x160>)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6013      	str	r3, [r2, #0]
						break;
 8002d5a:	e02e      	b.n	8002dba <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	3304      	adds	r3, #4
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff fcb7 	bl	80026d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d004      	beq.n	8002d78 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	3318      	adds	r3, #24
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff fcae 	bl	80026d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	409a      	lsls	r2, r3
 8002d80:	4b23      	ldr	r3, [pc, #140]	; (8002e10 <xTaskIncrementTick+0x164>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	4a22      	ldr	r2, [pc, #136]	; (8002e10 <xTaskIncrementTick+0x164>)
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d8e:	4613      	mov	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4a1f      	ldr	r2, [pc, #124]	; (8002e14 <xTaskIncrementTick+0x168>)
 8002d98:	441a      	add	r2, r3
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4610      	mov	r0, r2
 8002da2:	f7ff fc3a 	bl	800261a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002daa:	4b1b      	ldr	r3, [pc, #108]	; (8002e18 <xTaskIncrementTick+0x16c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d3b4      	bcc.n	8002d1e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002db4:	2301      	movs	r3, #1
 8002db6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002db8:	e7b1      	b.n	8002d1e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002dba:	4b17      	ldr	r3, [pc, #92]	; (8002e18 <xTaskIncrementTick+0x16c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc0:	4914      	ldr	r1, [pc, #80]	; (8002e14 <xTaskIncrementTick+0x168>)
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	440b      	add	r3, r1
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d907      	bls.n	8002de2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	617b      	str	r3, [r7, #20]
 8002dd6:	e004      	b.n	8002de2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002dd8:	4b10      	ldr	r3, [pc, #64]	; (8002e1c <xTaskIncrementTick+0x170>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	4a0f      	ldr	r2, [pc, #60]	; (8002e1c <xTaskIncrementTick+0x170>)
 8002de0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002de2:	4b0f      	ldr	r3, [pc, #60]	; (8002e20 <xTaskIncrementTick+0x174>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8002dea:	2301      	movs	r3, #1
 8002dec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002dee:	697b      	ldr	r3, [r7, #20]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	20000240 	.word	0x20000240
 8002dfc:	2000021c 	.word	0x2000021c
 8002e00:	200001d0 	.word	0x200001d0
 8002e04:	200001d4 	.word	0x200001d4
 8002e08:	20000230 	.word	0x20000230
 8002e0c:	20000238 	.word	0x20000238
 8002e10:	20000220 	.word	0x20000220
 8002e14:	2000011c 	.word	0x2000011c
 8002e18:	20000118 	.word	0x20000118
 8002e1c:	20000228 	.word	0x20000228
 8002e20:	2000022c 	.word	0x2000022c

08002e24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e2a:	4b26      	ldr	r3, [pc, #152]	; (8002ec4 <vTaskSwitchContext+0xa0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002e32:	4b25      	ldr	r3, [pc, #148]	; (8002ec8 <vTaskSwitchContext+0xa4>)
 8002e34:	2201      	movs	r2, #1
 8002e36:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002e38:	e03e      	b.n	8002eb8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8002e3a:	4b23      	ldr	r3, [pc, #140]	; (8002ec8 <vTaskSwitchContext+0xa4>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002e40:	4b22      	ldr	r3, [pc, #136]	; (8002ecc <vTaskSwitchContext+0xa8>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	fab3 f383 	clz	r3, r3
 8002e4c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002e4e:	7afb      	ldrb	r3, [r7, #11]
 8002e50:	f1c3 031f 	rsb	r3, r3, #31
 8002e54:	617b      	str	r3, [r7, #20]
 8002e56:	491e      	ldr	r1, [pc, #120]	; (8002ed0 <vTaskSwitchContext+0xac>)
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	440b      	add	r3, r1
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d109      	bne.n	8002e7e <vTaskSwitchContext+0x5a>
	__asm volatile
 8002e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6e:	f383 8811 	msr	BASEPRI, r3
 8002e72:	f3bf 8f6f 	isb	sy
 8002e76:	f3bf 8f4f 	dsb	sy
 8002e7a:	607b      	str	r3, [r7, #4]
 8002e7c:	e7fe      	b.n	8002e7c <vTaskSwitchContext+0x58>
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	4613      	mov	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4a11      	ldr	r2, [pc, #68]	; (8002ed0 <vTaskSwitchContext+0xac>)
 8002e8a:	4413      	add	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	605a      	str	r2, [r3, #4]
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	3308      	adds	r3, #8
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d104      	bne.n	8002eae <vTaskSwitchContext+0x8a>
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	605a      	str	r2, [r3, #4]
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	4a07      	ldr	r2, [pc, #28]	; (8002ed4 <vTaskSwitchContext+0xb0>)
 8002eb6:	6013      	str	r3, [r2, #0]
}
 8002eb8:	bf00      	nop
 8002eba:	371c      	adds	r7, #28
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	20000240 	.word	0x20000240
 8002ec8:	2000022c 	.word	0x2000022c
 8002ecc:	20000220 	.word	0x20000220
 8002ed0:	2000011c 	.word	0x2000011c
 8002ed4:	20000118 	.word	0x20000118

08002ed8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002ee0:	f000 f852 	bl	8002f88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002ee4:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <prvIdleTask+0x28>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d9f9      	bls.n	8002ee0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002eec:	4b05      	ldr	r3, [pc, #20]	; (8002f04 <prvIdleTask+0x2c>)
 8002eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	f3bf 8f4f 	dsb	sy
 8002ef8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002efc:	e7f0      	b.n	8002ee0 <prvIdleTask+0x8>
 8002efe:	bf00      	nop
 8002f00:	2000011c 	.word	0x2000011c
 8002f04:	e000ed04 	.word	0xe000ed04

08002f08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f0e:	2300      	movs	r3, #0
 8002f10:	607b      	str	r3, [r7, #4]
 8002f12:	e00c      	b.n	8002f2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	4613      	mov	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4a12      	ldr	r2, [pc, #72]	; (8002f68 <prvInitialiseTaskLists+0x60>)
 8002f20:	4413      	add	r3, r2
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff fb4c 	bl	80025c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	607b      	str	r3, [r7, #4]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b06      	cmp	r3, #6
 8002f32:	d9ef      	bls.n	8002f14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002f34:	480d      	ldr	r0, [pc, #52]	; (8002f6c <prvInitialiseTaskLists+0x64>)
 8002f36:	f7ff fb43 	bl	80025c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002f3a:	480d      	ldr	r0, [pc, #52]	; (8002f70 <prvInitialiseTaskLists+0x68>)
 8002f3c:	f7ff fb40 	bl	80025c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002f40:	480c      	ldr	r0, [pc, #48]	; (8002f74 <prvInitialiseTaskLists+0x6c>)
 8002f42:	f7ff fb3d 	bl	80025c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002f46:	480c      	ldr	r0, [pc, #48]	; (8002f78 <prvInitialiseTaskLists+0x70>)
 8002f48:	f7ff fb3a 	bl	80025c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002f4c:	480b      	ldr	r0, [pc, #44]	; (8002f7c <prvInitialiseTaskLists+0x74>)
 8002f4e:	f7ff fb37 	bl	80025c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002f52:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <prvInitialiseTaskLists+0x78>)
 8002f54:	4a05      	ldr	r2, [pc, #20]	; (8002f6c <prvInitialiseTaskLists+0x64>)
 8002f56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002f58:	4b0a      	ldr	r3, [pc, #40]	; (8002f84 <prvInitialiseTaskLists+0x7c>)
 8002f5a:	4a05      	ldr	r2, [pc, #20]	; (8002f70 <prvInitialiseTaskLists+0x68>)
 8002f5c:	601a      	str	r2, [r3, #0]
}
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	2000011c 	.word	0x2000011c
 8002f6c:	200001a8 	.word	0x200001a8
 8002f70:	200001bc 	.word	0x200001bc
 8002f74:	200001d8 	.word	0x200001d8
 8002f78:	200001ec 	.word	0x200001ec
 8002f7c:	20000204 	.word	0x20000204
 8002f80:	200001d0 	.word	0x200001d0
 8002f84:	200001d4 	.word	0x200001d4

08002f88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f8e:	e019      	b.n	8002fc4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002f90:	f000 fa24 	bl	80033dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002f94:	4b0f      	ldr	r3, [pc, #60]	; (8002fd4 <prvCheckTasksWaitingTermination+0x4c>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff fb97 	bl	80026d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002fa6:	4b0c      	ldr	r3, [pc, #48]	; (8002fd8 <prvCheckTasksWaitingTermination+0x50>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	4a0a      	ldr	r2, [pc, #40]	; (8002fd8 <prvCheckTasksWaitingTermination+0x50>)
 8002fae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002fb0:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <prvCheckTasksWaitingTermination+0x54>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	4a09      	ldr	r2, [pc, #36]	; (8002fdc <prvCheckTasksWaitingTermination+0x54>)
 8002fb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002fba:	f000 fa3d 	bl	8003438 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f80e 	bl	8002fe0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002fc4:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <prvCheckTasksWaitingTermination+0x54>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1e1      	bne.n	8002f90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002fcc:	bf00      	nop
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	200001ec 	.word	0x200001ec
 8002fd8:	20000218 	.word	0x20000218
 8002fdc:	20000200 	.word	0x20000200

08002fe0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d108      	bne.n	8003004 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 fb8e 	bl	8003718 <vPortFree>
				vPortFree( pxTCB );
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 fb8b 	bl	8003718 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003002:	e017      	b.n	8003034 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800300a:	2b01      	cmp	r3, #1
 800300c:	d103      	bne.n	8003016 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 fb82 	bl	8003718 <vPortFree>
	}
 8003014:	e00e      	b.n	8003034 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800301c:	2b02      	cmp	r3, #2
 800301e:	d009      	beq.n	8003034 <prvDeleteTCB+0x54>
 8003020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003024:	f383 8811 	msr	BASEPRI, r3
 8003028:	f3bf 8f6f 	isb	sy
 800302c:	f3bf 8f4f 	dsb	sy
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	e7fe      	b.n	8003032 <prvDeleteTCB+0x52>
	}
 8003034:	bf00      	nop
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003042:	4b0f      	ldr	r3, [pc, #60]	; (8003080 <prvResetNextTaskUnblockTime+0x44>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <prvResetNextTaskUnblockTime+0x14>
 800304c:	2301      	movs	r3, #1
 800304e:	e000      	b.n	8003052 <prvResetNextTaskUnblockTime+0x16>
 8003050:	2300      	movs	r3, #0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d004      	beq.n	8003060 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003056:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <prvResetNextTaskUnblockTime+0x48>)
 8003058:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800305c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800305e:	e008      	b.n	8003072 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003060:	4b07      	ldr	r3, [pc, #28]	; (8003080 <prvResetNextTaskUnblockTime+0x44>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	4a05      	ldr	r2, [pc, #20]	; (8003084 <prvResetNextTaskUnblockTime+0x48>)
 8003070:	6013      	str	r3, [r2, #0]
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	200001d0 	.word	0x200001d0
 8003084:	20000238 	.word	0x20000238

08003088 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800308e:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <xTaskGetSchedulerState+0x34>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d102      	bne.n	800309c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003096:	2301      	movs	r3, #1
 8003098:	607b      	str	r3, [r7, #4]
 800309a:	e008      	b.n	80030ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800309c:	4b08      	ldr	r3, [pc, #32]	; (80030c0 <xTaskGetSchedulerState+0x38>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d102      	bne.n	80030aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80030a4:	2302      	movs	r3, #2
 80030a6:	607b      	str	r3, [r7, #4]
 80030a8:	e001      	b.n	80030ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80030aa:	2300      	movs	r3, #0
 80030ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80030ae:	687b      	ldr	r3, [r7, #4]
	}
 80030b0:	4618      	mov	r0, r3
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	20000224 	.word	0x20000224
 80030c0:	20000240 	.word	0x20000240

080030c4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80030ce:	4b29      	ldr	r3, [pc, #164]	; (8003174 <prvAddCurrentTaskToDelayedList+0xb0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80030d4:	4b28      	ldr	r3, [pc, #160]	; (8003178 <prvAddCurrentTaskToDelayedList+0xb4>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	3304      	adds	r3, #4
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff fafa 	bl	80026d4 <uxListRemove>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10b      	bne.n	80030fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80030e6:	4b24      	ldr	r3, [pc, #144]	; (8003178 <prvAddCurrentTaskToDelayedList+0xb4>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ec:	2201      	movs	r2, #1
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	43da      	mvns	r2, r3
 80030f4:	4b21      	ldr	r3, [pc, #132]	; (800317c <prvAddCurrentTaskToDelayedList+0xb8>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4013      	ands	r3, r2
 80030fa:	4a20      	ldr	r2, [pc, #128]	; (800317c <prvAddCurrentTaskToDelayedList+0xb8>)
 80030fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003104:	d10a      	bne.n	800311c <prvAddCurrentTaskToDelayedList+0x58>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d007      	beq.n	800311c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800310c:	4b1a      	ldr	r3, [pc, #104]	; (8003178 <prvAddCurrentTaskToDelayedList+0xb4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	3304      	adds	r3, #4
 8003112:	4619      	mov	r1, r3
 8003114:	481a      	ldr	r0, [pc, #104]	; (8003180 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003116:	f7ff fa80 	bl	800261a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800311a:	e026      	b.n	800316a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4413      	add	r3, r2
 8003122:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003124:	4b14      	ldr	r3, [pc, #80]	; (8003178 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	429a      	cmp	r2, r3
 8003132:	d209      	bcs.n	8003148 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003134:	4b13      	ldr	r3, [pc, #76]	; (8003184 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	4b0f      	ldr	r3, [pc, #60]	; (8003178 <prvAddCurrentTaskToDelayedList+0xb4>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	3304      	adds	r3, #4
 800313e:	4619      	mov	r1, r3
 8003140:	4610      	mov	r0, r2
 8003142:	f7ff fa8e 	bl	8002662 <vListInsert>
}
 8003146:	e010      	b.n	800316a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003148:	4b0f      	ldr	r3, [pc, #60]	; (8003188 <prvAddCurrentTaskToDelayedList+0xc4>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <prvAddCurrentTaskToDelayedList+0xb4>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	3304      	adds	r3, #4
 8003152:	4619      	mov	r1, r3
 8003154:	4610      	mov	r0, r2
 8003156:	f7ff fa84 	bl	8002662 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800315a:	4b0c      	ldr	r3, [pc, #48]	; (800318c <prvAddCurrentTaskToDelayedList+0xc8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	429a      	cmp	r2, r3
 8003162:	d202      	bcs.n	800316a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003164:	4a09      	ldr	r2, [pc, #36]	; (800318c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	6013      	str	r3, [r2, #0]
}
 800316a:	bf00      	nop
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	2000021c 	.word	0x2000021c
 8003178:	20000118 	.word	0x20000118
 800317c:	20000220 	.word	0x20000220
 8003180:	20000204 	.word	0x20000204
 8003184:	200001d4 	.word	0x200001d4
 8003188:	200001d0 	.word	0x200001d0
 800318c:	20000238 	.word	0x20000238

08003190 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	3b04      	subs	r3, #4
 80031a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	3b04      	subs	r3, #4
 80031ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f023 0201 	bic.w	r2, r3, #1
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	3b04      	subs	r3, #4
 80031be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80031c0:	4a0c      	ldr	r2, [pc, #48]	; (80031f4 <pxPortInitialiseStack+0x64>)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	3b14      	subs	r3, #20
 80031ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	3b04      	subs	r3, #4
 80031d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f06f 0202 	mvn.w	r2, #2
 80031de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	3b20      	subs	r3, #32
 80031e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80031e6:	68fb      	ldr	r3, [r7, #12]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	080031f9 	.word	0x080031f9

080031f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80031fe:	2300      	movs	r3, #0
 8003200:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003202:	4b11      	ldr	r3, [pc, #68]	; (8003248 <prvTaskExitError+0x50>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800320a:	d009      	beq.n	8003220 <prvTaskExitError+0x28>
 800320c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003210:	f383 8811 	msr	BASEPRI, r3
 8003214:	f3bf 8f6f 	isb	sy
 8003218:	f3bf 8f4f 	dsb	sy
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	e7fe      	b.n	800321e <prvTaskExitError+0x26>
 8003220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003224:	f383 8811 	msr	BASEPRI, r3
 8003228:	f3bf 8f6f 	isb	sy
 800322c:	f3bf 8f4f 	dsb	sy
 8003230:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003232:	bf00      	nop
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0fc      	beq.n	8003234 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800323a:	bf00      	nop
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	20000008 	.word	0x20000008
 800324c:	00000000 	.word	0x00000000

08003250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003250:	4b07      	ldr	r3, [pc, #28]	; (8003270 <pxCurrentTCBConst2>)
 8003252:	6819      	ldr	r1, [r3, #0]
 8003254:	6808      	ldr	r0, [r1, #0]
 8003256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800325a:	f380 8809 	msr	PSP, r0
 800325e:	f3bf 8f6f 	isb	sy
 8003262:	f04f 0000 	mov.w	r0, #0
 8003266:	f380 8811 	msr	BASEPRI, r0
 800326a:	4770      	bx	lr
 800326c:	f3af 8000 	nop.w

08003270 <pxCurrentTCBConst2>:
 8003270:	20000118 	.word	0x20000118
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003274:	bf00      	nop
 8003276:	bf00      	nop

08003278 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003278:	4808      	ldr	r0, [pc, #32]	; (800329c <prvPortStartFirstTask+0x24>)
 800327a:	6800      	ldr	r0, [r0, #0]
 800327c:	6800      	ldr	r0, [r0, #0]
 800327e:	f380 8808 	msr	MSP, r0
 8003282:	f04f 0000 	mov.w	r0, #0
 8003286:	f380 8814 	msr	CONTROL, r0
 800328a:	b662      	cpsie	i
 800328c:	b661      	cpsie	f
 800328e:	f3bf 8f4f 	dsb	sy
 8003292:	f3bf 8f6f 	isb	sy
 8003296:	df00      	svc	0
 8003298:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800329a:	bf00      	nop
 800329c:	e000ed08 	.word	0xe000ed08

080032a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80032a6:	4b44      	ldr	r3, [pc, #272]	; (80033b8 <xPortStartScheduler+0x118>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a44      	ldr	r2, [pc, #272]	; (80033bc <xPortStartScheduler+0x11c>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d109      	bne.n	80032c4 <xPortStartScheduler+0x24>
 80032b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b4:	f383 8811 	msr	BASEPRI, r3
 80032b8:	f3bf 8f6f 	isb	sy
 80032bc:	f3bf 8f4f 	dsb	sy
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	e7fe      	b.n	80032c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80032c4:	4b3c      	ldr	r3, [pc, #240]	; (80033b8 <xPortStartScheduler+0x118>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a3d      	ldr	r2, [pc, #244]	; (80033c0 <xPortStartScheduler+0x120>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d109      	bne.n	80032e2 <xPortStartScheduler+0x42>
 80032ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d2:	f383 8811 	msr	BASEPRI, r3
 80032d6:	f3bf 8f6f 	isb	sy
 80032da:	f3bf 8f4f 	dsb	sy
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	e7fe      	b.n	80032e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80032e2:	4b38      	ldr	r3, [pc, #224]	; (80033c4 <xPortStartScheduler+0x124>)
 80032e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	22ff      	movs	r2, #255	; 0xff
 80032f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80032fc:	78fb      	ldrb	r3, [r7, #3]
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003304:	b2da      	uxtb	r2, r3
 8003306:	4b30      	ldr	r3, [pc, #192]	; (80033c8 <xPortStartScheduler+0x128>)
 8003308:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800330a:	4b30      	ldr	r3, [pc, #192]	; (80033cc <xPortStartScheduler+0x12c>)
 800330c:	2207      	movs	r2, #7
 800330e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003310:	e009      	b.n	8003326 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003312:	4b2e      	ldr	r3, [pc, #184]	; (80033cc <xPortStartScheduler+0x12c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	3b01      	subs	r3, #1
 8003318:	4a2c      	ldr	r2, [pc, #176]	; (80033cc <xPortStartScheduler+0x12c>)
 800331a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800331c:	78fb      	ldrb	r3, [r7, #3]
 800331e:	b2db      	uxtb	r3, r3
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	b2db      	uxtb	r3, r3
 8003324:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003326:	78fb      	ldrb	r3, [r7, #3]
 8003328:	b2db      	uxtb	r3, r3
 800332a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800332e:	2b80      	cmp	r3, #128	; 0x80
 8003330:	d0ef      	beq.n	8003312 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003332:	4b26      	ldr	r3, [pc, #152]	; (80033cc <xPortStartScheduler+0x12c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f1c3 0307 	rsb	r3, r3, #7
 800333a:	2b04      	cmp	r3, #4
 800333c:	d009      	beq.n	8003352 <xPortStartScheduler+0xb2>
 800333e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003342:	f383 8811 	msr	BASEPRI, r3
 8003346:	f3bf 8f6f 	isb	sy
 800334a:	f3bf 8f4f 	dsb	sy
 800334e:	60bb      	str	r3, [r7, #8]
 8003350:	e7fe      	b.n	8003350 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003352:	4b1e      	ldr	r3, [pc, #120]	; (80033cc <xPortStartScheduler+0x12c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	021b      	lsls	r3, r3, #8
 8003358:	4a1c      	ldr	r2, [pc, #112]	; (80033cc <xPortStartScheduler+0x12c>)
 800335a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800335c:	4b1b      	ldr	r3, [pc, #108]	; (80033cc <xPortStartScheduler+0x12c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003364:	4a19      	ldr	r2, [pc, #100]	; (80033cc <xPortStartScheduler+0x12c>)
 8003366:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	b2da      	uxtb	r2, r3
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003370:	4b17      	ldr	r3, [pc, #92]	; (80033d0 <xPortStartScheduler+0x130>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a16      	ldr	r2, [pc, #88]	; (80033d0 <xPortStartScheduler+0x130>)
 8003376:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800337a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800337c:	4b14      	ldr	r3, [pc, #80]	; (80033d0 <xPortStartScheduler+0x130>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a13      	ldr	r2, [pc, #76]	; (80033d0 <xPortStartScheduler+0x130>)
 8003382:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003386:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003388:	f000 f8d6 	bl	8003538 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800338c:	4b11      	ldr	r3, [pc, #68]	; (80033d4 <xPortStartScheduler+0x134>)
 800338e:	2200      	movs	r2, #0
 8003390:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003392:	f000 f8f5 	bl	8003580 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003396:	4b10      	ldr	r3, [pc, #64]	; (80033d8 <xPortStartScheduler+0x138>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a0f      	ldr	r2, [pc, #60]	; (80033d8 <xPortStartScheduler+0x138>)
 800339c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80033a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80033a2:	f7ff ff69 	bl	8003278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80033a6:	f7ff fd3d 	bl	8002e24 <vTaskSwitchContext>
	prvTaskExitError();
 80033aa:	f7ff ff25 	bl	80031f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3718      	adds	r7, #24
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	e000ed00 	.word	0xe000ed00
 80033bc:	410fc271 	.word	0x410fc271
 80033c0:	410fc270 	.word	0x410fc270
 80033c4:	e000e400 	.word	0xe000e400
 80033c8:	20000244 	.word	0x20000244
 80033cc:	20000248 	.word	0x20000248
 80033d0:	e000ed20 	.word	0xe000ed20
 80033d4:	20000008 	.word	0x20000008
 80033d8:	e000ef34 	.word	0xe000ef34

080033dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e6:	f383 8811 	msr	BASEPRI, r3
 80033ea:	f3bf 8f6f 	isb	sy
 80033ee:	f3bf 8f4f 	dsb	sy
 80033f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80033f4:	4b0e      	ldr	r3, [pc, #56]	; (8003430 <vPortEnterCritical+0x54>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3301      	adds	r3, #1
 80033fa:	4a0d      	ldr	r2, [pc, #52]	; (8003430 <vPortEnterCritical+0x54>)
 80033fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80033fe:	4b0c      	ldr	r3, [pc, #48]	; (8003430 <vPortEnterCritical+0x54>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d10e      	bne.n	8003424 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003406:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <vPortEnterCritical+0x58>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d009      	beq.n	8003424 <vPortEnterCritical+0x48>
 8003410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003414:	f383 8811 	msr	BASEPRI, r3
 8003418:	f3bf 8f6f 	isb	sy
 800341c:	f3bf 8f4f 	dsb	sy
 8003420:	603b      	str	r3, [r7, #0]
 8003422:	e7fe      	b.n	8003422 <vPortEnterCritical+0x46>
	}
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	20000008 	.word	0x20000008
 8003434:	e000ed04 	.word	0xe000ed04

08003438 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800343e:	4b11      	ldr	r3, [pc, #68]	; (8003484 <vPortExitCritical+0x4c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d109      	bne.n	800345a <vPortExitCritical+0x22>
 8003446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344a:	f383 8811 	msr	BASEPRI, r3
 800344e:	f3bf 8f6f 	isb	sy
 8003452:	f3bf 8f4f 	dsb	sy
 8003456:	607b      	str	r3, [r7, #4]
 8003458:	e7fe      	b.n	8003458 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800345a:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <vPortExitCritical+0x4c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	3b01      	subs	r3, #1
 8003460:	4a08      	ldr	r2, [pc, #32]	; (8003484 <vPortExitCritical+0x4c>)
 8003462:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003464:	4b07      	ldr	r3, [pc, #28]	; (8003484 <vPortExitCritical+0x4c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d104      	bne.n	8003476 <vPortExitCritical+0x3e>
 800346c:	2300      	movs	r3, #0
 800346e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	20000008 	.word	0x20000008
	...

08003490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003490:	f3ef 8009 	mrs	r0, PSP
 8003494:	f3bf 8f6f 	isb	sy
 8003498:	4b15      	ldr	r3, [pc, #84]	; (80034f0 <pxCurrentTCBConst>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	f01e 0f10 	tst.w	lr, #16
 80034a0:	bf08      	it	eq
 80034a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80034a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034aa:	6010      	str	r0, [r2, #0]
 80034ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80034b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80034b4:	f380 8811 	msr	BASEPRI, r0
 80034b8:	f3bf 8f4f 	dsb	sy
 80034bc:	f3bf 8f6f 	isb	sy
 80034c0:	f7ff fcb0 	bl	8002e24 <vTaskSwitchContext>
 80034c4:	f04f 0000 	mov.w	r0, #0
 80034c8:	f380 8811 	msr	BASEPRI, r0
 80034cc:	bc09      	pop	{r0, r3}
 80034ce:	6819      	ldr	r1, [r3, #0]
 80034d0:	6808      	ldr	r0, [r1, #0]
 80034d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034d6:	f01e 0f10 	tst.w	lr, #16
 80034da:	bf08      	it	eq
 80034dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80034e0:	f380 8809 	msr	PSP, r0
 80034e4:	f3bf 8f6f 	isb	sy
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	f3af 8000 	nop.w

080034f0 <pxCurrentTCBConst>:
 80034f0:	20000118 	.word	0x20000118
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80034f4:	bf00      	nop
 80034f6:	bf00      	nop

080034f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
	__asm volatile
 80034fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003502:	f383 8811 	msr	BASEPRI, r3
 8003506:	f3bf 8f6f 	isb	sy
 800350a:	f3bf 8f4f 	dsb	sy
 800350e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003510:	f7ff fbcc 	bl	8002cac <xTaskIncrementTick>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800351a:	4b06      	ldr	r3, [pc, #24]	; (8003534 <xPortSysTickHandler+0x3c>)
 800351c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	2300      	movs	r3, #0
 8003524:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800352c:	bf00      	nop
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	e000ed04 	.word	0xe000ed04

08003538 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800353c:	4b0b      	ldr	r3, [pc, #44]	; (800356c <vPortSetupTimerInterrupt+0x34>)
 800353e:	2200      	movs	r2, #0
 8003540:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003542:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <vPortSetupTimerInterrupt+0x38>)
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003548:	4b0a      	ldr	r3, [pc, #40]	; (8003574 <vPortSetupTimerInterrupt+0x3c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a0a      	ldr	r2, [pc, #40]	; (8003578 <vPortSetupTimerInterrupt+0x40>)
 800354e:	fba2 2303 	umull	r2, r3, r2, r3
 8003552:	099b      	lsrs	r3, r3, #6
 8003554:	4a09      	ldr	r2, [pc, #36]	; (800357c <vPortSetupTimerInterrupt+0x44>)
 8003556:	3b01      	subs	r3, #1
 8003558:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800355a:	4b04      	ldr	r3, [pc, #16]	; (800356c <vPortSetupTimerInterrupt+0x34>)
 800355c:	2207      	movs	r2, #7
 800355e:	601a      	str	r2, [r3, #0]
}
 8003560:	bf00      	nop
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	e000e010 	.word	0xe000e010
 8003570:	e000e018 	.word	0xe000e018
 8003574:	20000094 	.word	0x20000094
 8003578:	10624dd3 	.word	0x10624dd3
 800357c:	e000e014 	.word	0xe000e014

08003580 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003580:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003590 <vPortEnableVFP+0x10>
 8003584:	6801      	ldr	r1, [r0, #0]
 8003586:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800358a:	6001      	str	r1, [r0, #0]
 800358c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800358e:	bf00      	nop
 8003590:	e000ed88 	.word	0xe000ed88

08003594 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b08a      	sub	sp, #40	; 0x28
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800359c:	2300      	movs	r3, #0
 800359e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80035a0:	f7ff fada 	bl	8002b58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80035a4:	4b57      	ldr	r3, [pc, #348]	; (8003704 <pvPortMalloc+0x170>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80035ac:	f000 f90c 	bl	80037c8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80035b0:	4b55      	ldr	r3, [pc, #340]	; (8003708 <pvPortMalloc+0x174>)
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4013      	ands	r3, r2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f040 808c 	bne.w	80036d6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d01c      	beq.n	80035fe <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80035c4:	2208      	movs	r2, #8
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4413      	add	r3, r2
 80035ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d013      	beq.n	80035fe <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f023 0307 	bic.w	r3, r3, #7
 80035dc:	3308      	adds	r3, #8
 80035de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d009      	beq.n	80035fe <pvPortMalloc+0x6a>
	__asm volatile
 80035ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ee:	f383 8811 	msr	BASEPRI, r3
 80035f2:	f3bf 8f6f 	isb	sy
 80035f6:	f3bf 8f4f 	dsb	sy
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	e7fe      	b.n	80035fc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d068      	beq.n	80036d6 <pvPortMalloc+0x142>
 8003604:	4b41      	ldr	r3, [pc, #260]	; (800370c <pvPortMalloc+0x178>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	429a      	cmp	r2, r3
 800360c:	d863      	bhi.n	80036d6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800360e:	4b40      	ldr	r3, [pc, #256]	; (8003710 <pvPortMalloc+0x17c>)
 8003610:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003612:	4b3f      	ldr	r3, [pc, #252]	; (8003710 <pvPortMalloc+0x17c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003618:	e004      	b.n	8003624 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	429a      	cmp	r2, r3
 800362c:	d903      	bls.n	8003636 <pvPortMalloc+0xa2>
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1f1      	bne.n	800361a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003636:	4b33      	ldr	r3, [pc, #204]	; (8003704 <pvPortMalloc+0x170>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800363c:	429a      	cmp	r2, r3
 800363e:	d04a      	beq.n	80036d6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2208      	movs	r2, #8
 8003646:	4413      	add	r3, r2
 8003648:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	1ad2      	subs	r2, r2, r3
 800365a:	2308      	movs	r3, #8
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	429a      	cmp	r2, r3
 8003660:	d91e      	bls.n	80036a0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4413      	add	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	2b00      	cmp	r3, #0
 8003672:	d009      	beq.n	8003688 <pvPortMalloc+0xf4>
 8003674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003678:	f383 8811 	msr	BASEPRI, r3
 800367c:	f3bf 8f6f 	isb	sy
 8003680:	f3bf 8f4f 	dsb	sy
 8003684:	613b      	str	r3, [r7, #16]
 8003686:	e7fe      	b.n	8003686 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	1ad2      	subs	r2, r2, r3
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800369a:	69b8      	ldr	r0, [r7, #24]
 800369c:	f000 f8f6 	bl	800388c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80036a0:	4b1a      	ldr	r3, [pc, #104]	; (800370c <pvPortMalloc+0x178>)
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	4a18      	ldr	r2, [pc, #96]	; (800370c <pvPortMalloc+0x178>)
 80036ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80036ae:	4b17      	ldr	r3, [pc, #92]	; (800370c <pvPortMalloc+0x178>)
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	4b18      	ldr	r3, [pc, #96]	; (8003714 <pvPortMalloc+0x180>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d203      	bcs.n	80036c2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80036ba:	4b14      	ldr	r3, [pc, #80]	; (800370c <pvPortMalloc+0x178>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a15      	ldr	r2, [pc, #84]	; (8003714 <pvPortMalloc+0x180>)
 80036c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	4b10      	ldr	r3, [pc, #64]	; (8003708 <pvPortMalloc+0x174>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	431a      	orrs	r2, r3
 80036cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80036d6:	f7ff fa4d 	bl	8002b74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d009      	beq.n	80036f8 <pvPortMalloc+0x164>
 80036e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e8:	f383 8811 	msr	BASEPRI, r3
 80036ec:	f3bf 8f6f 	isb	sy
 80036f0:	f3bf 8f4f 	dsb	sy
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	e7fe      	b.n	80036f6 <pvPortMalloc+0x162>
	return pvReturn;
 80036f8:	69fb      	ldr	r3, [r7, #28]
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3728      	adds	r7, #40	; 0x28
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20003e54 	.word	0x20003e54
 8003708:	20003e60 	.word	0x20003e60
 800370c:	20003e58 	.word	0x20003e58
 8003710:	20003e4c 	.word	0x20003e4c
 8003714:	20003e5c 	.word	0x20003e5c

08003718 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d046      	beq.n	80037b8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800372a:	2308      	movs	r3, #8
 800372c:	425b      	negs	r3, r3
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	4413      	add	r3, r2
 8003732:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	4b20      	ldr	r3, [pc, #128]	; (80037c0 <vPortFree+0xa8>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4013      	ands	r3, r2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d109      	bne.n	800375a <vPortFree+0x42>
 8003746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374a:	f383 8811 	msr	BASEPRI, r3
 800374e:	f3bf 8f6f 	isb	sy
 8003752:	f3bf 8f4f 	dsb	sy
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	e7fe      	b.n	8003758 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d009      	beq.n	8003776 <vPortFree+0x5e>
 8003762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003766:	f383 8811 	msr	BASEPRI, r3
 800376a:	f3bf 8f6f 	isb	sy
 800376e:	f3bf 8f4f 	dsb	sy
 8003772:	60bb      	str	r3, [r7, #8]
 8003774:	e7fe      	b.n	8003774 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <vPortFree+0xa8>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4013      	ands	r3, r2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d019      	beq.n	80037b8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d115      	bne.n	80037b8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <vPortFree+0xa8>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	43db      	mvns	r3, r3
 8003796:	401a      	ands	r2, r3
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800379c:	f7ff f9dc 	bl	8002b58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	4b07      	ldr	r3, [pc, #28]	; (80037c4 <vPortFree+0xac>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4413      	add	r3, r2
 80037aa:	4a06      	ldr	r2, [pc, #24]	; (80037c4 <vPortFree+0xac>)
 80037ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80037ae:	6938      	ldr	r0, [r7, #16]
 80037b0:	f000 f86c 	bl	800388c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80037b4:	f7ff f9de 	bl	8002b74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80037b8:	bf00      	nop
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	20003e60 	.word	0x20003e60
 80037c4:	20003e58 	.word	0x20003e58

080037c8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80037ce:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80037d2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80037d4:	4b27      	ldr	r3, [pc, #156]	; (8003874 <prvHeapInit+0xac>)
 80037d6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f003 0307 	and.w	r3, r3, #7
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00c      	beq.n	80037fc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	3307      	adds	r3, #7
 80037e6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f023 0307 	bic.w	r3, r3, #7
 80037ee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	4a1f      	ldr	r2, [pc, #124]	; (8003874 <prvHeapInit+0xac>)
 80037f8:	4413      	add	r3, r2
 80037fa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003800:	4a1d      	ldr	r2, [pc, #116]	; (8003878 <prvHeapInit+0xb0>)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003806:	4b1c      	ldr	r3, [pc, #112]	; (8003878 <prvHeapInit+0xb0>)
 8003808:	2200      	movs	r2, #0
 800380a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	4413      	add	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003814:	2208      	movs	r2, #8
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	1a9b      	subs	r3, r3, r2
 800381a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f023 0307 	bic.w	r3, r3, #7
 8003822:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4a15      	ldr	r2, [pc, #84]	; (800387c <prvHeapInit+0xb4>)
 8003828:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800382a:	4b14      	ldr	r3, [pc, #80]	; (800387c <prvHeapInit+0xb4>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2200      	movs	r2, #0
 8003830:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003832:	4b12      	ldr	r3, [pc, #72]	; (800387c <prvHeapInit+0xb4>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	1ad2      	subs	r2, r2, r3
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003848:	4b0c      	ldr	r3, [pc, #48]	; (800387c <prvHeapInit+0xb4>)
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	4a0a      	ldr	r2, [pc, #40]	; (8003880 <prvHeapInit+0xb8>)
 8003856:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	4a09      	ldr	r2, [pc, #36]	; (8003884 <prvHeapInit+0xbc>)
 800385e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003860:	4b09      	ldr	r3, [pc, #36]	; (8003888 <prvHeapInit+0xc0>)
 8003862:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003866:	601a      	str	r2, [r3, #0]
}
 8003868:	bf00      	nop
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	2000024c 	.word	0x2000024c
 8003878:	20003e4c 	.word	0x20003e4c
 800387c:	20003e54 	.word	0x20003e54
 8003880:	20003e5c 	.word	0x20003e5c
 8003884:	20003e58 	.word	0x20003e58
 8003888:	20003e60 	.word	0x20003e60

0800388c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003894:	4b28      	ldr	r3, [pc, #160]	; (8003938 <prvInsertBlockIntoFreeList+0xac>)
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	e002      	b.n	80038a0 <prvInsertBlockIntoFreeList+0x14>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d8f7      	bhi.n	800389a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	4413      	add	r3, r2
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d108      	bne.n	80038ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	441a      	add	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	441a      	add	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d118      	bne.n	8003914 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	4b15      	ldr	r3, [pc, #84]	; (800393c <prvInsertBlockIntoFreeList+0xb0>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d00d      	beq.n	800390a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	441a      	add	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	e008      	b.n	800391c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800390a:	4b0c      	ldr	r3, [pc, #48]	; (800393c <prvInsertBlockIntoFreeList+0xb0>)
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	e003      	b.n	800391c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	429a      	cmp	r2, r3
 8003922:	d002      	beq.n	800392a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800392a:	bf00      	nop
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	20003e4c 	.word	0x20003e4c
 800393c:	20003e54 	.word	0x20003e54

08003940 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800394a:	2300      	movs	r3, #0
 800394c:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	881b      	ldrh	r3, [r3, #0]
 8003952:	2b05      	cmp	r3, #5
 8003954:	d16c      	bne.n	8003a30 <eMBFuncReadCoils+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	3301      	adds	r3, #1
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	b29b      	uxth	r3, r3
 800395e:	021b      	lsls	r3, r3, #8
 8003960:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	3302      	adds	r3, #2
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	b29a      	uxth	r2, r3
 800396a:	8abb      	ldrh	r3, [r7, #20]
 800396c:	4313      	orrs	r3, r2
 800396e:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8003970:	8abb      	ldrh	r3, [r7, #20]
 8003972:	3301      	adds	r3, #1
 8003974:	82bb      	strh	r3, [r7, #20]

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3303      	adds	r3, #3
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	b29b      	uxth	r3, r3
 800397e:	021b      	lsls	r3, r3, #8
 8003980:	827b      	strh	r3, [r7, #18]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	3304      	adds	r3, #4
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	b29a      	uxth	r2, r3
 800398a:	8a7b      	ldrh	r3, [r7, #18]
 800398c:	4313      	orrs	r3, r2
 800398e:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 8003990:	8a7b      	ldrh	r3, [r7, #18]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d049      	beq.n	8003a2a <eMBFuncReadCoils+0xea>
 8003996:	8a7b      	ldrh	r3, [r7, #18]
 8003998:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800399c:	d245      	bcs.n	8003a2a <eMBFuncReadCoils+0xea>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2200      	movs	r2, #0
 80039a6:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	60fa      	str	r2, [r7, #12]
 80039ae:	2201      	movs	r2, #1
 80039b0:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	881b      	ldrh	r3, [r3, #0]
 80039b6:	3301      	adds	r3, #1
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 80039be:	8a7b      	ldrh	r3, [r7, #18]
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d006      	beq.n	80039d6 <eMBFuncReadCoils+0x96>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 80039c8:	8a7b      	ldrh	r3, [r7, #18]
 80039ca:	08db      	lsrs	r3, r3, #3
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	3301      	adds	r3, #1
 80039d2:	75fb      	strb	r3, [r7, #23]
 80039d4:	e003      	b.n	80039de <eMBFuncReadCoils+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 80039d6:	8a7b      	ldrh	r3, [r7, #18]
 80039d8:	08db      	lsrs	r3, r3, #3
 80039da:	b29b      	uxth	r3, r3
 80039dc:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	60fa      	str	r2, [r7, #12]
 80039e4:	7dfa      	ldrb	r2, [r7, #23]
 80039e6:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	881b      	ldrh	r3, [r3, #0]
 80039ec:	3301      	adds	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	801a      	strh	r2, [r3, #0]

            eRegStatus =
 80039f4:	8a7a      	ldrh	r2, [r7, #18]
 80039f6:	8ab9      	ldrh	r1, [r7, #20]
 80039f8:	2300      	movs	r3, #0
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f001 fa3a 	bl	8004e74 <eMBRegCoilsCB>
 8003a00:	4603      	mov	r3, r0
 8003a02:	72fb      	strb	r3, [r7, #11]
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003a04:	7afb      	ldrb	r3, [r7, #11]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d006      	beq.n	8003a18 <eMBFuncReadCoils+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003a0a:	7afb      	ldrb	r3, [r7, #11]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 fb85 	bl	800411c <prveMBError2Exception>
 8003a12:	4603      	mov	r3, r0
 8003a14:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8003a16:	e00d      	b.n	8003a34 <eMBFuncReadCoils+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	881a      	ldrh	r2, [r3, #0]
 8003a1c:	7dfb      	ldrb	r3, [r7, #23]
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	4413      	add	r3, r2
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8003a28:	e004      	b.n	8003a34 <eMBFuncReadCoils+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	75bb      	strb	r3, [r7, #22]
 8003a2e:	e001      	b.n	8003a34 <eMBFuncReadCoils+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003a30:	2303      	movs	r3, #3
 8003a32:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8003a34:	7dbb      	ldrb	r3, [r7, #22]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3718      	adds	r7, #24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b084      	sub	sp, #16
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
 8003a46:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	881b      	ldrh	r3, [r3, #0]
 8003a50:	2b05      	cmp	r3, #5
 8003a52:	d140      	bne.n	8003ad6 <eMBFuncWriteCoil+0x98>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3301      	adds	r3, #1
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	021b      	lsls	r3, r3, #8
 8003a5e:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3302      	adds	r3, #2
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	89bb      	ldrh	r3, [r7, #12]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8003a6e:	89bb      	ldrh	r3, [r7, #12]
 8003a70:	3301      	adds	r3, #1
 8003a72:	81bb      	strh	r3, [r7, #12]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3304      	adds	r3, #4
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d128      	bne.n	8003ad0 <eMBFuncWriteCoil+0x92>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	3303      	adds	r3, #3
 8003a82:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8003a84:	2bff      	cmp	r3, #255	; 0xff
 8003a86:	d004      	beq.n	8003a92 <eMBFuncWriteCoil+0x54>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3303      	adds	r3, #3
 8003a8c:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d11e      	bne.n	8003ad0 <eMBFuncWriteCoil+0x92>
        {
            ucBuf[1] = 0;
 8003a92:	2300      	movs	r3, #0
 8003a94:	727b      	strb	r3, [r7, #9]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3303      	adds	r3, #3
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	2bff      	cmp	r3, #255	; 0xff
 8003a9e:	d102      	bne.n	8003aa6 <eMBFuncWriteCoil+0x68>
            {
                ucBuf[0] = 1;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	723b      	strb	r3, [r7, #8]
 8003aa4:	e001      	b.n	8003aaa <eMBFuncWriteCoil+0x6c>
            }
            else
            {
                ucBuf[0] = 0;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	723b      	strb	r3, [r7, #8]
            }
            eRegStatus =
 8003aaa:	89b9      	ldrh	r1, [r7, #12]
 8003aac:	f107 0008 	add.w	r0, r7, #8
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f001 f9de 	bl	8004e74 <eMBRegCoilsCB>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	72fb      	strb	r3, [r7, #11]
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003abc:	7afb      	ldrb	r3, [r7, #11]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00b      	beq.n	8003ada <eMBFuncWriteCoil+0x9c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003ac2:	7afb      	ldrb	r3, [r7, #11]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f000 fb29 	bl	800411c <prveMBError2Exception>
 8003aca:	4603      	mov	r3, r0
 8003acc:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 8003ace:	e004      	b.n	8003ada <eMBFuncWriteCoil+0x9c>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	73fb      	strb	r3, [r7, #15]
 8003ad4:	e001      	b.n	8003ada <eMBFuncWriteCoil+0x9c>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8003ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
 8003aee:	2300      	movs	r3, #0
 8003af0:	73bb      	strb	r3, [r7, #14]
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	881b      	ldrh	r3, [r3, #0]
 8003af6:	2b05      	cmp	r3, #5
 8003af8:	d954      	bls.n	8003ba4 <eMBFuncWriteMultipleCoils+0xc0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	3301      	adds	r3, #1
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	021b      	lsls	r3, r3, #8
 8003b04:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	3302      	adds	r3, #2
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	89bb      	ldrh	r3, [r7, #12]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8003b14:	89bb      	ldrh	r3, [r7, #12]
 8003b16:	3301      	adds	r3, #1
 8003b18:	81bb      	strh	r3, [r7, #12]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	3303      	adds	r3, #3
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	021b      	lsls	r3, r3, #8
 8003b24:	817b      	strh	r3, [r7, #10]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	3304      	adds	r3, #4
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	897b      	ldrh	r3, [r7, #10]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	817b      	strh	r3, [r7, #10]

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	795b      	ldrb	r3, [r3, #5]
 8003b38:	727b      	strb	r3, [r7, #9]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8003b3a:	897b      	ldrh	r3, [r7, #10]
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d006      	beq.n	8003b52 <eMBFuncWriteMultipleCoils+0x6e>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8003b44:	897b      	ldrh	r3, [r7, #10]
 8003b46:	08db      	lsrs	r3, r3, #3
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	73fb      	strb	r3, [r7, #15]
 8003b50:	e003      	b.n	8003b5a <eMBFuncWriteMultipleCoils+0x76>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8003b52:	897b      	ldrh	r3, [r7, #10]
 8003b54:	08db      	lsrs	r3, r3, #3
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	73fb      	strb	r3, [r7, #15]
        }

        if( ( usCoilCnt >= 1 ) &&
 8003b5a:	897b      	ldrh	r3, [r7, #10]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d01e      	beq.n	8003b9e <eMBFuncWriteMultipleCoils+0xba>
 8003b60:	897b      	ldrh	r3, [r7, #10]
 8003b62:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 8003b66:	d81a      	bhi.n	8003b9e <eMBFuncWriteMultipleCoils+0xba>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8003b68:	7bfa      	ldrb	r2, [r7, #15]
 8003b6a:	7a7b      	ldrb	r3, [r7, #9]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d116      	bne.n	8003b9e <eMBFuncWriteMultipleCoils+0xba>
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	1d98      	adds	r0, r3, #6
            eRegStatus =
 8003b74:	897a      	ldrh	r2, [r7, #10]
 8003b76:	89b9      	ldrh	r1, [r7, #12]
 8003b78:	2301      	movs	r3, #1
 8003b7a:	f001 f97b 	bl	8004e74 <eMBRegCoilsCB>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	723b      	strb	r3, [r7, #8]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003b82:	7a3b      	ldrb	r3, [r7, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d006      	beq.n	8003b96 <eMBFuncWriteMultipleCoils+0xb2>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003b88:	7a3b      	ldrb	r3, [r7, #8]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 fac6 	bl	800411c <prveMBError2Exception>
 8003b90:	4603      	mov	r3, r0
 8003b92:	73bb      	strb	r3, [r7, #14]
            if( eRegStatus != MB_ENOERR )
 8003b94:	e008      	b.n	8003ba8 <eMBFuncWriteMultipleCoils+0xc4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2205      	movs	r2, #5
 8003b9a:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8003b9c:	e004      	b.n	8003ba8 <eMBFuncWriteMultipleCoils+0xc4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	73bb      	strb	r3, [r7, #14]
 8003ba2:	e001      	b.n	8003ba8 <eMBFuncWriteMultipleCoils+0xc4>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	73bb      	strb	r3, [r7, #14]
    }
    return eStatus;
 8003ba8:	7bbb      	ldrb	r3, [r7, #14]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b086      	sub	sp, #24
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
 8003bba:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	881b      	ldrh	r3, [r3, #0]
 8003bc4:	2b05      	cmp	r3, #5
 8003bc6:	d16c      	bne.n	8003ca2 <eMBFuncReadDiscreteInputs+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	021b      	lsls	r3, r3, #8
 8003bd2:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3302      	adds	r3, #2
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	8abb      	ldrh	r3, [r7, #20]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8003be2:	8abb      	ldrh	r3, [r7, #20]
 8003be4:	3301      	adds	r3, #1
 8003be6:	82bb      	strh	r3, [r7, #20]

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3303      	adds	r3, #3
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	021b      	lsls	r3, r3, #8
 8003bf2:	827b      	strh	r3, [r7, #18]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	3304      	adds	r3, #4
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	8a7b      	ldrh	r3, [r7, #18]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 8003c02:	8a7b      	ldrh	r3, [r7, #18]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d049      	beq.n	8003c9c <eMBFuncReadDiscreteInputs+0xea>
 8003c08:	8a7b      	ldrh	r3, [r7, #18]
 8003c0a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003c0e:	d245      	bcs.n	8003c9c <eMBFuncReadDiscreteInputs+0xea>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	2200      	movs	r2, #0
 8003c18:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	60fa      	str	r2, [r7, #12]
 8003c20:	2202      	movs	r2, #2
 8003c22:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8003c30:	8a7b      	ldrh	r3, [r7, #18]
 8003c32:	f003 0307 	and.w	r3, r3, #7
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d006      	beq.n	8003c48 <eMBFuncReadDiscreteInputs+0x96>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8003c3a:	8a7b      	ldrh	r3, [r7, #18]
 8003c3c:	08db      	lsrs	r3, r3, #3
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	3301      	adds	r3, #1
 8003c44:	75fb      	strb	r3, [r7, #23]
 8003c46:	e003      	b.n	8003c50 <eMBFuncReadDiscreteInputs+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8003c48:	8a7b      	ldrh	r3, [r7, #18]
 8003c4a:	08db      	lsrs	r3, r3, #3
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	60fa      	str	r2, [r7, #12]
 8003c56:	7dfa      	ldrb	r2, [r7, #23]
 8003c58:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	881b      	ldrh	r3, [r3, #0]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	801a      	strh	r2, [r3, #0]

            eRegStatus =
 8003c66:	8a7a      	ldrh	r2, [r7, #18]
 8003c68:	8abb      	ldrh	r3, [r7, #20]
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f001 f915 	bl	8004e9c <eMBRegDiscreteCB>
 8003c72:	4603      	mov	r3, r0
 8003c74:	72fb      	strb	r3, [r7, #11]
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003c76:	7afb      	ldrb	r3, [r7, #11]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d006      	beq.n	8003c8a <eMBFuncReadDiscreteInputs+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003c7c:	7afb      	ldrb	r3, [r7, #11]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 fa4c 	bl	800411c <prveMBError2Exception>
 8003c84:	4603      	mov	r3, r0
 8003c86:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8003c88:	e00d      	b.n	8003ca6 <eMBFuncReadDiscreteInputs+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	881a      	ldrh	r2, [r3, #0]
 8003c8e:	7dfb      	ldrb	r3, [r7, #23]
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	4413      	add	r3, r2
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8003c9a:	e004      	b.n	8003ca6 <eMBFuncReadDiscreteInputs+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	75bb      	strb	r3, [r7, #22]
 8003ca0:	e001      	b.n	8003ca6 <eMBFuncReadDiscreteInputs+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8003ca6:	7dbb      	ldrb	r3, [r7, #22]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3718      	adds	r7, #24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	881b      	ldrh	r3, [r3, #0]
 8003cc2:	2b05      	cmp	r3, #5
 8003cc4:	d122      	bne.n	8003d0c <eMBFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	021b      	lsls	r3, r3, #8
 8003cd0:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	3302      	adds	r3, #2
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	89bb      	ldrh	r3, [r7, #12]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8003ce0:	89bb      	ldrh	r3, [r7, #12]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	1cd8      	adds	r0, r3, #3
 8003cea:	89b9      	ldrh	r1, [r7, #12]
 8003cec:	2301      	movs	r3, #1
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f001 f84a 	bl	8004d88 <eMBRegHoldingCB>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	72fb      	strb	r3, [r7, #11]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8003cf8:	7afb      	ldrb	r3, [r7, #11]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d008      	beq.n	8003d10 <eMBFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 8003cfe:	7afb      	ldrb	r3, [r7, #11]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fa0b 	bl	800411c <prveMBError2Exception>
 8003d06:	4603      	mov	r3, r0
 8003d08:	73fb      	strb	r3, [r7, #15]
 8003d0a:	e001      	b.n	8003d10 <eMBFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8003d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b084      	sub	sp, #16
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
 8003d22:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 8003d24:	2300      	movs	r3, #0
 8003d26:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	2b05      	cmp	r3, #5
 8003d2e:	d946      	bls.n	8003dbe <eMBFuncWriteMultipleHoldingRegister+0xa4>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3301      	adds	r3, #1
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	021b      	lsls	r3, r3, #8
 8003d3a:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3302      	adds	r3, #2
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	89bb      	ldrh	r3, [r7, #12]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8003d4a:	89bb      	ldrh	r3, [r7, #12]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	81bb      	strh	r3, [r7, #12]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3303      	adds	r3, #3
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	021b      	lsls	r3, r3, #8
 8003d5a:	817b      	strh	r3, [r7, #10]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3304      	adds	r3, #4
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	897b      	ldrh	r3, [r7, #10]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	817b      	strh	r3, [r7, #10]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	795b      	ldrb	r3, [r3, #5]
 8003d6e:	727b      	strb	r3, [r7, #9]

        if( ( usRegCount >= 1 ) &&
 8003d70:	897b      	ldrh	r3, [r7, #10]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d020      	beq.n	8003db8 <eMBFuncWriteMultipleHoldingRegister+0x9e>
 8003d76:	897b      	ldrh	r3, [r7, #10]
 8003d78:	2b78      	cmp	r3, #120	; 0x78
 8003d7a:	d81d      	bhi.n	8003db8 <eMBFuncWriteMultipleHoldingRegister+0x9e>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8003d7c:	897b      	ldrh	r3, [r7, #10]
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8003d84:	7a7a      	ldrb	r2, [r7, #9]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d116      	bne.n	8003db8 <eMBFuncWriteMultipleHoldingRegister+0x9e>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	1d98      	adds	r0, r3, #6
            eRegStatus =
 8003d8e:	897a      	ldrh	r2, [r7, #10]
 8003d90:	89b9      	ldrh	r1, [r7, #12]
 8003d92:	2301      	movs	r3, #1
 8003d94:	f000 fff8 	bl	8004d88 <eMBRegHoldingCB>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	723b      	strb	r3, [r7, #8]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003d9c:	7a3b      	ldrb	r3, [r7, #8]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d006      	beq.n	8003db0 <eMBFuncWriteMultipleHoldingRegister+0x96>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003da2:	7a3b      	ldrb	r3, [r7, #8]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 f9b9 	bl	800411c <prveMBError2Exception>
 8003daa:	4603      	mov	r3, r0
 8003dac:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 8003dae:	e008      	b.n	8003dc2 <eMBFuncWriteMultipleHoldingRegister+0xa8>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2205      	movs	r2, #5
 8003db4:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8003db6:	e004      	b.n	8003dc2 <eMBFuncWriteMultipleHoldingRegister+0xa8>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003db8:	2303      	movs	r3, #3
 8003dba:	73fb      	strb	r3, [r7, #15]
 8003dbc:	e001      	b.n	8003dc2 <eMBFuncWriteMultipleHoldingRegister+0xa8>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	881b      	ldrh	r3, [r3, #0]
 8003dde:	2b05      	cmp	r3, #5
 8003de0:	d15c      	bne.n	8003e9c <eMBFuncReadHoldingRegister+0xd0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	3301      	adds	r3, #1
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	021b      	lsls	r3, r3, #8
 8003dec:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	3302      	adds	r3, #2
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	8abb      	ldrh	r3, [r7, #20]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8003dfc:	8abb      	ldrh	r3, [r7, #20]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	3303      	adds	r3, #3
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	021b      	lsls	r3, r3, #8
 8003e0c:	827b      	strh	r3, [r7, #18]
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	3304      	adds	r3, #4
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8003e16:	8a7b      	ldrh	r3, [r7, #18]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d03c      	beq.n	8003e96 <eMBFuncReadHoldingRegister+0xca>
 8003e1c:	8a7b      	ldrh	r3, [r7, #18]
 8003e1e:	2b7d      	cmp	r3, #125	; 0x7d
 8003e20:	d839      	bhi.n	8003e96 <eMBFuncReadHoldingRegister+0xca>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	1c5a      	adds	r2, r3, #1
 8003e30:	60fa      	str	r2, [r7, #12]
 8003e32:	2203      	movs	r2, #3
 8003e34:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8003e42:	8a7b      	ldrh	r3, [r7, #18]
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	1c59      	adds	r1, r3, #1
 8003e4a:	60f9      	str	r1, [r7, #12]
 8003e4c:	0052      	lsls	r2, r2, #1
 8003e4e:	b2d2      	uxtb	r2, r2
 8003e50:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	881b      	ldrh	r3, [r3, #0]
 8003e56:	3301      	adds	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 8003e5e:	8a7a      	ldrh	r2, [r7, #18]
 8003e60:	8ab9      	ldrh	r1, [r7, #20]
 8003e62:	2300      	movs	r3, #0
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 ff8f 	bl	8004d88 <eMBRegHoldingCB>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	72fb      	strb	r3, [r7, #11]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003e6e:	7afb      	ldrb	r3, [r7, #11]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d006      	beq.n	8003e82 <eMBFuncReadHoldingRegister+0xb6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003e74:	7afb      	ldrb	r3, [r7, #11]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 f950 	bl	800411c <prveMBError2Exception>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8003e80:	e00e      	b.n	8003ea0 <eMBFuncReadHoldingRegister+0xd4>
            }
            else
            {
                *usLen += usRegCount * 2;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	881a      	ldrh	r2, [r3, #0]
 8003e86:	8a7b      	ldrh	r3, [r7, #18]
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	4413      	add	r3, r2
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8003e94:	e004      	b.n	8003ea0 <eMBFuncReadHoldingRegister+0xd4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003e96:	2303      	movs	r3, #3
 8003e98:	75fb      	strb	r3, [r7, #23]
 8003e9a:	e001      	b.n	8003ea0 <eMBFuncReadHoldingRegister+0xd4>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8003ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3718      	adds	r7, #24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b086      	sub	sp, #24
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
 8003eb2:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	2b09      	cmp	r3, #9
 8003ebe:	f240 8099 	bls.w	8003ff4 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	021b      	lsls	r3, r3, #8
 8003ecc:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3302      	adds	r3, #2
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	8abb      	ldrh	r3, [r7, #20]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 8003edc:	8abb      	ldrh	r3, [r7, #20]
 8003ede:	3301      	adds	r3, #1
 8003ee0:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	3303      	adds	r3, #3
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	021b      	lsls	r3, r3, #8
 8003eec:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	8a7b      	ldrh	r3, [r7, #18]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3305      	adds	r3, #5
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	021b      	lsls	r3, r3, #8
 8003f06:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	3306      	adds	r3, #6
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	8a3b      	ldrh	r3, [r7, #16]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 8003f16:	8a3b      	ldrh	r3, [r7, #16]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3307      	adds	r3, #7
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	021b      	lsls	r3, r3, #8
 8003f26:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3308      	adds	r3, #8
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	89fb      	ldrh	r3, [r7, #14]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	81fb      	strh	r3, [r7, #14]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	7a5b      	ldrb	r3, [r3, #9]
 8003f3a:	737b      	strb	r3, [r7, #13]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8003f3c:	8a7b      	ldrh	r3, [r7, #18]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d056      	beq.n	8003ff0 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 8003f42:	8a7b      	ldrh	r3, [r7, #18]
 8003f44:	2b7d      	cmp	r3, #125	; 0x7d
 8003f46:	d853      	bhi.n	8003ff0 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 8003f48:	89fb      	ldrh	r3, [r7, #14]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d050      	beq.n	8003ff0 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8003f4e:	89fb      	ldrh	r3, [r7, #14]
 8003f50:	2b79      	cmp	r3, #121	; 0x79
 8003f52:	d84d      	bhi.n	8003ff0 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 8003f54:	89fb      	ldrh	r3, [r7, #14]
 8003f56:	005a      	lsls	r2, r3, #1
 8003f58:	7b7b      	ldrb	r3, [r7, #13]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d148      	bne.n	8003ff0 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f103 000a 	add.w	r0, r3, #10
 8003f64:	89fa      	ldrh	r2, [r7, #14]
 8003f66:	8a39      	ldrh	r1, [r7, #16]
 8003f68:	2301      	movs	r3, #1
 8003f6a:	f000 ff0d 	bl	8004d88 <eMBRegHoldingCB>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	75bb      	strb	r3, [r7, #22]
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 8003f72:	7dbb      	ldrb	r3, [r7, #22]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d131      	bne.n	8003fdc <eMBFuncReadWriteMultipleHoldingRegister+0x132>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	1c5a      	adds	r2, r3, #1
 8003f86:	60ba      	str	r2, [r7, #8]
 8003f88:	2217      	movs	r2, #23
 8003f8a:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	881b      	ldrh	r3, [r3, #0]
 8003f90:	3301      	adds	r3, #1
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8003f98:	8a7b      	ldrh	r3, [r7, #18]
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	1c59      	adds	r1, r3, #1
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	0052      	lsls	r2, r2, #1
 8003fa4:	b2d2      	uxtb	r2, r2
 8003fa6:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	881b      	ldrh	r3, [r3, #0]
 8003fac:	3301      	adds	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus =
 8003fb4:	8a7a      	ldrh	r2, [r7, #18]
 8003fb6:	8ab9      	ldrh	r1, [r7, #20]
 8003fb8:	2300      	movs	r3, #0
 8003fba:	68b8      	ldr	r0, [r7, #8]
 8003fbc:	f000 fee4 	bl	8004d88 <eMBRegHoldingCB>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	75bb      	strb	r3, [r7, #22]
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
                if( eRegStatus == MB_ENOERR )
 8003fc4:	7dbb      	ldrb	r3, [r7, #22]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d108      	bne.n	8003fdc <eMBFuncReadWriteMultipleHoldingRegister+0x132>
                {
                    *usLen += 2 * usRegReadCount;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	881a      	ldrh	r2, [r3, #0]
 8003fce:	8a7b      	ldrh	r3, [r7, #18]
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	4413      	add	r3, r2
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 8003fdc:	7dbb      	ldrb	r3, [r7, #22]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d008      	beq.n	8003ff4 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003fe2:	7dbb      	ldrb	r3, [r7, #22]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f000 f899 	bl	800411c <prveMBError2Exception>
 8003fea:	4603      	mov	r3, r0
 8003fec:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8003fee:	e001      	b.n	8003ff4 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 8003ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b086      	sub	sp, #24
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
 8004006:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8004008:	2300      	movs	r3, #0
 800400a:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	881b      	ldrh	r3, [r3, #0]
 8004010:	2b05      	cmp	r3, #5
 8004012:	d15f      	bne.n	80040d4 <eMBFuncReadInputRegister+0xd6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3301      	adds	r3, #1
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	b29b      	uxth	r3, r3
 800401c:	021b      	lsls	r3, r3, #8
 800401e:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	3302      	adds	r3, #2
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	b29a      	uxth	r2, r3
 8004028:	8abb      	ldrh	r3, [r7, #20]
 800402a:	4313      	orrs	r3, r2
 800402c:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 800402e:	8abb      	ldrh	r3, [r7, #20]
 8004030:	3301      	adds	r3, #1
 8004032:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3303      	adds	r3, #3
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	b29b      	uxth	r3, r3
 800403c:	021b      	lsls	r3, r3, #8
 800403e:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	3304      	adds	r3, #4
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	b29a      	uxth	r2, r3
 8004048:	8a7b      	ldrh	r3, [r7, #18]
 800404a:	4313      	orrs	r3, r2
 800404c:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 800404e:	8a7b      	ldrh	r3, [r7, #18]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d03c      	beq.n	80040ce <eMBFuncReadInputRegister+0xd0>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8004054:	8a7b      	ldrh	r3, [r7, #18]
 8004056:	2b7c      	cmp	r3, #124	; 0x7c
 8004058:	d839      	bhi.n	80040ce <eMBFuncReadInputRegister+0xd0>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	2200      	movs	r2, #0
 8004062:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	1c5a      	adds	r2, r3, #1
 8004068:	60fa      	str	r2, [r7, #12]
 800406a:	2204      	movs	r2, #4
 800406c:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	881b      	ldrh	r3, [r3, #0]
 8004072:	3301      	adds	r3, #1
 8004074:	b29a      	uxth	r2, r3
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 800407a:	8a7b      	ldrh	r3, [r7, #18]
 800407c:	b2da      	uxtb	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	1c59      	adds	r1, r3, #1
 8004082:	60f9      	str	r1, [r7, #12]
 8004084:	0052      	lsls	r2, r2, #1
 8004086:	b2d2      	uxtb	r2, r2
 8004088:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	3301      	adds	r3, #1
 8004090:	b29a      	uxth	r2, r3
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	801a      	strh	r2, [r3, #0]

            eRegStatus =
 8004096:	8a7a      	ldrh	r2, [r7, #18]
 8004098:	8abb      	ldrh	r3, [r7, #20]
 800409a:	4619      	mov	r1, r3
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 fe2d 	bl	8004cfc <eMBRegInputCB>
 80040a2:	4603      	mov	r3, r0
 80040a4:	72fb      	strb	r3, [r7, #11]
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80040a6:	7afb      	ldrb	r3, [r7, #11]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d006      	beq.n	80040ba <eMBFuncReadInputRegister+0xbc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80040ac:	7afb      	ldrb	r3, [r7, #11]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 f834 	bl	800411c <prveMBError2Exception>
 80040b4:	4603      	mov	r3, r0
 80040b6:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 80040b8:	e00e      	b.n	80040d8 <eMBFuncReadInputRegister+0xda>
            }
            else
            {
                *usLen += usRegCount * 2;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	881a      	ldrh	r2, [r3, #0]
 80040be:	8a7b      	ldrh	r3, [r7, #18]
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	4413      	add	r3, r2
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 80040cc:	e004      	b.n	80040d8 <eMBFuncReadInputRegister+0xda>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80040ce:	2303      	movs	r3, #3
 80040d0:	75fb      	strb	r3, [r7, #23]
 80040d2:	e001      	b.n	80040d8 <eMBFuncReadInputRegister+0xda>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80040d4:	2303      	movs	r3, #3
 80040d6:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 80040d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
	...

080040e4 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	1c58      	adds	r0, r3, #1
 80040f2:	4b08      	ldr	r3, [pc, #32]	; (8004114 <eMBFuncReportSlaveID+0x30>)
 80040f4:	881b      	ldrh	r3, [r3, #0]
 80040f6:	461a      	mov	r2, r3
 80040f8:	4907      	ldr	r1, [pc, #28]	; (8004118 <eMBFuncReportSlaveID+0x34>)
 80040fa:	f001 f9b1 	bl	8005460 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 80040fe:	4b05      	ldr	r3, [pc, #20]	; (8004114 <eMBFuncReportSlaveID+0x30>)
 8004100:	881b      	ldrh	r3, [r3, #0]
 8004102:	3301      	adds	r3, #1
 8004104:	b29a      	uxth	r2, r3
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	20003e84 	.word	0x20003e84
 8004118:	20003e64 	.word	0x20003e64

0800411c <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	4603      	mov	r3, r0
 8004124:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 8004126:	79fb      	ldrb	r3, [r7, #7]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d006      	beq.n	800413a <prveMBError2Exception+0x1e>
 800412c:	2b07      	cmp	r3, #7
 800412e:	d007      	beq.n	8004140 <prveMBError2Exception+0x24>
 8004130:	2b00      	cmp	r3, #0
 8004132:	d108      	bne.n	8004146 <prveMBError2Exception+0x2a>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 8004134:	2300      	movs	r3, #0
 8004136:	73fb      	strb	r3, [r7, #15]
            break;
 8004138:	e008      	b.n	800414c <prveMBError2Exception+0x30>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 800413a:	2302      	movs	r3, #2
 800413c:	73fb      	strb	r3, [r7, #15]
            break;
 800413e:	e005      	b.n	800414c <prveMBError2Exception+0x30>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 8004140:	2306      	movs	r3, #6
 8004142:	73fb      	strb	r3, [r7, #15]
            break;
 8004144:	e002      	b.n	800414c <prveMBError2Exception+0x30>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 8004146:	2304      	movs	r3, #4
 8004148:	73fb      	strb	r3, [r7, #15]
            break;
 800414a:	bf00      	nop
    }

    return eStatus;
 800414c:	7bfb      	ldrb	r3, [r7, #15]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
	...

0800415c <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	603b      	str	r3, [r7, #0]
 8004164:	4603      	mov	r3, r0
 8004166:	71fb      	strb	r3, [r7, #7]
 8004168:	460b      	mov	r3, r1
 800416a:	71bb      	strb	r3, [r7, #6]
 800416c:	4613      	mov	r3, r2
 800416e:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 8004170:	2300      	movs	r3, #0
 8004172:	73fb      	strb	r3, [r7, #15]

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 8004174:	79bb      	ldrb	r3, [r7, #6]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d005      	beq.n	8004186 <eMBInit+0x2a>
 800417a:	79bb      	ldrb	r3, [r7, #6]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d002      	beq.n	8004186 <eMBInit+0x2a>
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 8004180:	79bb      	ldrb	r3, [r7, #6]
 8004182:	2bf7      	cmp	r3, #247	; 0xf7
 8004184:	d902      	bls.n	800418c <eMBInit+0x30>
    {
        eStatus = MB_EINVAL;
 8004186:	2302      	movs	r3, #2
 8004188:	73fb      	strb	r3, [r7, #15]
 800418a:	e03a      	b.n	8004202 <eMBInit+0xa6>
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 800418c:	4a1f      	ldr	r2, [pc, #124]	; (800420c <eMBInit+0xb0>)
 800418e:	79bb      	ldrb	r3, [r7, #6]
 8004190:	7013      	strb	r3, [r2, #0]

        switch ( eMode )
 8004192:	79fb      	ldrb	r3, [r7, #7]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d121      	bne.n	80041dc <eMBInit+0x80>
        {
#if MB_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 8004198:	4b1d      	ldr	r3, [pc, #116]	; (8004210 <eMBInit+0xb4>)
 800419a:	4a1e      	ldr	r2, [pc, #120]	; (8004214 <eMBInit+0xb8>)
 800419c:	601a      	str	r2, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 800419e:	4b1e      	ldr	r3, [pc, #120]	; (8004218 <eMBInit+0xbc>)
 80041a0:	4a1e      	ldr	r2, [pc, #120]	; (800421c <eMBInit+0xc0>)
 80041a2:	601a      	str	r2, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 80041a4:	4b1e      	ldr	r3, [pc, #120]	; (8004220 <eMBInit+0xc4>)
 80041a6:	4a1f      	ldr	r2, [pc, #124]	; (8004224 <eMBInit+0xc8>)
 80041a8:	601a      	str	r2, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 80041aa:	4b1f      	ldr	r3, [pc, #124]	; (8004228 <eMBInit+0xcc>)
 80041ac:	4a1f      	ldr	r2, [pc, #124]	; (800422c <eMBInit+0xd0>)
 80041ae:	601a      	str	r2, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 80041b0:	4b1f      	ldr	r3, [pc, #124]	; (8004230 <eMBInit+0xd4>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	601a      	str	r2, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 80041b6:	4b1f      	ldr	r3, [pc, #124]	; (8004234 <eMBInit+0xd8>)
 80041b8:	4a1f      	ldr	r2, [pc, #124]	; (8004238 <eMBInit+0xdc>)
 80041ba:	601a      	str	r2, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 80041bc:	4b1f      	ldr	r3, [pc, #124]	; (800423c <eMBInit+0xe0>)
 80041be:	4a20      	ldr	r2, [pc, #128]	; (8004240 <eMBInit+0xe4>)
 80041c0:	601a      	str	r2, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 80041c2:	4b20      	ldr	r3, [pc, #128]	; (8004244 <eMBInit+0xe8>)
 80041c4:	4a20      	ldr	r2, [pc, #128]	; (8004248 <eMBInit+0xec>)
 80041c6:	601a      	str	r2, [r3, #0]

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 80041c8:	4b10      	ldr	r3, [pc, #64]	; (800420c <eMBInit+0xb0>)
 80041ca:	7818      	ldrb	r0, [r3, #0]
 80041cc:	7e3b      	ldrb	r3, [r7, #24]
 80041ce:	7979      	ldrb	r1, [r7, #5]
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	f000 fa49 	bl	8004668 <eMBRTUInit>
 80041d6:	4603      	mov	r3, r0
 80041d8:	73fb      	strb	r3, [r7, #15]
            break;
 80041da:	e001      	b.n	80041e0 <eMBInit+0x84>

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
 80041dc:	2302      	movs	r3, #2
 80041de:	73fb      	strb	r3, [r7, #15]
        }

        if( eStatus == MB_ENOERR )
 80041e0:	7bfb      	ldrb	r3, [r7, #15]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10d      	bne.n	8004202 <eMBInit+0xa6>
        {
            if( !xMBPortEventInit(  ) )
 80041e6:	f000 f90b 	bl	8004400 <xMBPortEventInit>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d102      	bne.n	80041f6 <eMBInit+0x9a>
            {
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
 80041f0:	2303      	movs	r3, #3
 80041f2:	73fb      	strb	r3, [r7, #15]
 80041f4:	e005      	b.n	8004202 <eMBInit+0xa6>
            }
            else
            {
                eMBCurrentMode = eMode;
 80041f6:	4a15      	ldr	r2, [pc, #84]	; (800424c <eMBInit+0xf0>)
 80041f8:	79fb      	ldrb	r3, [r7, #7]
 80041fa:	7013      	strb	r3, [r2, #0]
                eMBState = STATE_DISABLED;
 80041fc:	4b14      	ldr	r3, [pc, #80]	; (8004250 <eMBInit+0xf4>)
 80041fe:	2201      	movs	r2, #1
 8004200:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return eStatus;
 8004202:	7bfb      	ldrb	r3, [r7, #15]
}
 8004204:	4618      	mov	r0, r3
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	20003e86 	.word	0x20003e86
 8004210:	20003e8c 	.word	0x20003e8c
 8004214:	080046e1 	.word	0x080046e1
 8004218:	20003e90 	.word	0x20003e90
 800421c:	08004709 	.word	0x08004709
 8004220:	20003e88 	.word	0x20003e88
 8004224:	080047c1 	.word	0x080047c1
 8004228:	20003e94 	.word	0x20003e94
 800422c:	08004725 	.word	0x08004725
 8004230:	20003e98 	.word	0x20003e98
 8004234:	2000422c 	.word	0x2000422c
 8004238:	08004889 	.word	0x08004889
 800423c:	20004224 	.word	0x20004224
 8004240:	08004959 	.word	0x08004959
 8004244:	20004228 	.word	0x20004228
 8004248:	08004a09 	.word	0x08004a09
 800424c:	20003e87 	.word	0x20003e87
 8004250:	2000000c 	.word	0x2000000c

08004254 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 800425a:	2300      	movs	r3, #0
 800425c:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 800425e:	4b09      	ldr	r3, [pc, #36]	; (8004284 <eMBEnable+0x30>)
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d106      	bne.n	8004274 <eMBEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 8004266:	4b08      	ldr	r3, [pc, #32]	; (8004288 <eMBEnable+0x34>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 800426c:	4b05      	ldr	r3, [pc, #20]	; (8004284 <eMBEnable+0x30>)
 800426e:	2200      	movs	r2, #0
 8004270:	701a      	strb	r2, [r3, #0]
 8004272:	e001      	b.n	8004278 <eMBEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8004274:	2306      	movs	r3, #6
 8004276:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 8004278:	79fb      	ldrb	r3, [r7, #7]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	2000000c 	.word	0x2000000c
 8004288:	20003e8c 	.word	0x20003e8c

0800428c <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 800428c:	b590      	push	{r4, r7, lr}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 8004292:	2300      	movs	r3, #0
 8004294:	70fb      	strb	r3, [r7, #3]
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8004296:	4b50      	ldr	r3, [pc, #320]	; (80043d8 <eMBPoll+0x14c>)
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <eMBPoll+0x16>
    {
        return MB_EILLSTATE;
 800429e:	2306      	movs	r3, #6
 80042a0:	e095      	b.n	80043ce <eMBPoll+0x142>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 80042a2:	1cbb      	adds	r3, r7, #2
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 f8cf 	bl	8004448 <xMBPortEventGet>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	f040 808d 	bne.w	80043cc <eMBPoll+0x140>
    {
        switch ( eEvent )
 80042b2:	78bb      	ldrb	r3, [r7, #2]
 80042b4:	2b03      	cmp	r3, #3
 80042b6:	f200 8089 	bhi.w	80043cc <eMBPoll+0x140>
 80042ba:	a201      	add	r2, pc, #4	; (adr r2, 80042c0 <eMBPoll+0x34>)
 80042bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c0:	080043cd 	.word	0x080043cd
 80042c4:	080042d1 	.word	0x080042d1
 80042c8:	08004303 	.word	0x08004303
 80042cc:	080043cd 	.word	0x080043cd
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 80042d0:	4b42      	ldr	r3, [pc, #264]	; (80043dc <eMBPoll+0x150>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a42      	ldr	r2, [pc, #264]	; (80043e0 <eMBPoll+0x154>)
 80042d6:	4943      	ldr	r1, [pc, #268]	; (80043e4 <eMBPoll+0x158>)
 80042d8:	4843      	ldr	r0, [pc, #268]	; (80043e8 <eMBPoll+0x15c>)
 80042da:	4798      	blx	r3
 80042dc:	4603      	mov	r3, r0
 80042de:	70fb      	strb	r3, [r7, #3]
            if( eStatus == MB_ENOERR )
 80042e0:	78fb      	ldrb	r3, [r7, #3]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d16f      	bne.n	80043c6 <eMBPoll+0x13a>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 80042e6:	4b40      	ldr	r3, [pc, #256]	; (80043e8 <eMBPoll+0x15c>)
 80042e8:	781a      	ldrb	r2, [r3, #0]
 80042ea:	4b40      	ldr	r3, [pc, #256]	; (80043ec <eMBPoll+0x160>)
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d003      	beq.n	80042fa <eMBPoll+0x6e>
 80042f2:	4b3d      	ldr	r3, [pc, #244]	; (80043e8 <eMBPoll+0x15c>)
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d165      	bne.n	80043c6 <eMBPoll+0x13a>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 80042fa:	2002      	movs	r0, #2
 80042fc:	f000 f88e 	bl	800441c <xMBPortEventPost>
                }
            }
            break;
 8004300:	e061      	b.n	80043c6 <eMBPoll+0x13a>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8004302:	4b38      	ldr	r3, [pc, #224]	; (80043e4 <eMBPoll+0x158>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	781a      	ldrb	r2, [r3, #0]
 8004308:	4b39      	ldr	r3, [pc, #228]	; (80043f0 <eMBPoll+0x164>)
 800430a:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 800430c:	4b39      	ldr	r3, [pc, #228]	; (80043f4 <eMBPoll+0x168>)
 800430e:	2201      	movs	r2, #1
 8004310:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8004312:	2300      	movs	r3, #0
 8004314:	607b      	str	r3, [r7, #4]
 8004316:	e01f      	b.n	8004358 <eMBPoll+0xcc>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8004318:	4a37      	ldr	r2, [pc, #220]	; (80043f8 <eMBPoll+0x16c>)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d01d      	beq.n	8004360 <eMBPoll+0xd4>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 8004324:	4a34      	ldr	r2, [pc, #208]	; (80043f8 <eMBPoll+0x16c>)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800432c:	4b30      	ldr	r3, [pc, #192]	; (80043f0 <eMBPoll+0x164>)
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	429a      	cmp	r2, r3
 8004332:	d10e      	bne.n	8004352 <eMBPoll+0xc6>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 8004334:	4a30      	ldr	r2, [pc, #192]	; (80043f8 <eMBPoll+0x16c>)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	4413      	add	r3, r2
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	4a29      	ldr	r2, [pc, #164]	; (80043e4 <eMBPoll+0x158>)
 8004340:	6812      	ldr	r2, [r2, #0]
 8004342:	4927      	ldr	r1, [pc, #156]	; (80043e0 <eMBPoll+0x154>)
 8004344:	4610      	mov	r0, r2
 8004346:	4798      	blx	r3
 8004348:	4603      	mov	r3, r0
 800434a:	461a      	mov	r2, r3
 800434c:	4b29      	ldr	r3, [pc, #164]	; (80043f4 <eMBPoll+0x168>)
 800434e:	701a      	strb	r2, [r3, #0]
                    break;
 8004350:	e007      	b.n	8004362 <eMBPoll+0xd6>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	3301      	adds	r3, #1
 8004356:	607b      	str	r3, [r7, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b0f      	cmp	r3, #15
 800435c:	dddc      	ble.n	8004318 <eMBPoll+0x8c>
 800435e:	e000      	b.n	8004362 <eMBPoll+0xd6>
                    break;
 8004360:	bf00      	nop
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 8004362:	4b21      	ldr	r3, [pc, #132]	; (80043e8 <eMBPoll+0x15c>)
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d02f      	beq.n	80043ca <eMBPoll+0x13e>
            {
                if( eException != MB_EX_NONE )
 800436a:	4b22      	ldr	r3, [pc, #136]	; (80043f4 <eMBPoll+0x168>)
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d01d      	beq.n	80043ae <eMBPoll+0x122>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 8004372:	4b1b      	ldr	r3, [pc, #108]	; (80043e0 <eMBPoll+0x154>)
 8004374:	2200      	movs	r2, #0
 8004376:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 8004378:	4b1d      	ldr	r3, [pc, #116]	; (80043f0 <eMBPoll+0x164>)
 800437a:	781a      	ldrb	r2, [r3, #0]
 800437c:	4b19      	ldr	r3, [pc, #100]	; (80043e4 <eMBPoll+0x158>)
 800437e:	6819      	ldr	r1, [r3, #0]
 8004380:	4b17      	ldr	r3, [pc, #92]	; (80043e0 <eMBPoll+0x154>)
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	1c58      	adds	r0, r3, #1
 8004386:	b284      	uxth	r4, r0
 8004388:	4815      	ldr	r0, [pc, #84]	; (80043e0 <eMBPoll+0x154>)
 800438a:	8004      	strh	r4, [r0, #0]
 800438c:	440b      	add	r3, r1
 800438e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 8004396:	4b13      	ldr	r3, [pc, #76]	; (80043e4 <eMBPoll+0x158>)
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	4b11      	ldr	r3, [pc, #68]	; (80043e0 <eMBPoll+0x154>)
 800439c:	881b      	ldrh	r3, [r3, #0]
 800439e:	1c59      	adds	r1, r3, #1
 80043a0:	b288      	uxth	r0, r1
 80043a2:	490f      	ldr	r1, [pc, #60]	; (80043e0 <eMBPoll+0x154>)
 80043a4:	8008      	strh	r0, [r1, #0]
 80043a6:	4413      	add	r3, r2
 80043a8:	4a12      	ldr	r2, [pc, #72]	; (80043f4 <eMBPoll+0x168>)
 80043aa:	7812      	ldrb	r2, [r2, #0]
 80043ac:	701a      	strb	r2, [r3, #0]
                }
                if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
                {
                    vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
                }                
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 80043ae:	4b13      	ldr	r3, [pc, #76]	; (80043fc <eMBPoll+0x170>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a0e      	ldr	r2, [pc, #56]	; (80043ec <eMBPoll+0x160>)
 80043b4:	7810      	ldrb	r0, [r2, #0]
 80043b6:	4a0b      	ldr	r2, [pc, #44]	; (80043e4 <eMBPoll+0x158>)
 80043b8:	6811      	ldr	r1, [r2, #0]
 80043ba:	4a09      	ldr	r2, [pc, #36]	; (80043e0 <eMBPoll+0x154>)
 80043bc:	8812      	ldrh	r2, [r2, #0]
 80043be:	4798      	blx	r3
 80043c0:	4603      	mov	r3, r0
 80043c2:	70fb      	strb	r3, [r7, #3]
            }
            break;
 80043c4:	e001      	b.n	80043ca <eMBPoll+0x13e>
            break;
 80043c6:	bf00      	nop
 80043c8:	e000      	b.n	80043cc <eMBPoll+0x140>
            break;
 80043ca:	bf00      	nop

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd90      	pop	{r4, r7, pc}
 80043d6:	bf00      	nop
 80043d8:	2000000c 	.word	0x2000000c
 80043dc:	20003e94 	.word	0x20003e94
 80043e0:	20003ea4 	.word	0x20003ea4
 80043e4:	20003ea0 	.word	0x20003ea0
 80043e8:	20003e9c 	.word	0x20003e9c
 80043ec:	20003e86 	.word	0x20003e86
 80043f0:	20003ea6 	.word	0x20003ea6
 80043f4:	20003ea7 	.word	0x20003ea7
 80043f8:	20000010 	.word	0x20000010
 80043fc:	20003e88 	.word	0x20003e88

08004400 <xMBPortEventInit>:
static BOOL     xEventInQueue;

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
    xEventInQueue = FALSE;
 8004404:	4b04      	ldr	r3, [pc, #16]	; (8004418 <xMBPortEventInit+0x18>)
 8004406:	2200      	movs	r2, #0
 8004408:	701a      	strb	r2, [r3, #0]
    return TRUE;
 800440a:	2301      	movs	r3, #1
}
 800440c:	4618      	mov	r0, r3
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	20003ea9 	.word	0x20003ea9

0800441c <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	4603      	mov	r3, r0
 8004424:	71fb      	strb	r3, [r7, #7]
    xEventInQueue = TRUE;
 8004426:	4b06      	ldr	r3, [pc, #24]	; (8004440 <xMBPortEventPost+0x24>)
 8004428:	2201      	movs	r2, #1
 800442a:	701a      	strb	r2, [r3, #0]
    eQueuedEvent = eEvent;
 800442c:	4a05      	ldr	r2, [pc, #20]	; (8004444 <xMBPortEventPost+0x28>)
 800442e:	79fb      	ldrb	r3, [r7, #7]
 8004430:	7013      	strb	r3, [r2, #0]
    return TRUE;
 8004432:	2301      	movs	r3, #1
}
 8004434:	4618      	mov	r0, r3
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	20003ea9 	.word	0x20003ea9
 8004444:	20003ea8 	.word	0x20003ea8

08004448 <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
    BOOL            xEventHappened = FALSE;
 8004450:	2300      	movs	r3, #0
 8004452:	73fb      	strb	r3, [r7, #15]

    if( xEventInQueue )
 8004454:	4b09      	ldr	r3, [pc, #36]	; (800447c <xMBPortEventGet+0x34>)
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d008      	beq.n	800446e <xMBPortEventGet+0x26>
    {
        *eEvent = eQueuedEvent;
 800445c:	4b08      	ldr	r3, [pc, #32]	; (8004480 <xMBPortEventGet+0x38>)
 800445e:	781a      	ldrb	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	701a      	strb	r2, [r3, #0]
        xEventInQueue = FALSE;
 8004464:	4b05      	ldr	r3, [pc, #20]	; (800447c <xMBPortEventGet+0x34>)
 8004466:	2200      	movs	r2, #0
 8004468:	701a      	strb	r2, [r3, #0]
        xEventHappened = TRUE;
 800446a:	2301      	movs	r3, #1
 800446c:	73fb      	strb	r3, [r7, #15]
    }
    return xEventHappened;
 800446e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004470:	4618      	mov	r0, r3
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	20003ea9 	.word	0x20003ea9
 8004480:	20003ea8 	.word	0x20003ea8

08004484 <vMBPortSerialEnable>:
extern UART_HandleTypeDef huart2;
#define MB_UART huart2

void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	4603      	mov	r3, r0
 800448c:	460a      	mov	r2, r1
 800448e:	71fb      	strb	r3, [r7, #7]
 8004490:	4613      	mov	r3, r2
 8004492:	71bb      	strb	r3, [r7, #6]
    /* If xRXEnable enable serial receive interrupts. If xTxENable enable
     * transmitter empty interrupts.
     */

    if (xRxEnable)
 8004494:	79fb      	ldrb	r3, [r7, #7]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d008      	beq.n	80044ac <vMBPortSerialEnable+0x28>
	{
	__HAL_UART_ENABLE_IT(&MB_UART, UART_IT_RXNE);
 800449a:	4b15      	ldr	r3, [pc, #84]	; (80044f0 <vMBPortSerialEnable+0x6c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68da      	ldr	r2, [r3, #12]
 80044a0:	4b13      	ldr	r3, [pc, #76]	; (80044f0 <vMBPortSerialEnable+0x6c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f042 0220 	orr.w	r2, r2, #32
 80044a8:	60da      	str	r2, [r3, #12]
 80044aa:	e007      	b.n	80044bc <vMBPortSerialEnable+0x38>
	}
    else
	{
	__HAL_UART_DISABLE_IT(&MB_UART, UART_IT_RXNE);
 80044ac:	4b10      	ldr	r3, [pc, #64]	; (80044f0 <vMBPortSerialEnable+0x6c>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68da      	ldr	r2, [r3, #12]
 80044b2:	4b0f      	ldr	r3, [pc, #60]	; (80044f0 <vMBPortSerialEnable+0x6c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 0220 	bic.w	r2, r2, #32
 80044ba:	60da      	str	r2, [r3, #12]
	}

    if (xTxEnable)
 80044bc:	79bb      	ldrb	r3, [r7, #6]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d008      	beq.n	80044d4 <vMBPortSerialEnable+0x50>
	{
	__HAL_UART_ENABLE_IT(&MB_UART, UART_IT_TXE);
 80044c2:	4b0b      	ldr	r3, [pc, #44]	; (80044f0 <vMBPortSerialEnable+0x6c>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68da      	ldr	r2, [r3, #12]
 80044c8:	4b09      	ldr	r3, [pc, #36]	; (80044f0 <vMBPortSerialEnable+0x6c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044d0:	60da      	str	r2, [r3, #12]
	}
    else
	{
	__HAL_UART_DISABLE_IT(&MB_UART, UART_IT_TXE);
	}
}
 80044d2:	e007      	b.n	80044e4 <vMBPortSerialEnable+0x60>
	__HAL_UART_DISABLE_IT(&MB_UART, UART_IT_TXE);
 80044d4:	4b06      	ldr	r3, [pc, #24]	; (80044f0 <vMBPortSerialEnable+0x6c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68da      	ldr	r2, [r3, #12]
 80044da:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <vMBPortSerialEnable+0x6c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044e2:	60da      	str	r2, [r3, #12]
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	200047d4 	.word	0x200047d4

080044f4 <xMBPortSerialInit>:

BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6039      	str	r1, [r7, #0]
 80044fc:	4611      	mov	r1, r2
 80044fe:	461a      	mov	r2, r3
 8004500:	4603      	mov	r3, r0
 8004502:	71fb      	strb	r3, [r7, #7]
 8004504:	460b      	mov	r3, r1
 8004506:	71bb      	strb	r3, [r7, #6]
 8004508:	4613      	mov	r3, r2
 800450a:	717b      	strb	r3, [r7, #5]
    /* Configured in cube, see usart.c */
    return TRUE;
 800450c:	2301      	movs	r3, #1
}
 800450e:	4618      	mov	r0, r3
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
	...

0800451c <xMBPortSerialPutByte>:

BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	4603      	mov	r3, r0
 8004524:	71fb      	strb	r3, [r7, #7]
    /* Put a byte in the UARTs transmit buffer. This function is called
     * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
     * called. */
    return (HAL_UART_Transmit(&huart2, (uint8_t*)&ucByte, 1, 10) == HAL_OK);
 8004526:	1df9      	adds	r1, r7, #7
 8004528:	230a      	movs	r3, #10
 800452a:	2201      	movs	r2, #1
 800452c:	4806      	ldr	r0, [pc, #24]	; (8004548 <xMBPortSerialPutByte+0x2c>)
 800452e:	f7fd f9ee 	bl	800190e <HAL_UART_Transmit>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	bf0c      	ite	eq
 8004538:	2301      	moveq	r3, #1
 800453a:	2300      	movne	r3, #0
 800453c:	b2db      	uxtb	r3, r3
}
 800453e:	4618      	mov	r0, r3
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	200047d4 	.word	0x200047d4

0800454c <xMBPortSerialGetByte>:

BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
    /* Return the byte in the UARTs receive buffer. This function is called
     * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
     */
    return (HAL_UART_Receive(&huart2, (uint8_t*)pucByte, 1, 10) == HAL_OK);
 8004554:	230a      	movs	r3, #10
 8004556:	2201      	movs	r2, #1
 8004558:	6879      	ldr	r1, [r7, #4]
 800455a:	4806      	ldr	r0, [pc, #24]	; (8004574 <xMBPortSerialGetByte+0x28>)
 800455c:	f7fd fa70 	bl	8001a40 <HAL_UART_Receive>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	bf0c      	ite	eq
 8004566:	2301      	moveq	r3, #1
 8004568:	2300      	movne	r3, #0
 800456a:	b2db      	uxtb	r3, r3
}
 800456c:	4618      	mov	r0, r3
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	200047d4 	.word	0x200047d4

08004578 <MB_UART_TX_ISR>:
 * call pxMBFrameCBTransmitterEmpty( ) which tells the protocol stack that
 * a new character can be sent. The protocol stack will then call 
 * xMBPortSerialPutByte( ) to send the character.
 */
void MB_UART_TX_ISR( void )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
    pxMBFrameCBTransmitterEmpty(  );
 800457c:	4b02      	ldr	r3, [pc, #8]	; (8004588 <MB_UART_TX_ISR+0x10>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4798      	blx	r3
}
 8004582:	bf00      	nop
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	20004224 	.word	0x20004224

0800458c <MB_UART_RX_ISR>:
 * processor. This function should then call pxMBFrameCBByteReceived( ). The
 * protocol stack will then call xMBPortSerialGetByte( ) to retrieve the
 * character.
 */
void MB_UART_RX_ISR( void )
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
    pxMBFrameCBByteReceived(  );
 8004590:	4b02      	ldr	r3, [pc, #8]	; (800459c <MB_UART_RX_ISR+0x10>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4798      	blx	r3
}
 8004596:	bf00      	nop
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	2000422c 	.word	0x2000422c

080045a0 <xMBPortTimersInit>:

#define MB_Timer htim11

BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	4603      	mov	r3, r0
 80045a8:	80fb      	strh	r3, [r7, #6]
    /* Configured in cube, see tim.c */
    return TRUE;
 80045aa:	2301      	movs	r3, #1
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <vMBPortTimersEnable>:


void
vMBPortTimersEnable(  )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0
    /* Enable the timer with the timeout passed to xMBPortTimersInit( ) */
    /* RESET TIMER */
    MB_Timer.Instance->CNT = 0;
 80045bc:	4b04      	ldr	r3, [pc, #16]	; (80045d0 <vMBPortTimersEnable+0x18>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2200      	movs	r2, #0
 80045c2:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_TIM_Base_Start_IT(&MB_Timer);
 80045c4:	4802      	ldr	r0, [pc, #8]	; (80045d0 <vMBPortTimersEnable+0x18>)
 80045c6:	f7fc ff38 	bl	800143a <HAL_TIM_Base_Start_IT>
}
 80045ca:	bf00      	nop
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	20004794 	.word	0x20004794

080045d4 <vMBPortTimersDisable>:

void
vMBPortTimersDisable(  )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
    /* Disable any pending timers. */
    HAL_TIM_Base_Stop_IT(&MB_Timer);
 80045d8:	4802      	ldr	r0, [pc, #8]	; (80045e4 <vMBPortTimersDisable+0x10>)
 80045da:	f7fc ff52 	bl	8001482 <HAL_TIM_Base_Stop_IT>
}
 80045de:	bf00      	nop
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	20004794 	.word	0x20004794

080045e8 <MB_Timer_ISR>:
/* Create an ISR which is called whenever the timer has expired. This function
 * must then call pxMBPortCBTimerExpired( ) to notify the protocol stack that
 * the timer has expired.
 */
void MB_Timer_ISR( void )
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
    ( void )pxMBPortCBTimerExpired(  );
 80045ec:	4b02      	ldr	r3, [pc, #8]	; (80045f8 <MB_Timer_ISR+0x10>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4798      	blx	r3
}
 80045f2:	bf00      	nop
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	20004228 	.word	0x20004228

080045fc <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	460b      	mov	r3, r1
 8004606:	807b      	strh	r3, [r7, #2]
    UCHAR           ucCRCHi = 0xFF;
 8004608:	23ff      	movs	r3, #255	; 0xff
 800460a:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucCRCLo = 0xFF;
 800460c:	23ff      	movs	r3, #255	; 0xff
 800460e:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 8004610:	e013      	b.n	800463a <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	1c5a      	adds	r2, r3, #1
 8004616:	607a      	str	r2, [r7, #4]
 8004618:	781a      	ldrb	r2, [r3, #0]
 800461a:	7bbb      	ldrb	r3, [r7, #14]
 800461c:	4053      	eors	r3, r2
 800461e:	b2db      	uxtb	r3, r3
 8004620:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 8004622:	4a0f      	ldr	r2, [pc, #60]	; (8004660 <usMBCRC16+0x64>)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	4413      	add	r3, r2
 8004628:	781a      	ldrb	r2, [r3, #0]
 800462a:	7bfb      	ldrb	r3, [r7, #15]
 800462c:	4053      	eors	r3, r2
 800462e:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 8004630:	4a0c      	ldr	r2, [pc, #48]	; (8004664 <usMBCRC16+0x68>)
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	4413      	add	r3, r2
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 800463a:	887b      	ldrh	r3, [r7, #2]
 800463c:	1e5a      	subs	r2, r3, #1
 800463e:	807a      	strh	r2, [r7, #2]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1e6      	bne.n	8004612 <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 8004644:	7bfb      	ldrb	r3, [r7, #15]
 8004646:	021b      	lsls	r3, r3, #8
 8004648:	b21a      	sxth	r2, r3
 800464a:	7bbb      	ldrb	r3, [r7, #14]
 800464c:	b21b      	sxth	r3, r3
 800464e:	4313      	orrs	r3, r2
 8004650:	b21b      	sxth	r3, r3
 8004652:	b29b      	uxth	r3, r3
}
 8004654:	4618      	mov	r0, r3
 8004656:	3714      	adds	r7, #20
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	080063f8 	.word	0x080063f8
 8004664:	080064f8 	.word	0x080064f8

08004668 <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	603a      	str	r2, [r7, #0]
 8004670:	461a      	mov	r2, r3
 8004672:	4603      	mov	r3, r0
 8004674:	71fb      	strb	r3, [r7, #7]
 8004676:	460b      	mov	r3, r1
 8004678:	71bb      	strb	r3, [r7, #6]
 800467a:	4613      	mov	r3, r2
 800467c:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 800467e:	2300      	movs	r3, #0
 8004680:	73fb      	strb	r3, [r7, #15]
    ULONG           usTimerT35_50us;

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );
 8004682:	f7fe feab 	bl	80033dc <vPortEnterCritical>

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 8004686:	797b      	ldrb	r3, [r7, #5]
 8004688:	79b8      	ldrb	r0, [r7, #6]
 800468a:	2208      	movs	r2, #8
 800468c:	6839      	ldr	r1, [r7, #0]
 800468e:	f7ff ff31 	bl	80044f4 <xMBPortSerialInit>
 8004692:	4603      	mov	r3, r0
 8004694:	2b01      	cmp	r3, #1
 8004696:	d002      	beq.n	800469e <eMBRTUInit+0x36>
    {
        eStatus = MB_EPORTERR;
 8004698:	2303      	movs	r3, #3
 800469a:	73fb      	strb	r3, [r7, #15]
 800469c:	e016      	b.n	80046cc <eMBRTUInit+0x64>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 80046a4:	d902      	bls.n	80046ac <eMBRTUInit+0x44>
        {
            usTimerT35_50us = 35;       /* 1800us. */
 80046a6:	2323      	movs	r3, #35	; 0x23
 80046a8:	60bb      	str	r3, [r7, #8]
 80046aa:	e005      	b.n	80046b8 <eMBRTUInit+0x50>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	4a0a      	ldr	r2, [pc, #40]	; (80046dc <eMBRTUInit+0x74>)
 80046b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b6:	60bb      	str	r3, [r7, #8]
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff ff6f 	bl	80045a0 <xMBPortTimersInit>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d001      	beq.n	80046cc <eMBRTUInit+0x64>
        {
            eStatus = MB_EPORTERR;
 80046c8:	2303      	movs	r3, #3
 80046ca:	73fb      	strb	r3, [r7, #15]
        }
    }
    EXIT_CRITICAL_SECTION(  );
 80046cc:	f7fe feb4 	bl	8003438 <vPortExitCritical>

    return eStatus;
 80046d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	00177fa0 	.word	0x00177fa0

080046e0 <eMBRTUStart>:

void
eMBRTUStart( void )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 80046e4:	f7fe fe7a 	bl	80033dc <vPortEnterCritical>
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 80046e8:	4b06      	ldr	r3, [pc, #24]	; (8004704 <eMBRTUStart+0x24>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	701a      	strb	r2, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 80046ee:	2100      	movs	r1, #0
 80046f0:	2001      	movs	r0, #1
 80046f2:	f7ff fec7 	bl	8004484 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 80046f6:	f7ff ff5f 	bl	80045b8 <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
 80046fa:	f7fe fe9d 	bl	8003438 <vPortExitCritical>
}
 80046fe:	bf00      	nop
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	20003eab 	.word	0x20003eab

08004708 <eMBRTUStop>:

void
eMBRTUStop( void )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 800470c:	f7fe fe66 	bl	80033dc <vPortEnterCritical>
    vMBPortSerialEnable( FALSE, FALSE );
 8004710:	2100      	movs	r1, #0
 8004712:	2000      	movs	r0, #0
 8004714:	f7ff feb6 	bl	8004484 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 8004718:	f7ff ff5c 	bl	80045d4 <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
 800471c:	f7fe fe8c 	bl	8003438 <vPortExitCritical>
}
 8004720:	bf00      	nop
 8004722:	bd80      	pop	{r7, pc}

08004724 <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
    BOOL            xFrameReceived = FALSE;
 8004730:	2300      	movs	r3, #0
 8004732:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eStatus = MB_ENOERR;
 8004734:	2300      	movs	r3, #0
 8004736:	75fb      	strb	r3, [r7, #23]

    ENTER_CRITICAL_SECTION(  );
 8004738:	f7fe fe50 	bl	80033dc <vPortEnterCritical>
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 800473c:	4b1a      	ldr	r3, [pc, #104]	; (80047a8 <eMBRTUReceive+0x84>)
 800473e:	881b      	ldrh	r3, [r3, #0]
 8004740:	b29b      	uxth	r3, r3
 8004742:	2bff      	cmp	r3, #255	; 0xff
 8004744:	d905      	bls.n	8004752 <eMBRTUReceive+0x2e>
 8004746:	4b19      	ldr	r3, [pc, #100]	; (80047ac <eMBRTUReceive+0x88>)
 8004748:	4a19      	ldr	r2, [pc, #100]	; (80047b0 <eMBRTUReceive+0x8c>)
 800474a:	219c      	movs	r1, #156	; 0x9c
 800474c:	4819      	ldr	r0, [pc, #100]	; (80047b4 <eMBRTUReceive+0x90>)
 800474e:	f000 fe2d 	bl	80053ac <__assert_func>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 8004752:	4b15      	ldr	r3, [pc, #84]	; (80047a8 <eMBRTUReceive+0x84>)
 8004754:	881b      	ldrh	r3, [r3, #0]
 8004756:	b29b      	uxth	r3, r3
 8004758:	2b03      	cmp	r3, #3
 800475a:	d91b      	bls.n	8004794 <eMBRTUReceive+0x70>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 800475c:	4b12      	ldr	r3, [pc, #72]	; (80047a8 <eMBRTUReceive+0x84>)
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	b29b      	uxth	r3, r3
 8004762:	4619      	mov	r1, r3
 8004764:	4814      	ldr	r0, [pc, #80]	; (80047b8 <eMBRTUReceive+0x94>)
 8004766:	f7ff ff49 	bl	80045fc <usMBCRC16>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d111      	bne.n	8004794 <eMBRTUReceive+0x70>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 8004770:	4b11      	ldr	r3, [pc, #68]	; (80047b8 <eMBRTUReceive+0x94>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	b2da      	uxtb	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 800477a:	4b0b      	ldr	r3, [pc, #44]	; (80047a8 <eMBRTUReceive+0x84>)
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	b29b      	uxth	r3, r3
 8004780:	3b03      	subs	r3, #3
 8004782:	b29a      	uxth	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	4a0c      	ldr	r2, [pc, #48]	; (80047bc <eMBRTUReceive+0x98>)
 800478c:	601a      	str	r2, [r3, #0]
        xFrameReceived = TRUE;
 800478e:	2301      	movs	r3, #1
 8004790:	75bb      	strb	r3, [r7, #22]
 8004792:	e001      	b.n	8004798 <eMBRTUReceive+0x74>
    }
    else
    {
        eStatus = MB_EIO;
 8004794:	2305      	movs	r3, #5
 8004796:	75fb      	strb	r3, [r7, #23]
    }

    EXIT_CRITICAL_SECTION(  );
 8004798:	f7fe fe4e 	bl	8003438 <vPortExitCritical>
    return eStatus;
 800479c:	7dfb      	ldrb	r3, [r7, #23]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	20003eb2 	.word	0x20003eb2
 80047ac:	080062d4 	.word	0x080062d4
 80047b0:	080065f8 	.word	0x080065f8
 80047b4:	080062fc 	.word	0x080062fc
 80047b8:	20004238 	.word	0x20004238
 80047bc:	20004239 	.word	0x20004239

080047c0 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	4603      	mov	r3, r0
 80047c8:	6039      	str	r1, [r7, #0]
 80047ca:	71fb      	strb	r3, [r7, #7]
 80047cc:	4613      	mov	r3, r2
 80047ce:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 80047d0:	2300      	movs	r3, #0
 80047d2:	73fb      	strb	r3, [r7, #15]
    USHORT          usCRC16;

    ENTER_CRITICAL_SECTION(  );
 80047d4:	f7fe fe02 	bl	80033dc <vPortEnterCritical>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 80047d8:	4b26      	ldr	r3, [pc, #152]	; (8004874 <eMBRTUSend+0xb4>)
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d13f      	bne.n	8004862 <eMBRTUSend+0xa2>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	3b01      	subs	r3, #1
 80047e6:	4a24      	ldr	r2, [pc, #144]	; (8004878 <eMBRTUSend+0xb8>)
 80047e8:	6013      	str	r3, [r2, #0]
        usSndBufferCount = 1;
 80047ea:	4b24      	ldr	r3, [pc, #144]	; (800487c <eMBRTUSend+0xbc>)
 80047ec:	2201      	movs	r2, #1
 80047ee:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 80047f0:	4b21      	ldr	r3, [pc, #132]	; (8004878 <eMBRTUSend+0xb8>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	79fa      	ldrb	r2, [r7, #7]
 80047f6:	701a      	strb	r2, [r3, #0]
        usSndBufferCount += usLength;
 80047f8:	4b20      	ldr	r3, [pc, #128]	; (800487c <eMBRTUSend+0xbc>)
 80047fa:	881b      	ldrh	r3, [r3, #0]
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	88bb      	ldrh	r3, [r7, #4]
 8004800:	4413      	add	r3, r2
 8004802:	b29a      	uxth	r2, r3
 8004804:	4b1d      	ldr	r3, [pc, #116]	; (800487c <eMBRTUSend+0xbc>)
 8004806:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 8004808:	4b1b      	ldr	r3, [pc, #108]	; (8004878 <eMBRTUSend+0xb8>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	4b1b      	ldr	r3, [pc, #108]	; (800487c <eMBRTUSend+0xbc>)
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	b29b      	uxth	r3, r3
 8004812:	4619      	mov	r1, r3
 8004814:	4610      	mov	r0, r2
 8004816:	f7ff fef1 	bl	80045fc <usMBCRC16>
 800481a:	4603      	mov	r3, r0
 800481c:	81bb      	strh	r3, [r7, #12]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 800481e:	4b17      	ldr	r3, [pc, #92]	; (800487c <eMBRTUSend+0xbc>)
 8004820:	881b      	ldrh	r3, [r3, #0]
 8004822:	b29b      	uxth	r3, r3
 8004824:	1c5a      	adds	r2, r3, #1
 8004826:	b291      	uxth	r1, r2
 8004828:	4a14      	ldr	r2, [pc, #80]	; (800487c <eMBRTUSend+0xbc>)
 800482a:	8011      	strh	r1, [r2, #0]
 800482c:	461a      	mov	r2, r3
 800482e:	89bb      	ldrh	r3, [r7, #12]
 8004830:	b2d9      	uxtb	r1, r3
 8004832:	4b13      	ldr	r3, [pc, #76]	; (8004880 <eMBRTUSend+0xc0>)
 8004834:	5499      	strb	r1, [r3, r2]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 8004836:	89bb      	ldrh	r3, [r7, #12]
 8004838:	0a1b      	lsrs	r3, r3, #8
 800483a:	b299      	uxth	r1, r3
 800483c:	4b0f      	ldr	r3, [pc, #60]	; (800487c <eMBRTUSend+0xbc>)
 800483e:	881b      	ldrh	r3, [r3, #0]
 8004840:	b29b      	uxth	r3, r3
 8004842:	1c5a      	adds	r2, r3, #1
 8004844:	b290      	uxth	r0, r2
 8004846:	4a0d      	ldr	r2, [pc, #52]	; (800487c <eMBRTUSend+0xbc>)
 8004848:	8010      	strh	r0, [r2, #0]
 800484a:	461a      	mov	r2, r3
 800484c:	b2c9      	uxtb	r1, r1
 800484e:	4b0c      	ldr	r3, [pc, #48]	; (8004880 <eMBRTUSend+0xc0>)
 8004850:	5499      	strb	r1, [r3, r2]

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 8004852:	4b0c      	ldr	r3, [pc, #48]	; (8004884 <eMBRTUSend+0xc4>)
 8004854:	2201      	movs	r2, #1
 8004856:	701a      	strb	r2, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );
 8004858:	2101      	movs	r1, #1
 800485a:	2000      	movs	r0, #0
 800485c:	f7ff fe12 	bl	8004484 <vMBPortSerialEnable>
 8004860:	e001      	b.n	8004866 <eMBRTUSend+0xa6>
    }
    else
    {
        eStatus = MB_EIO;
 8004862:	2305      	movs	r3, #5
 8004864:	73fb      	strb	r3, [r7, #15]
    }
    EXIT_CRITICAL_SECTION(  );
 8004866:	f7fe fde7 	bl	8003438 <vPortExitCritical>
    return eStatus;
 800486a:	7bfb      	ldrb	r3, [r7, #15]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	20003eab 	.word	0x20003eab
 8004878:	20003eac 	.word	0x20003eac
 800487c:	20003eb0 	.word	0x20003eb0
 8004880:	20004238 	.word	0x20004238
 8004884:	20003eaa 	.word	0x20003eaa

08004888 <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 800488e:	2300      	movs	r3, #0
 8004890:	71fb      	strb	r3, [r7, #7]
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 8004892:	4b2a      	ldr	r3, [pc, #168]	; (800493c <xMBRTUReceiveFSM+0xb4>)
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	d005      	beq.n	80048a8 <xMBRTUReceiveFSM+0x20>
 800489c:	4b28      	ldr	r3, [pc, #160]	; (8004940 <xMBRTUReceiveFSM+0xb8>)
 800489e:	4a29      	ldr	r2, [pc, #164]	; (8004944 <xMBRTUReceiveFSM+0xbc>)
 80048a0:	21e6      	movs	r1, #230	; 0xe6
 80048a2:	4829      	ldr	r0, [pc, #164]	; (8004948 <xMBRTUReceiveFSM+0xc0>)
 80048a4:	f000 fd82 	bl	80053ac <__assert_func>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 80048a8:	1dbb      	adds	r3, r7, #6
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff fe4e 	bl	800454c <xMBPortSerialGetByte>

    switch ( eRcvState )
 80048b0:	4b26      	ldr	r3, [pc, #152]	; (800494c <xMBRTUReceiveFSM+0xc4>)
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b03      	cmp	r3, #3
 80048b8:	d83b      	bhi.n	8004932 <xMBRTUReceiveFSM+0xaa>
 80048ba:	a201      	add	r2, pc, #4	; (adr r2, 80048c0 <xMBRTUReceiveFSM+0x38>)
 80048bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c0:	080048d1 	.word	0x080048d1
 80048c4:	080048dd 	.word	0x080048dd
 80048c8:	08004905 	.word	0x08004905
 80048cc:	080048d7 	.word	0x080048d7
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable(  );
 80048d0:	f7ff fe72 	bl	80045b8 <vMBPortTimersEnable>
        break;
 80048d4:	e02d      	b.n	8004932 <xMBRTUReceiveFSM+0xaa>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable(  );
 80048d6:	f7ff fe6f 	bl	80045b8 <vMBPortTimersEnable>
        break;
 80048da:	e02a      	b.n	8004932 <xMBRTUReceiveFSM+0xaa>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 80048dc:	4b1c      	ldr	r3, [pc, #112]	; (8004950 <xMBRTUReceiveFSM+0xc8>)
 80048de:	2200      	movs	r2, #0
 80048e0:	801a      	strh	r2, [r3, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 80048e2:	4b1b      	ldr	r3, [pc, #108]	; (8004950 <xMBRTUReceiveFSM+0xc8>)
 80048e4:	881b      	ldrh	r3, [r3, #0]
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	1c5a      	adds	r2, r3, #1
 80048ea:	b291      	uxth	r1, r2
 80048ec:	4a18      	ldr	r2, [pc, #96]	; (8004950 <xMBRTUReceiveFSM+0xc8>)
 80048ee:	8011      	strh	r1, [r2, #0]
 80048f0:	461a      	mov	r2, r3
 80048f2:	79b9      	ldrb	r1, [r7, #6]
 80048f4:	4b17      	ldr	r3, [pc, #92]	; (8004954 <xMBRTUReceiveFSM+0xcc>)
 80048f6:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_RX_RCV;
 80048f8:	4b14      	ldr	r3, [pc, #80]	; (800494c <xMBRTUReceiveFSM+0xc4>)
 80048fa:	2202      	movs	r2, #2
 80048fc:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
 80048fe:	f7ff fe5b 	bl	80045b8 <vMBPortTimersEnable>
        break;
 8004902:	e016      	b.n	8004932 <xMBRTUReceiveFSM+0xaa>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 8004904:	4b12      	ldr	r3, [pc, #72]	; (8004950 <xMBRTUReceiveFSM+0xc8>)
 8004906:	881b      	ldrh	r3, [r3, #0]
 8004908:	b29b      	uxth	r3, r3
 800490a:	2bff      	cmp	r3, #255	; 0xff
 800490c:	d80b      	bhi.n	8004926 <xMBRTUReceiveFSM+0x9e>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 800490e:	4b10      	ldr	r3, [pc, #64]	; (8004950 <xMBRTUReceiveFSM+0xc8>)
 8004910:	881b      	ldrh	r3, [r3, #0]
 8004912:	b29b      	uxth	r3, r3
 8004914:	1c5a      	adds	r2, r3, #1
 8004916:	b291      	uxth	r1, r2
 8004918:	4a0d      	ldr	r2, [pc, #52]	; (8004950 <xMBRTUReceiveFSM+0xc8>)
 800491a:	8011      	strh	r1, [r2, #0]
 800491c:	461a      	mov	r2, r3
 800491e:	79b9      	ldrb	r1, [r7, #6]
 8004920:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <xMBRTUReceiveFSM+0xcc>)
 8004922:	5499      	strb	r1, [r3, r2]
 8004924:	e002      	b.n	800492c <xMBRTUReceiveFSM+0xa4>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 8004926:	4b09      	ldr	r3, [pc, #36]	; (800494c <xMBRTUReceiveFSM+0xc4>)
 8004928:	2203      	movs	r2, #3
 800492a:	701a      	strb	r2, [r3, #0]
        }
        vMBPortTimersEnable(  );
 800492c:	f7ff fe44 	bl	80045b8 <vMBPortTimersEnable>
        break;
 8004930:	bf00      	nop
    }
    return xTaskNeedSwitch;
 8004932:	79fb      	ldrb	r3, [r7, #7]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	20003eaa 	.word	0x20003eaa
 8004940:	0800632c 	.word	0x0800632c
 8004944:	08006608 	.word	0x08006608
 8004948:	080062fc 	.word	0x080062fc
 800494c:	20003eab 	.word	0x20003eab
 8004950:	20003eb2 	.word	0x20003eb2
 8004954:	20004238 	.word	0x20004238

08004958 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 800495e:	2300      	movs	r3, #0
 8004960:	71fb      	strb	r3, [r7, #7]

    assert( eRcvState == STATE_RX_IDLE );
 8004962:	4b22      	ldr	r3, [pc, #136]	; (80049ec <xMBRTUTransmitFSM+0x94>)
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b01      	cmp	r3, #1
 800496a:	d006      	beq.n	800497a <xMBRTUTransmitFSM+0x22>
 800496c:	4b20      	ldr	r3, [pc, #128]	; (80049f0 <xMBRTUTransmitFSM+0x98>)
 800496e:	4a21      	ldr	r2, [pc, #132]	; (80049f4 <xMBRTUTransmitFSM+0x9c>)
 8004970:	f240 1121 	movw	r1, #289	; 0x121
 8004974:	4820      	ldr	r0, [pc, #128]	; (80049f8 <xMBRTUTransmitFSM+0xa0>)
 8004976:	f000 fd19 	bl	80053ac <__assert_func>

    switch ( eSndState )
 800497a:	4b20      	ldr	r3, [pc, #128]	; (80049fc <xMBRTUTransmitFSM+0xa4>)
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	d002      	beq.n	800498a <xMBRTUTransmitFSM+0x32>
 8004984:	2b01      	cmp	r3, #1
 8004986:	d005      	beq.n	8004994 <xMBRTUTransmitFSM+0x3c>
 8004988:	e02a      	b.n	80049e0 <xMBRTUTransmitFSM+0x88>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 800498a:	2100      	movs	r1, #0
 800498c:	2001      	movs	r0, #1
 800498e:	f7ff fd79 	bl	8004484 <vMBPortSerialEnable>
        break;
 8004992:	e025      	b.n	80049e0 <xMBRTUTransmitFSM+0x88>

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 8004994:	4b1a      	ldr	r3, [pc, #104]	; (8004a00 <xMBRTUTransmitFSM+0xa8>)
 8004996:	881b      	ldrh	r3, [r3, #0]
 8004998:	b29b      	uxth	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d013      	beq.n	80049c6 <xMBRTUTransmitFSM+0x6e>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 800499e:	4b19      	ldr	r3, [pc, #100]	; (8004a04 <xMBRTUTransmitFSM+0xac>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff fdb8 	bl	800451c <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 80049ac:	4b15      	ldr	r3, [pc, #84]	; (8004a04 <xMBRTUTransmitFSM+0xac>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	3301      	adds	r3, #1
 80049b2:	4a14      	ldr	r2, [pc, #80]	; (8004a04 <xMBRTUTransmitFSM+0xac>)
 80049b4:	6013      	str	r3, [r2, #0]
            usSndBufferCount--;
 80049b6:	4b12      	ldr	r3, [pc, #72]	; (8004a00 <xMBRTUTransmitFSM+0xa8>)
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	4b0f      	ldr	r3, [pc, #60]	; (8004a00 <xMBRTUTransmitFSM+0xa8>)
 80049c2:	801a      	strh	r2, [r3, #0]
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
            eSndState = STATE_TX_IDLE;
        }
        break;
 80049c4:	e00b      	b.n	80049de <xMBRTUTransmitFSM+0x86>
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 80049c6:	2003      	movs	r0, #3
 80049c8:	f7ff fd28 	bl	800441c <xMBPortEventPost>
 80049cc:	4603      	mov	r3, r0
 80049ce:	71fb      	strb	r3, [r7, #7]
            vMBPortSerialEnable( TRUE, FALSE );
 80049d0:	2100      	movs	r1, #0
 80049d2:	2001      	movs	r0, #1
 80049d4:	f7ff fd56 	bl	8004484 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 80049d8:	4b08      	ldr	r3, [pc, #32]	; (80049fc <xMBRTUTransmitFSM+0xa4>)
 80049da:	2200      	movs	r2, #0
 80049dc:	701a      	strb	r2, [r3, #0]
        break;
 80049de:	bf00      	nop
    }

    return xNeedPoll;
 80049e0:	79fb      	ldrb	r3, [r7, #7]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	20003eab 	.word	0x20003eab
 80049f0:	08006348 	.word	0x08006348
 80049f4:	0800661c 	.word	0x0800661c
 80049f8:	080062fc 	.word	0x080062fc
 80049fc:	20003eaa 	.word	0x20003eaa
 8004a00:	20003eb0 	.word	0x20003eb0
 8004a04:	20003eac 	.word	0x20003eac

08004a08 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	71fb      	strb	r3, [r7, #7]

    switch ( eRcvState )
 8004a12:	4b1b      	ldr	r3, [pc, #108]	; (8004a80 <xMBRTUTimerT35Expired+0x78>)
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d009      	beq.n	8004a30 <xMBRTUTimerT35Expired+0x28>
 8004a1c:	2b03      	cmp	r3, #3
 8004a1e:	d023      	beq.n	8004a68 <xMBRTUTimerT35Expired+0x60>
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10b      	bne.n	8004a3c <xMBRTUTimerT35Expired+0x34>
    {
        /* Timer t35 expired. Startup phase is finished. */
    case STATE_RX_INIT:
        xNeedPoll = xMBPortEventPost( EV_READY );
 8004a24:	2000      	movs	r0, #0
 8004a26:	f7ff fcf9 	bl	800441c <xMBPortEventPost>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	71fb      	strb	r3, [r7, #7]
        break;
 8004a2e:	e01c      	b.n	8004a6a <xMBRTUTimerT35Expired+0x62>

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 8004a30:	2001      	movs	r0, #1
 8004a32:	f7ff fcf3 	bl	800441c <xMBPortEventPost>
 8004a36:	4603      	mov	r3, r0
 8004a38:	71fb      	strb	r3, [r7, #7]
        break;
 8004a3a:	e016      	b.n	8004a6a <xMBRTUTimerT35Expired+0x62>
    case STATE_RX_ERROR:
        break;

        /* Function called in an illegal state. */
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
 8004a3c:	4b10      	ldr	r3, [pc, #64]	; (8004a80 <xMBRTUTimerT35Expired+0x78>)
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d011      	beq.n	8004a6a <xMBRTUTimerT35Expired+0x62>
 8004a46:	4b0e      	ldr	r3, [pc, #56]	; (8004a80 <xMBRTUTimerT35Expired+0x78>)
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d00c      	beq.n	8004a6a <xMBRTUTimerT35Expired+0x62>
 8004a50:	4b0b      	ldr	r3, [pc, #44]	; (8004a80 <xMBRTUTimerT35Expired+0x78>)
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b03      	cmp	r3, #3
 8004a58:	d007      	beq.n	8004a6a <xMBRTUTimerT35Expired+0x62>
 8004a5a:	4b0a      	ldr	r3, [pc, #40]	; (8004a84 <xMBRTUTimerT35Expired+0x7c>)
 8004a5c:	4a0a      	ldr	r2, [pc, #40]	; (8004a88 <xMBRTUTimerT35Expired+0x80>)
 8004a5e:	f240 115b 	movw	r1, #347	; 0x15b
 8004a62:	480a      	ldr	r0, [pc, #40]	; (8004a8c <xMBRTUTimerT35Expired+0x84>)
 8004a64:	f000 fca2 	bl	80053ac <__assert_func>
        break;
 8004a68:	bf00      	nop
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 8004a6a:	f7ff fdb3 	bl	80045d4 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 8004a6e:	4b04      	ldr	r3, [pc, #16]	; (8004a80 <xMBRTUTimerT35Expired+0x78>)
 8004a70:	2201      	movs	r2, #1
 8004a72:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
 8004a74:	79fb      	ldrb	r3, [r7, #7]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	20003eab 	.word	0x20003eab
 8004a84:	08006364 	.word	0x08006364
 8004a88:	08006630 	.word	0x08006630
 8004a8c:	080062fc 	.word	0x080062fc

08004a90 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4a07      	ldr	r2, [pc, #28]	; (8004abc <vApplicationGetIdleTaskMemory+0x2c>)
 8004aa0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	4a06      	ldr	r2, [pc, #24]	; (8004ac0 <vApplicationGetIdleTaskMemory+0x30>)
 8004aa6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2280      	movs	r2, #128	; 0x80
 8004aac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8004aae:	bf00      	nop
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	20003eb4 	.word	0x20003eb4
 8004ac0:	20003f08 	.word	0x20003f08

08004ac4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8004ac4:	b5b0      	push	{r4, r5, r7, lr}
 8004ac6:	b088      	sub	sp, #32
 8004ac8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8004aca:	4b0a      	ldr	r3, [pc, #40]	; (8004af4 <MX_FREERTOS_Init+0x30>)
 8004acc:	1d3c      	adds	r4, r7, #4
 8004ace:	461d      	mov	r5, r3
 8004ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ad4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004ad8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004adc:	1d3b      	adds	r3, r7, #4
 8004ade:	2100      	movs	r1, #0
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7fd fd02 	bl	80024ea <osThreadCreate>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	4b03      	ldr	r3, [pc, #12]	; (8004af8 <MX_FREERTOS_Init+0x34>)
 8004aea:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8004aec:	bf00      	nop
 8004aee:	3720      	adds	r7, #32
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bdb0      	pop	{r4, r5, r7, pc}
 8004af4:	080063d4 	.word	0x080063d4
 8004af8:	20004338 	.word	0x20004338

08004afc <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8004b04:	2001      	movs	r0, #1
 8004b06:	f7fd fd3c 	bl	8002582 <osDelay>
 8004b0a:	e7fb      	b.n	8004b04 <StartDefaultTask+0x8>

08004b0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b12:	2300      	movs	r3, #0
 8004b14:	607b      	str	r3, [r7, #4]
 8004b16:	4b10      	ldr	r3, [pc, #64]	; (8004b58 <MX_GPIO_Init+0x4c>)
 8004b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1a:	4a0f      	ldr	r2, [pc, #60]	; (8004b58 <MX_GPIO_Init+0x4c>)
 8004b1c:	f043 0304 	orr.w	r3, r3, #4
 8004b20:	6313      	str	r3, [r2, #48]	; 0x30
 8004b22:	4b0d      	ldr	r3, [pc, #52]	; (8004b58 <MX_GPIO_Init+0x4c>)
 8004b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b26:	f003 0304 	and.w	r3, r3, #4
 8004b2a:	607b      	str	r3, [r7, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b2e:	2300      	movs	r3, #0
 8004b30:	603b      	str	r3, [r7, #0]
 8004b32:	4b09      	ldr	r3, [pc, #36]	; (8004b58 <MX_GPIO_Init+0x4c>)
 8004b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b36:	4a08      	ldr	r2, [pc, #32]	; (8004b58 <MX_GPIO_Init+0x4c>)
 8004b38:	f043 0301 	orr.w	r3, r3, #1
 8004b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b3e:	4b06      	ldr	r3, [pc, #24]	; (8004b58 <MX_GPIO_Init+0x4c>)
 8004b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	603b      	str	r3, [r7, #0]
 8004b48:	683b      	ldr	r3, [r7, #0]

}
 8004b4a:	bf00      	nop
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	40023800 	.word	0x40023800

08004b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004b60:	f7fb fd0e 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004b64:	f000 f80e 	bl	8004b84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004b68:	f7ff ffd0 	bl	8004b0c <MX_GPIO_Init>
  MX_TIM11_Init();
 8004b6c:	f000 fb2e 	bl	80051cc <MX_TIM11_Init>
  MX_USART2_UART_Init();
 8004b70:	f000 fb78 	bl	8005264 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  MB_Thread_Add();
 8004b74:	f000 f878 	bl	8004c68 <MB_Thread_Add>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8004b78:	f7ff ffa4 	bl	8004ac4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8004b7c:	f7fd fcae 	bl	80024dc <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004b80:	e7fe      	b.n	8004b80 <main+0x24>
	...

08004b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b094      	sub	sp, #80	; 0x50
 8004b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004b8a:	f107 0320 	add.w	r3, r7, #32
 8004b8e:	2230      	movs	r2, #48	; 0x30
 8004b90:	2100      	movs	r1, #0
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 fc6f 	bl	8005476 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004b98:	f107 030c 	add.w	r3, r7, #12
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	605a      	str	r2, [r3, #4]
 8004ba2:	609a      	str	r2, [r3, #8]
 8004ba4:	60da      	str	r2, [r3, #12]
 8004ba6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ba8:	2300      	movs	r3, #0
 8004baa:	60bb      	str	r3, [r7, #8]
 8004bac:	4b28      	ldr	r3, [pc, #160]	; (8004c50 <SystemClock_Config+0xcc>)
 8004bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb0:	4a27      	ldr	r2, [pc, #156]	; (8004c50 <SystemClock_Config+0xcc>)
 8004bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8004bb8:	4b25      	ldr	r3, [pc, #148]	; (8004c50 <SystemClock_Config+0xcc>)
 8004bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc0:	60bb      	str	r3, [r7, #8]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	607b      	str	r3, [r7, #4]
 8004bc8:	4b22      	ldr	r3, [pc, #136]	; (8004c54 <SystemClock_Config+0xd0>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004bd0:	4a20      	ldr	r2, [pc, #128]	; (8004c54 <SystemClock_Config+0xd0>)
 8004bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	4b1e      	ldr	r3, [pc, #120]	; (8004c54 <SystemClock_Config+0xd0>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004be0:	607b      	str	r3, [r7, #4]
 8004be2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004be4:	2302      	movs	r3, #2
 8004be6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004be8:	2301      	movs	r3, #1
 8004bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004bec:	2310      	movs	r3, #16
 8004bee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004bf8:	2308      	movs	r3, #8
 8004bfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8004bfc:	2354      	movs	r3, #84	; 0x54
 8004bfe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004c00:	2302      	movs	r3, #2
 8004c02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004c04:	2304      	movs	r3, #4
 8004c06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c08:	f107 0320 	add.w	r3, r7, #32
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7fb ffdf 	bl	8000bd0 <HAL_RCC_OscConfig>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d001      	beq.n	8004c1c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004c18:	f000 f81e 	bl	8004c58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c1c:	230f      	movs	r3, #15
 8004c1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c20:	2302      	movs	r3, #2
 8004c22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c24:	2300      	movs	r3, #0
 8004c26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004c32:	f107 030c 	add.w	r3, r7, #12
 8004c36:	2102      	movs	r1, #2
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7fc fa0b 	bl	8001054 <HAL_RCC_ClockConfig>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8004c44:	f000 f808 	bl	8004c58 <Error_Handler>
  }
}
 8004c48:	bf00      	nop
 8004c4a:	3750      	adds	r7, #80	; 0x50
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	40023800 	.word	0x40023800
 8004c54:	40007000 	.word	0x40007000

08004c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004c5c:	bf00      	nop
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
	...

08004c68 <MB_Thread_Add>:
static USHORT usRegInputBuf[REG_INPUT_NREGS];
static USHORT usRegHoldingStart = REG_HOLDING_START;
static USHORT usRegHoldingBuf[REG_HOLDING_NREGS];

void MB_Thread_Add()
    {
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af04      	add	r7, sp, #16

    MB_Task_Handle = xTaskCreateStatic(MB_Task,
 8004c6e:	4b09      	ldr	r3, [pc, #36]	; (8004c94 <MB_Thread_Add+0x2c>)
 8004c70:	9302      	str	r3, [sp, #8]
 8004c72:	4b09      	ldr	r3, [pc, #36]	; (8004c98 <MB_Thread_Add+0x30>)
 8004c74:	9301      	str	r3, [sp, #4]
 8004c76:	2303      	movs	r3, #3
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c80:	4906      	ldr	r1, [pc, #24]	; (8004c9c <MB_Thread_Add+0x34>)
 8004c82:	4807      	ldr	r0, [pc, #28]	; (8004ca0 <MB_Thread_Add+0x38>)
 8004c84:	f7fd fd50 	bl	8002728 <xTaskCreateStatic>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	4b06      	ldr	r3, [pc, #24]	; (8004ca4 <MB_Thread_Add+0x3c>)
 8004c8c:	601a      	str	r2, [r3, #0]
	    MB_TASK_STACK_SIZE,
	    NULL,
	    MB_TASK__PRIORITY,
	    MB_Task_Stack,
	    &MB_Task_TCB);
    }
 8004c8e:	bf00      	nop
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	20004340 	.word	0x20004340
 8004c98:	20004394 	.word	0x20004394
 8004c9c:	080063f0 	.word	0x080063f0
 8004ca0:	08004ca9 	.word	0x08004ca9
 8004ca4:	2000433c 	.word	0x2000433c

08004ca8 <MB_Task>:

void MB_Task(void* argument)
    {
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af02      	add	r7, sp, #8
 8004cae:	6078      	str	r0, [r7, #4]

    eMBErrorCode eStatus;

    eStatus = eMBInit( MB_RTU, 5, 2, 38400, MB_PAR_NONE );
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8004cb8:	2202      	movs	r2, #2
 8004cba:	2105      	movs	r1, #5
 8004cbc:	2000      	movs	r0, #0
 8004cbe:	f7ff fa4d 	bl	800415c <eMBInit>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	73fb      	strb	r3, [r7, #15]
    eStatus = eMBEnable();
 8004cc6:	f7ff fac5 	bl	8004254 <eMBEnable>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	73fb      	strb	r3, [r7, #15]
    (void) eStatus;

    usRegInputBuf[0] = 11;
 8004cce:	4b0a      	ldr	r3, [pc, #40]	; (8004cf8 <MB_Task+0x50>)
 8004cd0:	220b      	movs	r2, #11
 8004cd2:	801a      	strh	r2, [r3, #0]
    usRegInputBuf[1] = 22;
 8004cd4:	4b08      	ldr	r3, [pc, #32]	; (8004cf8 <MB_Task+0x50>)
 8004cd6:	2216      	movs	r2, #22
 8004cd8:	805a      	strh	r2, [r3, #2]
    usRegInputBuf[2] = 33;
 8004cda:	4b07      	ldr	r3, [pc, #28]	; (8004cf8 <MB_Task+0x50>)
 8004cdc:	2221      	movs	r2, #33	; 0x21
 8004cde:	809a      	strh	r2, [r3, #4]
    usRegInputBuf[3] = 44;
 8004ce0:	4b05      	ldr	r3, [pc, #20]	; (8004cf8 <MB_Task+0x50>)
 8004ce2:	222c      	movs	r2, #44	; 0x2c
 8004ce4:	80da      	strh	r2, [r3, #6]


    while (1)
	{
	eMBPoll();
 8004ce6:	f7ff fad1 	bl	800428c <eMBPoll>
	/* Here we simply count the number of poll cycles. */
	usRegInputBuf[0]++;
 8004cea:	4b03      	ldr	r3, [pc, #12]	; (8004cf8 <MB_Task+0x50>)
 8004cec:	881b      	ldrh	r3, [r3, #0]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	4b01      	ldr	r3, [pc, #4]	; (8004cf8 <MB_Task+0x50>)
 8004cf4:	801a      	strh	r2, [r3, #0]
	eMBPoll();
 8004cf6:	e7f6      	b.n	8004ce6 <MB_Task+0x3e>
 8004cf8:	20004108 	.word	0x20004108

08004cfc <eMBRegInputCB>:
	}
    }

eMBErrorCode eMBRegInputCB(UCHAR * pucRegBuffer, USHORT usAddress,
	USHORT usNRegs)
    {
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	460b      	mov	r3, r1
 8004d06:	807b      	strh	r3, [r7, #2]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	803b      	strh	r3, [r7, #0]
    eMBErrorCode eStatus = MB_ENOERR;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	73fb      	strb	r3, [r7, #15]
    int iRegIndex;

    if ((usAddress >= REG_INPUT_START)
 8004d10:	887b      	ldrh	r3, [r7, #2]
 8004d12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d16:	d329      	bcc.n	8004d6c <eMBRegInputCB+0x70>
	    && (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS))
 8004d18:	887a      	ldrh	r2, [r7, #2]
 8004d1a:	883b      	ldrh	r3, [r7, #0]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f5b3 7f7b 	cmp.w	r3, #1004	; 0x3ec
 8004d22:	dc23      	bgt.n	8004d6c <eMBRegInputCB+0x70>
	{
	iRegIndex = (int) (usAddress - usRegInputStart);
 8004d24:	887b      	ldrh	r3, [r7, #2]
 8004d26:	4a16      	ldr	r2, [pc, #88]	; (8004d80 <eMBRegInputCB+0x84>)
 8004d28:	8812      	ldrh	r2, [r2, #0]
 8004d2a:	1a9b      	subs	r3, r3, r2
 8004d2c:	60bb      	str	r3, [r7, #8]
	while (usNRegs > 0)
 8004d2e:	e019      	b.n	8004d64 <eMBRegInputCB+0x68>
	    {
	    *pucRegBuffer++ = (unsigned char) (usRegInputBuf[iRegIndex] >> 8);
 8004d30:	4a14      	ldr	r2, [pc, #80]	; (8004d84 <eMBRegInputCB+0x88>)
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d38:	0a1b      	lsrs	r3, r3, #8
 8004d3a:	b299      	uxth	r1, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	1c5a      	adds	r2, r3, #1
 8004d40:	607a      	str	r2, [r7, #4]
 8004d42:	b2ca      	uxtb	r2, r1
 8004d44:	701a      	strb	r2, [r3, #0]
	    *pucRegBuffer++ = (unsigned char) (usRegInputBuf[iRegIndex] & 0xFF);
 8004d46:	4a0f      	ldr	r2, [pc, #60]	; (8004d84 <eMBRegInputCB+0x88>)
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	607a      	str	r2, [r7, #4]
 8004d54:	b2ca      	uxtb	r2, r1
 8004d56:	701a      	strb	r2, [r3, #0]
	    iRegIndex++;
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	60bb      	str	r3, [r7, #8]
	    usNRegs--;
 8004d5e:	883b      	ldrh	r3, [r7, #0]
 8004d60:	3b01      	subs	r3, #1
 8004d62:	803b      	strh	r3, [r7, #0]
	while (usNRegs > 0)
 8004d64:	883b      	ldrh	r3, [r7, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1e2      	bne.n	8004d30 <eMBRegInputCB+0x34>
    if ((usAddress >= REG_INPUT_START)
 8004d6a:	e001      	b.n	8004d70 <eMBRegInputCB+0x74>
	    }
	}
    else
	{
	eStatus = MB_ENOREG;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	73fb      	strb	r3, [r7, #15]
	}

    return eStatus;
 8004d70:	7bfb      	ldrb	r3, [r7, #15]
    }
 8004d72:	4618      	mov	r0, r3
 8004d74:	3714      	adds	r7, #20
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	20000090 	.word	0x20000090
 8004d84:	20004108 	.word	0x20004108

08004d88 <eMBRegHoldingCB>:

eMBErrorCode eMBRegHoldingCB(UCHAR * pucRegBuffer, USHORT usAddress,
	USHORT usNRegs, eMBRegisterMode eMode)
    {
 8004d88:	b480      	push	{r7}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	4608      	mov	r0, r1
 8004d92:	4611      	mov	r1, r2
 8004d94:	461a      	mov	r2, r3
 8004d96:	4603      	mov	r3, r0
 8004d98:	817b      	strh	r3, [r7, #10]
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	813b      	strh	r3, [r7, #8]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode eStatus = MB_ENOERR;
 8004da2:	2300      	movs	r3, #0
 8004da4:	75fb      	strb	r3, [r7, #23]
    int iRegIndex;

    if ((usAddress >= REG_HOLDING_START)
 8004da6:	897b      	ldrh	r3, [r7, #10]
 8004da8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dac:	d354      	bcc.n	8004e58 <eMBRegHoldingCB+0xd0>
	    && (usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS))
 8004dae:	897a      	ldrh	r2, [r7, #10]
 8004db0:	893b      	ldrh	r3, [r7, #8]
 8004db2:	4413      	add	r3, r2
 8004db4:	f240 426a 	movw	r2, #1130	; 0x46a
 8004db8:	4293      	cmp	r3, r2
 8004dba:	dc4d      	bgt.n	8004e58 <eMBRegHoldingCB+0xd0>
	{
	iRegIndex = (int) (usAddress - usRegHoldingStart);
 8004dbc:	897b      	ldrh	r3, [r7, #10]
 8004dbe:	4a2b      	ldr	r2, [pc, #172]	; (8004e6c <eMBRegHoldingCB+0xe4>)
 8004dc0:	8812      	ldrh	r2, [r2, #0]
 8004dc2:	1a9b      	subs	r3, r3, r2
 8004dc4:	613b      	str	r3, [r7, #16]
	switch (eMode)
 8004dc6:	79fb      	ldrb	r3, [r7, #7]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d01c      	beq.n	8004e06 <eMBRegHoldingCB+0x7e>
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d03e      	beq.n	8004e4e <eMBRegHoldingCB+0xc6>
		usRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
		iRegIndex++;
		usNRegs--;
		}
	    }
	}
 8004dd0:	e044      	b.n	8004e5c <eMBRegHoldingCB+0xd4>
		*pucRegBuffer++ = (unsigned char) (usRegHoldingBuf[iRegIndex]
 8004dd2:	4a27      	ldr	r2, [pc, #156]	; (8004e70 <eMBRegHoldingCB+0xe8>)
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dda:	0a1b      	lsrs	r3, r3, #8
 8004ddc:	b299      	uxth	r1, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	1c5a      	adds	r2, r3, #1
 8004de2:	60fa      	str	r2, [r7, #12]
 8004de4:	b2ca      	uxtb	r2, r1
 8004de6:	701a      	strb	r2, [r3, #0]
		*pucRegBuffer++ = (unsigned char) (usRegHoldingBuf[iRegIndex]
 8004de8:	4a21      	ldr	r2, [pc, #132]	; (8004e70 <eMBRegHoldingCB+0xe8>)
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	1c5a      	adds	r2, r3, #1
 8004df4:	60fa      	str	r2, [r7, #12]
 8004df6:	b2ca      	uxtb	r2, r1
 8004df8:	701a      	strb	r2, [r3, #0]
		iRegIndex++;
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	613b      	str	r3, [r7, #16]
		usNRegs--;
 8004e00:	893b      	ldrh	r3, [r7, #8]
 8004e02:	3b01      	subs	r3, #1
 8004e04:	813b      	strh	r3, [r7, #8]
	    while (usNRegs > 0)
 8004e06:	893b      	ldrh	r3, [r7, #8]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1e2      	bne.n	8004dd2 <eMBRegHoldingCB+0x4a>
	    break;
 8004e0c:	e023      	b.n	8004e56 <eMBRegHoldingCB+0xce>
		usRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	60fa      	str	r2, [r7, #12]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	021b      	lsls	r3, r3, #8
 8004e1a:	b299      	uxth	r1, r3
 8004e1c:	4a14      	ldr	r2, [pc, #80]	; (8004e70 <eMBRegHoldingCB+0xe8>)
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		usRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	1c5a      	adds	r2, r3, #1
 8004e28:	60fa      	str	r2, [r7, #12]
 8004e2a:	7819      	ldrb	r1, [r3, #0]
 8004e2c:	4a10      	ldr	r2, [pc, #64]	; (8004e70 <eMBRegHoldingCB+0xe8>)
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004e34:	b28b      	uxth	r3, r1
 8004e36:	4313      	orrs	r3, r2
 8004e38:	b299      	uxth	r1, r3
 8004e3a:	4a0d      	ldr	r2, [pc, #52]	; (8004e70 <eMBRegHoldingCB+0xe8>)
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		iRegIndex++;
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	3301      	adds	r3, #1
 8004e46:	613b      	str	r3, [r7, #16]
		usNRegs--;
 8004e48:	893b      	ldrh	r3, [r7, #8]
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	813b      	strh	r3, [r7, #8]
	    while (usNRegs > 0)
 8004e4e:	893b      	ldrh	r3, [r7, #8]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1dc      	bne.n	8004e0e <eMBRegHoldingCB+0x86>
	}
 8004e54:	e002      	b.n	8004e5c <eMBRegHoldingCB+0xd4>
 8004e56:	e001      	b.n	8004e5c <eMBRegHoldingCB+0xd4>
    else
	{
	eStatus = MB_ENOREG;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	75fb      	strb	r3, [r7, #23]
	}
    return eStatus;
 8004e5c:	7dfb      	ldrb	r3, [r7, #23]
    }
 8004e5e:	4618      	mov	r0, r3
 8004e60:	371c      	adds	r7, #28
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	20000092 	.word	0x20000092
 8004e70:	20004110 	.word	0x20004110

08004e74 <eMBRegCoilsCB>:

eMBErrorCode eMBRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress,
	USHORT usNCoils, eMBRegisterMode eMode)
    {
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	4608      	mov	r0, r1
 8004e7e:	4611      	mov	r1, r2
 8004e80:	461a      	mov	r2, r3
 8004e82:	4603      	mov	r3, r0
 8004e84:	817b      	strh	r3, [r7, #10]
 8004e86:	460b      	mov	r3, r1
 8004e88:	813b      	strh	r3, [r7, #8]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	71fb      	strb	r3, [r7, #7]
    return MB_ENOREG;
 8004e8e:	2301      	movs	r3, #1
    }
 8004e90:	4618      	mov	r0, r3
 8004e92:	3714      	adds	r7, #20
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <eMBRegDiscreteCB>:

eMBErrorCode eMBRegDiscreteCB(UCHAR * pucRegBuffer, USHORT usAddress,
	USHORT usNDiscrete)
    {
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	807b      	strh	r3, [r7, #2]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	803b      	strh	r3, [r7, #0]
    return MB_ENOREG;
 8004eac:	2301      	movs	r3, #1
    }
 8004eae:	4618      	mov	r0, r3
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
	...

08004ebc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	607b      	str	r3, [r7, #4]
 8004ec6:	4b12      	ldr	r3, [pc, #72]	; (8004f10 <HAL_MspInit+0x54>)
 8004ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eca:	4a11      	ldr	r2, [pc, #68]	; (8004f10 <HAL_MspInit+0x54>)
 8004ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8004ed2:	4b0f      	ldr	r3, [pc, #60]	; (8004f10 <HAL_MspInit+0x54>)
 8004ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eda:	607b      	str	r3, [r7, #4]
 8004edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ede:	2300      	movs	r3, #0
 8004ee0:	603b      	str	r3, [r7, #0]
 8004ee2:	4b0b      	ldr	r3, [pc, #44]	; (8004f10 <HAL_MspInit+0x54>)
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	4a0a      	ldr	r2, [pc, #40]	; (8004f10 <HAL_MspInit+0x54>)
 8004ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eec:	6413      	str	r3, [r2, #64]	; 0x40
 8004eee:	4b08      	ldr	r3, [pc, #32]	; (8004f10 <HAL_MspInit+0x54>)
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ef6:	603b      	str	r3, [r7, #0]
 8004ef8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004efa:	2200      	movs	r2, #0
 8004efc:	210f      	movs	r1, #15
 8004efe:	f06f 0001 	mvn.w	r0, #1
 8004f02:	f7fb fc8a 	bl	800081a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f06:	bf00      	nop
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	40023800 	.word	0x40023800

08004f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f14:	b480      	push	{r7}
 8004f16:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004f18:	bf00      	nop
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f22:	b480      	push	{r7}
 8004f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f26:	e7fe      	b.n	8004f26 <HardFault_Handler+0x4>

08004f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f2c:	e7fe      	b.n	8004f2c <MemManage_Handler+0x4>

08004f2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f32:	e7fe      	b.n	8004f32 <BusFault_Handler+0x4>

08004f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f34:	b480      	push	{r7}
 8004f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f38:	e7fe      	b.n	8004f38 <UsageFault_Handler+0x4>

08004f3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f3e:	bf00      	nop
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f4c:	f7fb fb6a 	bl	8000624 <HAL_IncTick>
  osSystickHandler();
 8004f50:	f7fd fb2b 	bl	80025aa <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f54:	bf00      	nop
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */
    if (__HAL_TIM_GET_FLAG(&htim11, TIM_FLAG_UPDATE) && __HAL_TIM_GET_IT_SOURCE(&htim11, TIM_IT_UPDATE))
 8004f5c:	4b0c      	ldr	r3, [pc, #48]	; (8004f90 <TIM1_TRG_COM_TIM11_IRQHandler+0x38>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d10d      	bne.n	8004f86 <TIM1_TRG_COM_TIM11_IRQHandler+0x2e>
 8004f6a:	4b09      	ldr	r3, [pc, #36]	; (8004f90 <TIM1_TRG_COM_TIM11_IRQHandler+0x38>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d106      	bne.n	8004f86 <TIM1_TRG_COM_TIM11_IRQHandler+0x2e>
	{
	__HAL_TIM_CLEAR_IT(&htim11, TIM_IT_UPDATE);
 8004f78:	4b05      	ldr	r3, [pc, #20]	; (8004f90 <TIM1_TRG_COM_TIM11_IRQHandler+0x38>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f06f 0201 	mvn.w	r2, #1
 8004f80:	611a      	str	r2, [r3, #16]
	MB_Timer_ISR();
 8004f82:	f7ff fb31 	bl	80045e8 <MB_Timer_ISR>
	}
  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8004f86:	4802      	ldr	r0, [pc, #8]	; (8004f90 <TIM1_TRG_COM_TIM11_IRQHandler+0x38>)
 8004f88:	f7fc faa6 	bl	80014d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004f8c:	bf00      	nop
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	20004794 	.word	0x20004794

08004f94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
    if (__HAL_UART_GET_FLAG(&huart2,
 8004f98:	4b12      	ldr	r3, [pc, #72]	; (8004fe4 <USART2_IRQHandler+0x50>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0320 	and.w	r3, r3, #32
 8004fa2:	2b20      	cmp	r3, #32
 8004fa4:	d108      	bne.n	8004fb8 <USART2_IRQHandler+0x24>
	    UART_FLAG_RXNE) && __HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_RXNE))
 8004fa6:	4b0f      	ldr	r3, [pc, #60]	; (8004fe4 <USART2_IRQHandler+0x50>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f003 0320 	and.w	r3, r3, #32
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d001      	beq.n	8004fb8 <USART2_IRQHandler+0x24>
	{
	MB_UART_RX_ISR(); //RX not empty
 8004fb4:	f7ff faea 	bl	800458c <MB_UART_RX_ISR>
	}

    if (__HAL_UART_GET_FLAG(&huart2,
 8004fb8:	4b0a      	ldr	r3, [pc, #40]	; (8004fe4 <USART2_IRQHandler+0x50>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc2:	2b80      	cmp	r3, #128	; 0x80
 8004fc4:	d108      	bne.n	8004fd8 <USART2_IRQHandler+0x44>
	    UART_FLAG_TXE) && __HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_TXE))
 8004fc6:	4b07      	ldr	r3, [pc, #28]	; (8004fe4 <USART2_IRQHandler+0x50>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d001      	beq.n	8004fd8 <USART2_IRQHandler+0x44>
	{
	MB_UART_TX_ISR(); //TX empty
 8004fd4:	f7ff fad0 	bl	8004578 <MB_UART_TX_ISR>
	}
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004fd8:	4802      	ldr	r0, [pc, #8]	; (8004fe4 <USART2_IRQHandler+0x50>)
 8004fda:	f7fc fdd7 	bl	8001b8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004fde:	bf00      	nop
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	200047d4 	.word	0x200047d4

08004fe8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	af00      	add	r7, sp, #0
	return 1;
 8004fec:	2301      	movs	r3, #1
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <_kill>:

int _kill(int pid, int sig)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005002:	f000 f9f1 	bl	80053e8 <__errno>
 8005006:	4602      	mov	r2, r0
 8005008:	2316      	movs	r3, #22
 800500a:	6013      	str	r3, [r2, #0]
	return -1;
 800500c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005010:	4618      	mov	r0, r3
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <_exit>:

void _exit (int status)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005020:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f7ff ffe7 	bl	8004ff8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800502a:	e7fe      	b.n	800502a <_exit+0x12>

0800502c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005038:	2300      	movs	r3, #0
 800503a:	617b      	str	r3, [r7, #20]
 800503c:	e00a      	b.n	8005054 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800503e:	f3af 8000 	nop.w
 8005042:	4601      	mov	r1, r0
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	1c5a      	adds	r2, r3, #1
 8005048:	60ba      	str	r2, [r7, #8]
 800504a:	b2ca      	uxtb	r2, r1
 800504c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	3301      	adds	r3, #1
 8005052:	617b      	str	r3, [r7, #20]
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	429a      	cmp	r2, r3
 800505a:	dbf0      	blt.n	800503e <_read+0x12>
	}

return len;
 800505c:	687b      	ldr	r3, [r7, #4]
}
 800505e:	4618      	mov	r0, r3
 8005060:	3718      	adds	r7, #24
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b086      	sub	sp, #24
 800506a:	af00      	add	r7, sp, #0
 800506c:	60f8      	str	r0, [r7, #12]
 800506e:	60b9      	str	r1, [r7, #8]
 8005070:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005072:	2300      	movs	r3, #0
 8005074:	617b      	str	r3, [r7, #20]
 8005076:	e009      	b.n	800508c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	1c5a      	adds	r2, r3, #1
 800507c:	60ba      	str	r2, [r7, #8]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	4618      	mov	r0, r3
 8005082:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	3301      	adds	r3, #1
 800508a:	617b      	str	r3, [r7, #20]
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	429a      	cmp	r2, r3
 8005092:	dbf1      	blt.n	8005078 <_write+0x12>
	}
	return len;
 8005094:	687b      	ldr	r3, [r7, #4]
}
 8005096:	4618      	mov	r0, r3
 8005098:	3718      	adds	r7, #24
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <_close>:

int _close(int file)
{
 800509e:	b480      	push	{r7}
 80050a0:	b083      	sub	sp, #12
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
	return -1;
 80050a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b083      	sub	sp, #12
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
 80050be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80050c6:	605a      	str	r2, [r3, #4]
	return 0;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <_isatty>:

int _isatty(int file)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b083      	sub	sp, #12
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
	return 1;
 80050de:	2301      	movs	r3, #1
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
	return 0;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
	...

08005108 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005110:	4b11      	ldr	r3, [pc, #68]	; (8005158 <_sbrk+0x50>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d102      	bne.n	800511e <_sbrk+0x16>
		heap_end = &end;
 8005118:	4b0f      	ldr	r3, [pc, #60]	; (8005158 <_sbrk+0x50>)
 800511a:	4a10      	ldr	r2, [pc, #64]	; (800515c <_sbrk+0x54>)
 800511c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800511e:	4b0e      	ldr	r3, [pc, #56]	; (8005158 <_sbrk+0x50>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005124:	4b0c      	ldr	r3, [pc, #48]	; (8005158 <_sbrk+0x50>)
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4413      	add	r3, r2
 800512c:	466a      	mov	r2, sp
 800512e:	4293      	cmp	r3, r2
 8005130:	d907      	bls.n	8005142 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005132:	f000 f959 	bl	80053e8 <__errno>
 8005136:	4602      	mov	r2, r0
 8005138:	230c      	movs	r3, #12
 800513a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800513c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005140:	e006      	b.n	8005150 <_sbrk+0x48>
	}

	heap_end += incr;
 8005142:	4b05      	ldr	r3, [pc, #20]	; (8005158 <_sbrk+0x50>)
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4413      	add	r3, r2
 800514a:	4a03      	ldr	r2, [pc, #12]	; (8005158 <_sbrk+0x50>)
 800514c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800514e:	68fb      	ldr	r3, [r7, #12]
}
 8005150:	4618      	mov	r0, r3
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	20004214 	.word	0x20004214
 800515c:	20004818 	.word	0x20004818

08005160 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005160:	b480      	push	{r7}
 8005162:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005164:	4b16      	ldr	r3, [pc, #88]	; (80051c0 <SystemInit+0x60>)
 8005166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800516a:	4a15      	ldr	r2, [pc, #84]	; (80051c0 <SystemInit+0x60>)
 800516c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005170:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005174:	4b13      	ldr	r3, [pc, #76]	; (80051c4 <SystemInit+0x64>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a12      	ldr	r2, [pc, #72]	; (80051c4 <SystemInit+0x64>)
 800517a:	f043 0301 	orr.w	r3, r3, #1
 800517e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005180:	4b10      	ldr	r3, [pc, #64]	; (80051c4 <SystemInit+0x64>)
 8005182:	2200      	movs	r2, #0
 8005184:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005186:	4b0f      	ldr	r3, [pc, #60]	; (80051c4 <SystemInit+0x64>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a0e      	ldr	r2, [pc, #56]	; (80051c4 <SystemInit+0x64>)
 800518c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005190:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005194:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005196:	4b0b      	ldr	r3, [pc, #44]	; (80051c4 <SystemInit+0x64>)
 8005198:	4a0b      	ldr	r2, [pc, #44]	; (80051c8 <SystemInit+0x68>)
 800519a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800519c:	4b09      	ldr	r3, [pc, #36]	; (80051c4 <SystemInit+0x64>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a08      	ldr	r2, [pc, #32]	; (80051c4 <SystemInit+0x64>)
 80051a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80051a8:	4b06      	ldr	r3, [pc, #24]	; (80051c4 <SystemInit+0x64>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80051ae:	4b04      	ldr	r3, [pc, #16]	; (80051c0 <SystemInit+0x60>)
 80051b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80051b4:	609a      	str	r2, [r3, #8]
#endif
}
 80051b6:	bf00      	nop
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	e000ed00 	.word	0xe000ed00
 80051c4:	40023800 	.word	0x40023800
 80051c8:	24003010 	.word	0x24003010

080051cc <MX_TIM11_Init>:

TIM_HandleTypeDef htim11;

/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	af00      	add	r7, sp, #0

  htim11.Instance = TIM11;
 80051d0:	4b0e      	ldr	r3, [pc, #56]	; (800520c <MX_TIM11_Init+0x40>)
 80051d2:	4a0f      	ldr	r2, [pc, #60]	; (8005210 <MX_TIM11_Init+0x44>)
 80051d4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84-1;
 80051d6:	4b0d      	ldr	r3, [pc, #52]	; (800520c <MX_TIM11_Init+0x40>)
 80051d8:	2253      	movs	r2, #83	; 0x53
 80051da:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051dc:	4b0b      	ldr	r3, [pc, #44]	; (800520c <MX_TIM11_Init+0x40>)
 80051de:	2200      	movs	r2, #0
 80051e0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1800-1;
 80051e2:	4b0a      	ldr	r3, [pc, #40]	; (800520c <MX_TIM11_Init+0x40>)
 80051e4:	f240 7207 	movw	r2, #1799	; 0x707
 80051e8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051ea:	4b08      	ldr	r3, [pc, #32]	; (800520c <MX_TIM11_Init+0x40>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80051f0:	4b06      	ldr	r3, [pc, #24]	; (800520c <MX_TIM11_Init+0x40>)
 80051f2:	2280      	movs	r2, #128	; 0x80
 80051f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80051f6:	4805      	ldr	r0, [pc, #20]	; (800520c <MX_TIM11_Init+0x40>)
 80051f8:	f7fc f8f4 	bl	80013e4 <HAL_TIM_Base_Init>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8005202:	f7ff fd29 	bl	8004c58 <Error_Handler>
  }

}
 8005206:	bf00      	nop
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	20004794 	.word	0x20004794
 8005210:	40014800 	.word	0x40014800

08005214 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a0e      	ldr	r2, [pc, #56]	; (800525c <HAL_TIM_Base_MspInit+0x48>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d115      	bne.n	8005252 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005226:	2300      	movs	r3, #0
 8005228:	60fb      	str	r3, [r7, #12]
 800522a:	4b0d      	ldr	r3, [pc, #52]	; (8005260 <HAL_TIM_Base_MspInit+0x4c>)
 800522c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800522e:	4a0c      	ldr	r2, [pc, #48]	; (8005260 <HAL_TIM_Base_MspInit+0x4c>)
 8005230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005234:	6453      	str	r3, [r2, #68]	; 0x44
 8005236:	4b0a      	ldr	r3, [pc, #40]	; (8005260 <HAL_TIM_Base_MspInit+0x4c>)
 8005238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800523a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800523e:	60fb      	str	r3, [r7, #12]
 8005240:	68fb      	ldr	r3, [r7, #12]

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8005242:	2200      	movs	r2, #0
 8005244:	2105      	movs	r1, #5
 8005246:	201a      	movs	r0, #26
 8005248:	f7fb fae7 	bl	800081a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800524c:	201a      	movs	r0, #26
 800524e:	f7fb fb00 	bl	8000852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8005252:	bf00      	nop
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	40014800 	.word	0x40014800
 8005260:	40023800 	.word	0x40023800

08005264 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8005268:	4b11      	ldr	r3, [pc, #68]	; (80052b0 <MX_USART2_UART_Init+0x4c>)
 800526a:	4a12      	ldr	r2, [pc, #72]	; (80052b4 <MX_USART2_UART_Init+0x50>)
 800526c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800526e:	4b10      	ldr	r3, [pc, #64]	; (80052b0 <MX_USART2_UART_Init+0x4c>)
 8005270:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8005274:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005276:	4b0e      	ldr	r3, [pc, #56]	; (80052b0 <MX_USART2_UART_Init+0x4c>)
 8005278:	2200      	movs	r2, #0
 800527a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800527c:	4b0c      	ldr	r3, [pc, #48]	; (80052b0 <MX_USART2_UART_Init+0x4c>)
 800527e:	2200      	movs	r2, #0
 8005280:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005282:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <MX_USART2_UART_Init+0x4c>)
 8005284:	2200      	movs	r2, #0
 8005286:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005288:	4b09      	ldr	r3, [pc, #36]	; (80052b0 <MX_USART2_UART_Init+0x4c>)
 800528a:	220c      	movs	r2, #12
 800528c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800528e:	4b08      	ldr	r3, [pc, #32]	; (80052b0 <MX_USART2_UART_Init+0x4c>)
 8005290:	2200      	movs	r2, #0
 8005292:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005294:	4b06      	ldr	r3, [pc, #24]	; (80052b0 <MX_USART2_UART_Init+0x4c>)
 8005296:	2200      	movs	r2, #0
 8005298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800529a:	4805      	ldr	r0, [pc, #20]	; (80052b0 <MX_USART2_UART_Init+0x4c>)
 800529c:	f7fc faea 	bl	8001874 <HAL_UART_Init>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80052a6:	f7ff fcd7 	bl	8004c58 <Error_Handler>
  }

}
 80052aa:	bf00      	nop
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	200047d4 	.word	0x200047d4
 80052b4:	40004400 	.word	0x40004400

080052b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b08a      	sub	sp, #40	; 0x28
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052c0:	f107 0314 	add.w	r3, r7, #20
 80052c4:	2200      	movs	r2, #0
 80052c6:	601a      	str	r2, [r3, #0]
 80052c8:	605a      	str	r2, [r3, #4]
 80052ca:	609a      	str	r2, [r3, #8]
 80052cc:	60da      	str	r2, [r3, #12]
 80052ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a1d      	ldr	r2, [pc, #116]	; (800534c <HAL_UART_MspInit+0x94>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d133      	bne.n	8005342 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80052da:	2300      	movs	r3, #0
 80052dc:	613b      	str	r3, [r7, #16]
 80052de:	4b1c      	ldr	r3, [pc, #112]	; (8005350 <HAL_UART_MspInit+0x98>)
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	4a1b      	ldr	r2, [pc, #108]	; (8005350 <HAL_UART_MspInit+0x98>)
 80052e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052e8:	6413      	str	r3, [r2, #64]	; 0x40
 80052ea:	4b19      	ldr	r3, [pc, #100]	; (8005350 <HAL_UART_MspInit+0x98>)
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f2:	613b      	str	r3, [r7, #16]
 80052f4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	4b15      	ldr	r3, [pc, #84]	; (8005350 <HAL_UART_MspInit+0x98>)
 80052fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fe:	4a14      	ldr	r2, [pc, #80]	; (8005350 <HAL_UART_MspInit+0x98>)
 8005300:	f043 0301 	orr.w	r3, r3, #1
 8005304:	6313      	str	r3, [r2, #48]	; 0x30
 8005306:	4b12      	ldr	r3, [pc, #72]	; (8005350 <HAL_UART_MspInit+0x98>)
 8005308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005312:	230c      	movs	r3, #12
 8005314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005316:	2302      	movs	r3, #2
 8005318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800531a:	2301      	movs	r3, #1
 800531c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800531e:	2303      	movs	r3, #3
 8005320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005322:	2307      	movs	r3, #7
 8005324:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005326:	f107 0314 	add.w	r3, r7, #20
 800532a:	4619      	mov	r1, r3
 800532c:	4809      	ldr	r0, [pc, #36]	; (8005354 <HAL_UART_MspInit+0x9c>)
 800532e:	f7fb facd 	bl	80008cc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8005332:	2200      	movs	r2, #0
 8005334:	2105      	movs	r1, #5
 8005336:	2026      	movs	r0, #38	; 0x26
 8005338:	f7fb fa6f 	bl	800081a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800533c:	2026      	movs	r0, #38	; 0x26
 800533e:	f7fb fa88 	bl	8000852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005342:	bf00      	nop
 8005344:	3728      	adds	r7, #40	; 0x28
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	40004400 	.word	0x40004400
 8005350:	40023800 	.word	0x40023800
 8005354:	40020000 	.word	0x40020000

08005358 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005358:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005390 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800535c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800535e:	e003      	b.n	8005368 <LoopCopyDataInit>

08005360 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005360:	4b0c      	ldr	r3, [pc, #48]	; (8005394 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005362:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005364:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005366:	3104      	adds	r1, #4

08005368 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005368:	480b      	ldr	r0, [pc, #44]	; (8005398 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800536a:	4b0c      	ldr	r3, [pc, #48]	; (800539c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800536c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800536e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005370:	d3f6      	bcc.n	8005360 <CopyDataInit>
  ldr  r2, =_sbss
 8005372:	4a0b      	ldr	r2, [pc, #44]	; (80053a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005374:	e002      	b.n	800537c <LoopFillZerobss>

08005376 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005376:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005378:	f842 3b04 	str.w	r3, [r2], #4

0800537c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800537c:	4b09      	ldr	r3, [pc, #36]	; (80053a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800537e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005380:	d3f9      	bcc.n	8005376 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005382:	f7ff feed 	bl	8005160 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005386:	f000 f847 	bl	8005418 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800538a:	f7ff fbe7 	bl	8004b5c <main>
  bx  lr    
 800538e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005390:	20017fff 	.word	0x20017fff
  ldr  r3, =_sidata
 8005394:	08006744 	.word	0x08006744
  ldr  r0, =_sdata
 8005398:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800539c:	200000fc 	.word	0x200000fc
  ldr  r2, =_sbss
 80053a0:	200000fc 	.word	0x200000fc
  ldr  r3, = _ebss
 80053a4:	20004818 	.word	0x20004818

080053a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80053a8:	e7fe      	b.n	80053a8 <ADC_IRQHandler>
	...

080053ac <__assert_func>:
 80053ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80053ae:	461c      	mov	r4, r3
 80053b0:	4b09      	ldr	r3, [pc, #36]	; (80053d8 <__assert_func+0x2c>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4605      	mov	r5, r0
 80053b6:	68d8      	ldr	r0, [r3, #12]
 80053b8:	b152      	cbz	r2, 80053d0 <__assert_func+0x24>
 80053ba:	4b08      	ldr	r3, [pc, #32]	; (80053dc <__assert_func+0x30>)
 80053bc:	9100      	str	r1, [sp, #0]
 80053be:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80053c2:	4907      	ldr	r1, [pc, #28]	; (80053e0 <__assert_func+0x34>)
 80053c4:	462b      	mov	r3, r5
 80053c6:	4622      	mov	r2, r4
 80053c8:	f000 f814 	bl	80053f4 <fiprintf>
 80053cc:	f000 fbe2 	bl	8005b94 <abort>
 80053d0:	4b04      	ldr	r3, [pc, #16]	; (80053e4 <__assert_func+0x38>)
 80053d2:	461a      	mov	r2, r3
 80053d4:	e7f2      	b.n	80053bc <__assert_func+0x10>
 80053d6:	bf00      	nop
 80053d8:	20000098 	.word	0x20000098
 80053dc:	08006660 	.word	0x08006660
 80053e0:	0800666d 	.word	0x0800666d
 80053e4:	0800669b 	.word	0x0800669b

080053e8 <__errno>:
 80053e8:	4b01      	ldr	r3, [pc, #4]	; (80053f0 <__errno+0x8>)
 80053ea:	6818      	ldr	r0, [r3, #0]
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	20000098 	.word	0x20000098

080053f4 <fiprintf>:
 80053f4:	b40e      	push	{r1, r2, r3}
 80053f6:	b503      	push	{r0, r1, lr}
 80053f8:	4601      	mov	r1, r0
 80053fa:	ab03      	add	r3, sp, #12
 80053fc:	4805      	ldr	r0, [pc, #20]	; (8005414 <fiprintf+0x20>)
 80053fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005402:	6800      	ldr	r0, [r0, #0]
 8005404:	9301      	str	r3, [sp, #4]
 8005406:	f000 f867 	bl	80054d8 <_vfiprintf_r>
 800540a:	b002      	add	sp, #8
 800540c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005410:	b003      	add	sp, #12
 8005412:	4770      	bx	lr
 8005414:	20000098 	.word	0x20000098

08005418 <__libc_init_array>:
 8005418:	b570      	push	{r4, r5, r6, lr}
 800541a:	4e0d      	ldr	r6, [pc, #52]	; (8005450 <__libc_init_array+0x38>)
 800541c:	4c0d      	ldr	r4, [pc, #52]	; (8005454 <__libc_init_array+0x3c>)
 800541e:	1ba4      	subs	r4, r4, r6
 8005420:	10a4      	asrs	r4, r4, #2
 8005422:	2500      	movs	r5, #0
 8005424:	42a5      	cmp	r5, r4
 8005426:	d109      	bne.n	800543c <__libc_init_array+0x24>
 8005428:	4e0b      	ldr	r6, [pc, #44]	; (8005458 <__libc_init_array+0x40>)
 800542a:	4c0c      	ldr	r4, [pc, #48]	; (800545c <__libc_init_array+0x44>)
 800542c:	f000 ff42 	bl	80062b4 <_init>
 8005430:	1ba4      	subs	r4, r4, r6
 8005432:	10a4      	asrs	r4, r4, #2
 8005434:	2500      	movs	r5, #0
 8005436:	42a5      	cmp	r5, r4
 8005438:	d105      	bne.n	8005446 <__libc_init_array+0x2e>
 800543a:	bd70      	pop	{r4, r5, r6, pc}
 800543c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005440:	4798      	blx	r3
 8005442:	3501      	adds	r5, #1
 8005444:	e7ee      	b.n	8005424 <__libc_init_array+0xc>
 8005446:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800544a:	4798      	blx	r3
 800544c:	3501      	adds	r5, #1
 800544e:	e7f2      	b.n	8005436 <__libc_init_array+0x1e>
 8005450:	0800673c 	.word	0x0800673c
 8005454:	0800673c 	.word	0x0800673c
 8005458:	0800673c 	.word	0x0800673c
 800545c:	08006740 	.word	0x08006740

08005460 <memcpy>:
 8005460:	b510      	push	{r4, lr}
 8005462:	1e43      	subs	r3, r0, #1
 8005464:	440a      	add	r2, r1
 8005466:	4291      	cmp	r1, r2
 8005468:	d100      	bne.n	800546c <memcpy+0xc>
 800546a:	bd10      	pop	{r4, pc}
 800546c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005470:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005474:	e7f7      	b.n	8005466 <memcpy+0x6>

08005476 <memset>:
 8005476:	4402      	add	r2, r0
 8005478:	4603      	mov	r3, r0
 800547a:	4293      	cmp	r3, r2
 800547c:	d100      	bne.n	8005480 <memset+0xa>
 800547e:	4770      	bx	lr
 8005480:	f803 1b01 	strb.w	r1, [r3], #1
 8005484:	e7f9      	b.n	800547a <memset+0x4>

08005486 <__sfputc_r>:
 8005486:	6893      	ldr	r3, [r2, #8]
 8005488:	3b01      	subs	r3, #1
 800548a:	2b00      	cmp	r3, #0
 800548c:	b410      	push	{r4}
 800548e:	6093      	str	r3, [r2, #8]
 8005490:	da08      	bge.n	80054a4 <__sfputc_r+0x1e>
 8005492:	6994      	ldr	r4, [r2, #24]
 8005494:	42a3      	cmp	r3, r4
 8005496:	db01      	blt.n	800549c <__sfputc_r+0x16>
 8005498:	290a      	cmp	r1, #10
 800549a:	d103      	bne.n	80054a4 <__sfputc_r+0x1e>
 800549c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054a0:	f000 bab8 	b.w	8005a14 <__swbuf_r>
 80054a4:	6813      	ldr	r3, [r2, #0]
 80054a6:	1c58      	adds	r0, r3, #1
 80054a8:	6010      	str	r0, [r2, #0]
 80054aa:	7019      	strb	r1, [r3, #0]
 80054ac:	4608      	mov	r0, r1
 80054ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <__sfputs_r>:
 80054b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b6:	4606      	mov	r6, r0
 80054b8:	460f      	mov	r7, r1
 80054ba:	4614      	mov	r4, r2
 80054bc:	18d5      	adds	r5, r2, r3
 80054be:	42ac      	cmp	r4, r5
 80054c0:	d101      	bne.n	80054c6 <__sfputs_r+0x12>
 80054c2:	2000      	movs	r0, #0
 80054c4:	e007      	b.n	80054d6 <__sfputs_r+0x22>
 80054c6:	463a      	mov	r2, r7
 80054c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054cc:	4630      	mov	r0, r6
 80054ce:	f7ff ffda 	bl	8005486 <__sfputc_r>
 80054d2:	1c43      	adds	r3, r0, #1
 80054d4:	d1f3      	bne.n	80054be <__sfputs_r+0xa>
 80054d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080054d8 <_vfiprintf_r>:
 80054d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054dc:	460c      	mov	r4, r1
 80054de:	b09d      	sub	sp, #116	; 0x74
 80054e0:	4617      	mov	r7, r2
 80054e2:	461d      	mov	r5, r3
 80054e4:	4606      	mov	r6, r0
 80054e6:	b118      	cbz	r0, 80054f0 <_vfiprintf_r+0x18>
 80054e8:	6983      	ldr	r3, [r0, #24]
 80054ea:	b90b      	cbnz	r3, 80054f0 <_vfiprintf_r+0x18>
 80054ec:	f000 fc4a 	bl	8005d84 <__sinit>
 80054f0:	4b7c      	ldr	r3, [pc, #496]	; (80056e4 <_vfiprintf_r+0x20c>)
 80054f2:	429c      	cmp	r4, r3
 80054f4:	d158      	bne.n	80055a8 <_vfiprintf_r+0xd0>
 80054f6:	6874      	ldr	r4, [r6, #4]
 80054f8:	89a3      	ldrh	r3, [r4, #12]
 80054fa:	0718      	lsls	r0, r3, #28
 80054fc:	d55e      	bpl.n	80055bc <_vfiprintf_r+0xe4>
 80054fe:	6923      	ldr	r3, [r4, #16]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d05b      	beq.n	80055bc <_vfiprintf_r+0xe4>
 8005504:	2300      	movs	r3, #0
 8005506:	9309      	str	r3, [sp, #36]	; 0x24
 8005508:	2320      	movs	r3, #32
 800550a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800550e:	2330      	movs	r3, #48	; 0x30
 8005510:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005514:	9503      	str	r5, [sp, #12]
 8005516:	f04f 0b01 	mov.w	fp, #1
 800551a:	46b8      	mov	r8, r7
 800551c:	4645      	mov	r5, r8
 800551e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005522:	b10b      	cbz	r3, 8005528 <_vfiprintf_r+0x50>
 8005524:	2b25      	cmp	r3, #37	; 0x25
 8005526:	d154      	bne.n	80055d2 <_vfiprintf_r+0xfa>
 8005528:	ebb8 0a07 	subs.w	sl, r8, r7
 800552c:	d00b      	beq.n	8005546 <_vfiprintf_r+0x6e>
 800552e:	4653      	mov	r3, sl
 8005530:	463a      	mov	r2, r7
 8005532:	4621      	mov	r1, r4
 8005534:	4630      	mov	r0, r6
 8005536:	f7ff ffbd 	bl	80054b4 <__sfputs_r>
 800553a:	3001      	adds	r0, #1
 800553c:	f000 80c2 	beq.w	80056c4 <_vfiprintf_r+0x1ec>
 8005540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005542:	4453      	add	r3, sl
 8005544:	9309      	str	r3, [sp, #36]	; 0x24
 8005546:	f898 3000 	ldrb.w	r3, [r8]
 800554a:	2b00      	cmp	r3, #0
 800554c:	f000 80ba 	beq.w	80056c4 <_vfiprintf_r+0x1ec>
 8005550:	2300      	movs	r3, #0
 8005552:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005556:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800555a:	9304      	str	r3, [sp, #16]
 800555c:	9307      	str	r3, [sp, #28]
 800555e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005562:	931a      	str	r3, [sp, #104]	; 0x68
 8005564:	46a8      	mov	r8, r5
 8005566:	2205      	movs	r2, #5
 8005568:	f818 1b01 	ldrb.w	r1, [r8], #1
 800556c:	485e      	ldr	r0, [pc, #376]	; (80056e8 <_vfiprintf_r+0x210>)
 800556e:	f7fa fe37 	bl	80001e0 <memchr>
 8005572:	9b04      	ldr	r3, [sp, #16]
 8005574:	bb78      	cbnz	r0, 80055d6 <_vfiprintf_r+0xfe>
 8005576:	06d9      	lsls	r1, r3, #27
 8005578:	bf44      	itt	mi
 800557a:	2220      	movmi	r2, #32
 800557c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005580:	071a      	lsls	r2, r3, #28
 8005582:	bf44      	itt	mi
 8005584:	222b      	movmi	r2, #43	; 0x2b
 8005586:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800558a:	782a      	ldrb	r2, [r5, #0]
 800558c:	2a2a      	cmp	r2, #42	; 0x2a
 800558e:	d02a      	beq.n	80055e6 <_vfiprintf_r+0x10e>
 8005590:	9a07      	ldr	r2, [sp, #28]
 8005592:	46a8      	mov	r8, r5
 8005594:	2000      	movs	r0, #0
 8005596:	250a      	movs	r5, #10
 8005598:	4641      	mov	r1, r8
 800559a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800559e:	3b30      	subs	r3, #48	; 0x30
 80055a0:	2b09      	cmp	r3, #9
 80055a2:	d969      	bls.n	8005678 <_vfiprintf_r+0x1a0>
 80055a4:	b360      	cbz	r0, 8005600 <_vfiprintf_r+0x128>
 80055a6:	e024      	b.n	80055f2 <_vfiprintf_r+0x11a>
 80055a8:	4b50      	ldr	r3, [pc, #320]	; (80056ec <_vfiprintf_r+0x214>)
 80055aa:	429c      	cmp	r4, r3
 80055ac:	d101      	bne.n	80055b2 <_vfiprintf_r+0xda>
 80055ae:	68b4      	ldr	r4, [r6, #8]
 80055b0:	e7a2      	b.n	80054f8 <_vfiprintf_r+0x20>
 80055b2:	4b4f      	ldr	r3, [pc, #316]	; (80056f0 <_vfiprintf_r+0x218>)
 80055b4:	429c      	cmp	r4, r3
 80055b6:	bf08      	it	eq
 80055b8:	68f4      	ldreq	r4, [r6, #12]
 80055ba:	e79d      	b.n	80054f8 <_vfiprintf_r+0x20>
 80055bc:	4621      	mov	r1, r4
 80055be:	4630      	mov	r0, r6
 80055c0:	f000 fa7a 	bl	8005ab8 <__swsetup_r>
 80055c4:	2800      	cmp	r0, #0
 80055c6:	d09d      	beq.n	8005504 <_vfiprintf_r+0x2c>
 80055c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055cc:	b01d      	add	sp, #116	; 0x74
 80055ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055d2:	46a8      	mov	r8, r5
 80055d4:	e7a2      	b.n	800551c <_vfiprintf_r+0x44>
 80055d6:	4a44      	ldr	r2, [pc, #272]	; (80056e8 <_vfiprintf_r+0x210>)
 80055d8:	1a80      	subs	r0, r0, r2
 80055da:	fa0b f000 	lsl.w	r0, fp, r0
 80055de:	4318      	orrs	r0, r3
 80055e0:	9004      	str	r0, [sp, #16]
 80055e2:	4645      	mov	r5, r8
 80055e4:	e7be      	b.n	8005564 <_vfiprintf_r+0x8c>
 80055e6:	9a03      	ldr	r2, [sp, #12]
 80055e8:	1d11      	adds	r1, r2, #4
 80055ea:	6812      	ldr	r2, [r2, #0]
 80055ec:	9103      	str	r1, [sp, #12]
 80055ee:	2a00      	cmp	r2, #0
 80055f0:	db01      	blt.n	80055f6 <_vfiprintf_r+0x11e>
 80055f2:	9207      	str	r2, [sp, #28]
 80055f4:	e004      	b.n	8005600 <_vfiprintf_r+0x128>
 80055f6:	4252      	negs	r2, r2
 80055f8:	f043 0302 	orr.w	r3, r3, #2
 80055fc:	9207      	str	r2, [sp, #28]
 80055fe:	9304      	str	r3, [sp, #16]
 8005600:	f898 3000 	ldrb.w	r3, [r8]
 8005604:	2b2e      	cmp	r3, #46	; 0x2e
 8005606:	d10e      	bne.n	8005626 <_vfiprintf_r+0x14e>
 8005608:	f898 3001 	ldrb.w	r3, [r8, #1]
 800560c:	2b2a      	cmp	r3, #42	; 0x2a
 800560e:	d138      	bne.n	8005682 <_vfiprintf_r+0x1aa>
 8005610:	9b03      	ldr	r3, [sp, #12]
 8005612:	1d1a      	adds	r2, r3, #4
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	9203      	str	r2, [sp, #12]
 8005618:	2b00      	cmp	r3, #0
 800561a:	bfb8      	it	lt
 800561c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005620:	f108 0802 	add.w	r8, r8, #2
 8005624:	9305      	str	r3, [sp, #20]
 8005626:	4d33      	ldr	r5, [pc, #204]	; (80056f4 <_vfiprintf_r+0x21c>)
 8005628:	f898 1000 	ldrb.w	r1, [r8]
 800562c:	2203      	movs	r2, #3
 800562e:	4628      	mov	r0, r5
 8005630:	f7fa fdd6 	bl	80001e0 <memchr>
 8005634:	b140      	cbz	r0, 8005648 <_vfiprintf_r+0x170>
 8005636:	2340      	movs	r3, #64	; 0x40
 8005638:	1b40      	subs	r0, r0, r5
 800563a:	fa03 f000 	lsl.w	r0, r3, r0
 800563e:	9b04      	ldr	r3, [sp, #16]
 8005640:	4303      	orrs	r3, r0
 8005642:	f108 0801 	add.w	r8, r8, #1
 8005646:	9304      	str	r3, [sp, #16]
 8005648:	f898 1000 	ldrb.w	r1, [r8]
 800564c:	482a      	ldr	r0, [pc, #168]	; (80056f8 <_vfiprintf_r+0x220>)
 800564e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005652:	2206      	movs	r2, #6
 8005654:	f108 0701 	add.w	r7, r8, #1
 8005658:	f7fa fdc2 	bl	80001e0 <memchr>
 800565c:	2800      	cmp	r0, #0
 800565e:	d037      	beq.n	80056d0 <_vfiprintf_r+0x1f8>
 8005660:	4b26      	ldr	r3, [pc, #152]	; (80056fc <_vfiprintf_r+0x224>)
 8005662:	bb1b      	cbnz	r3, 80056ac <_vfiprintf_r+0x1d4>
 8005664:	9b03      	ldr	r3, [sp, #12]
 8005666:	3307      	adds	r3, #7
 8005668:	f023 0307 	bic.w	r3, r3, #7
 800566c:	3308      	adds	r3, #8
 800566e:	9303      	str	r3, [sp, #12]
 8005670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005672:	444b      	add	r3, r9
 8005674:	9309      	str	r3, [sp, #36]	; 0x24
 8005676:	e750      	b.n	800551a <_vfiprintf_r+0x42>
 8005678:	fb05 3202 	mla	r2, r5, r2, r3
 800567c:	2001      	movs	r0, #1
 800567e:	4688      	mov	r8, r1
 8005680:	e78a      	b.n	8005598 <_vfiprintf_r+0xc0>
 8005682:	2300      	movs	r3, #0
 8005684:	f108 0801 	add.w	r8, r8, #1
 8005688:	9305      	str	r3, [sp, #20]
 800568a:	4619      	mov	r1, r3
 800568c:	250a      	movs	r5, #10
 800568e:	4640      	mov	r0, r8
 8005690:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005694:	3a30      	subs	r2, #48	; 0x30
 8005696:	2a09      	cmp	r2, #9
 8005698:	d903      	bls.n	80056a2 <_vfiprintf_r+0x1ca>
 800569a:	2b00      	cmp	r3, #0
 800569c:	d0c3      	beq.n	8005626 <_vfiprintf_r+0x14e>
 800569e:	9105      	str	r1, [sp, #20]
 80056a0:	e7c1      	b.n	8005626 <_vfiprintf_r+0x14e>
 80056a2:	fb05 2101 	mla	r1, r5, r1, r2
 80056a6:	2301      	movs	r3, #1
 80056a8:	4680      	mov	r8, r0
 80056aa:	e7f0      	b.n	800568e <_vfiprintf_r+0x1b6>
 80056ac:	ab03      	add	r3, sp, #12
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	4622      	mov	r2, r4
 80056b2:	4b13      	ldr	r3, [pc, #76]	; (8005700 <_vfiprintf_r+0x228>)
 80056b4:	a904      	add	r1, sp, #16
 80056b6:	4630      	mov	r0, r6
 80056b8:	f3af 8000 	nop.w
 80056bc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80056c0:	4681      	mov	r9, r0
 80056c2:	d1d5      	bne.n	8005670 <_vfiprintf_r+0x198>
 80056c4:	89a3      	ldrh	r3, [r4, #12]
 80056c6:	065b      	lsls	r3, r3, #25
 80056c8:	f53f af7e 	bmi.w	80055c8 <_vfiprintf_r+0xf0>
 80056cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056ce:	e77d      	b.n	80055cc <_vfiprintf_r+0xf4>
 80056d0:	ab03      	add	r3, sp, #12
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	4622      	mov	r2, r4
 80056d6:	4b0a      	ldr	r3, [pc, #40]	; (8005700 <_vfiprintf_r+0x228>)
 80056d8:	a904      	add	r1, sp, #16
 80056da:	4630      	mov	r0, r6
 80056dc:	f000 f888 	bl	80057f0 <_printf_i>
 80056e0:	e7ec      	b.n	80056bc <_vfiprintf_r+0x1e4>
 80056e2:	bf00      	nop
 80056e4:	080066f4 	.word	0x080066f4
 80056e8:	080066a0 	.word	0x080066a0
 80056ec:	08006714 	.word	0x08006714
 80056f0:	080066d4 	.word	0x080066d4
 80056f4:	080066a6 	.word	0x080066a6
 80056f8:	080066aa 	.word	0x080066aa
 80056fc:	00000000 	.word	0x00000000
 8005700:	080054b5 	.word	0x080054b5

08005704 <_printf_common>:
 8005704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005708:	4691      	mov	r9, r2
 800570a:	461f      	mov	r7, r3
 800570c:	688a      	ldr	r2, [r1, #8]
 800570e:	690b      	ldr	r3, [r1, #16]
 8005710:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005714:	4293      	cmp	r3, r2
 8005716:	bfb8      	it	lt
 8005718:	4613      	movlt	r3, r2
 800571a:	f8c9 3000 	str.w	r3, [r9]
 800571e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005722:	4606      	mov	r6, r0
 8005724:	460c      	mov	r4, r1
 8005726:	b112      	cbz	r2, 800572e <_printf_common+0x2a>
 8005728:	3301      	adds	r3, #1
 800572a:	f8c9 3000 	str.w	r3, [r9]
 800572e:	6823      	ldr	r3, [r4, #0]
 8005730:	0699      	lsls	r1, r3, #26
 8005732:	bf42      	ittt	mi
 8005734:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005738:	3302      	addmi	r3, #2
 800573a:	f8c9 3000 	strmi.w	r3, [r9]
 800573e:	6825      	ldr	r5, [r4, #0]
 8005740:	f015 0506 	ands.w	r5, r5, #6
 8005744:	d107      	bne.n	8005756 <_printf_common+0x52>
 8005746:	f104 0a19 	add.w	sl, r4, #25
 800574a:	68e3      	ldr	r3, [r4, #12]
 800574c:	f8d9 2000 	ldr.w	r2, [r9]
 8005750:	1a9b      	subs	r3, r3, r2
 8005752:	42ab      	cmp	r3, r5
 8005754:	dc28      	bgt.n	80057a8 <_printf_common+0xa4>
 8005756:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800575a:	6822      	ldr	r2, [r4, #0]
 800575c:	3300      	adds	r3, #0
 800575e:	bf18      	it	ne
 8005760:	2301      	movne	r3, #1
 8005762:	0692      	lsls	r2, r2, #26
 8005764:	d42d      	bmi.n	80057c2 <_printf_common+0xbe>
 8005766:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800576a:	4639      	mov	r1, r7
 800576c:	4630      	mov	r0, r6
 800576e:	47c0      	blx	r8
 8005770:	3001      	adds	r0, #1
 8005772:	d020      	beq.n	80057b6 <_printf_common+0xb2>
 8005774:	6823      	ldr	r3, [r4, #0]
 8005776:	68e5      	ldr	r5, [r4, #12]
 8005778:	f8d9 2000 	ldr.w	r2, [r9]
 800577c:	f003 0306 	and.w	r3, r3, #6
 8005780:	2b04      	cmp	r3, #4
 8005782:	bf08      	it	eq
 8005784:	1aad      	subeq	r5, r5, r2
 8005786:	68a3      	ldr	r3, [r4, #8]
 8005788:	6922      	ldr	r2, [r4, #16]
 800578a:	bf0c      	ite	eq
 800578c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005790:	2500      	movne	r5, #0
 8005792:	4293      	cmp	r3, r2
 8005794:	bfc4      	itt	gt
 8005796:	1a9b      	subgt	r3, r3, r2
 8005798:	18ed      	addgt	r5, r5, r3
 800579a:	f04f 0900 	mov.w	r9, #0
 800579e:	341a      	adds	r4, #26
 80057a0:	454d      	cmp	r5, r9
 80057a2:	d11a      	bne.n	80057da <_printf_common+0xd6>
 80057a4:	2000      	movs	r0, #0
 80057a6:	e008      	b.n	80057ba <_printf_common+0xb6>
 80057a8:	2301      	movs	r3, #1
 80057aa:	4652      	mov	r2, sl
 80057ac:	4639      	mov	r1, r7
 80057ae:	4630      	mov	r0, r6
 80057b0:	47c0      	blx	r8
 80057b2:	3001      	adds	r0, #1
 80057b4:	d103      	bne.n	80057be <_printf_common+0xba>
 80057b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057be:	3501      	adds	r5, #1
 80057c0:	e7c3      	b.n	800574a <_printf_common+0x46>
 80057c2:	18e1      	adds	r1, r4, r3
 80057c4:	1c5a      	adds	r2, r3, #1
 80057c6:	2030      	movs	r0, #48	; 0x30
 80057c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057cc:	4422      	add	r2, r4
 80057ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057d6:	3302      	adds	r3, #2
 80057d8:	e7c5      	b.n	8005766 <_printf_common+0x62>
 80057da:	2301      	movs	r3, #1
 80057dc:	4622      	mov	r2, r4
 80057de:	4639      	mov	r1, r7
 80057e0:	4630      	mov	r0, r6
 80057e2:	47c0      	blx	r8
 80057e4:	3001      	adds	r0, #1
 80057e6:	d0e6      	beq.n	80057b6 <_printf_common+0xb2>
 80057e8:	f109 0901 	add.w	r9, r9, #1
 80057ec:	e7d8      	b.n	80057a0 <_printf_common+0x9c>
	...

080057f0 <_printf_i>:
 80057f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80057f4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80057f8:	460c      	mov	r4, r1
 80057fa:	7e09      	ldrb	r1, [r1, #24]
 80057fc:	b085      	sub	sp, #20
 80057fe:	296e      	cmp	r1, #110	; 0x6e
 8005800:	4617      	mov	r7, r2
 8005802:	4606      	mov	r6, r0
 8005804:	4698      	mov	r8, r3
 8005806:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005808:	f000 80b3 	beq.w	8005972 <_printf_i+0x182>
 800580c:	d822      	bhi.n	8005854 <_printf_i+0x64>
 800580e:	2963      	cmp	r1, #99	; 0x63
 8005810:	d036      	beq.n	8005880 <_printf_i+0x90>
 8005812:	d80a      	bhi.n	800582a <_printf_i+0x3a>
 8005814:	2900      	cmp	r1, #0
 8005816:	f000 80b9 	beq.w	800598c <_printf_i+0x19c>
 800581a:	2958      	cmp	r1, #88	; 0x58
 800581c:	f000 8083 	beq.w	8005926 <_printf_i+0x136>
 8005820:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005824:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005828:	e032      	b.n	8005890 <_printf_i+0xa0>
 800582a:	2964      	cmp	r1, #100	; 0x64
 800582c:	d001      	beq.n	8005832 <_printf_i+0x42>
 800582e:	2969      	cmp	r1, #105	; 0x69
 8005830:	d1f6      	bne.n	8005820 <_printf_i+0x30>
 8005832:	6820      	ldr	r0, [r4, #0]
 8005834:	6813      	ldr	r3, [r2, #0]
 8005836:	0605      	lsls	r5, r0, #24
 8005838:	f103 0104 	add.w	r1, r3, #4
 800583c:	d52a      	bpl.n	8005894 <_printf_i+0xa4>
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6011      	str	r1, [r2, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	da03      	bge.n	800584e <_printf_i+0x5e>
 8005846:	222d      	movs	r2, #45	; 0x2d
 8005848:	425b      	negs	r3, r3
 800584a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800584e:	486f      	ldr	r0, [pc, #444]	; (8005a0c <_printf_i+0x21c>)
 8005850:	220a      	movs	r2, #10
 8005852:	e039      	b.n	80058c8 <_printf_i+0xd8>
 8005854:	2973      	cmp	r1, #115	; 0x73
 8005856:	f000 809d 	beq.w	8005994 <_printf_i+0x1a4>
 800585a:	d808      	bhi.n	800586e <_printf_i+0x7e>
 800585c:	296f      	cmp	r1, #111	; 0x6f
 800585e:	d020      	beq.n	80058a2 <_printf_i+0xb2>
 8005860:	2970      	cmp	r1, #112	; 0x70
 8005862:	d1dd      	bne.n	8005820 <_printf_i+0x30>
 8005864:	6823      	ldr	r3, [r4, #0]
 8005866:	f043 0320 	orr.w	r3, r3, #32
 800586a:	6023      	str	r3, [r4, #0]
 800586c:	e003      	b.n	8005876 <_printf_i+0x86>
 800586e:	2975      	cmp	r1, #117	; 0x75
 8005870:	d017      	beq.n	80058a2 <_printf_i+0xb2>
 8005872:	2978      	cmp	r1, #120	; 0x78
 8005874:	d1d4      	bne.n	8005820 <_printf_i+0x30>
 8005876:	2378      	movs	r3, #120	; 0x78
 8005878:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800587c:	4864      	ldr	r0, [pc, #400]	; (8005a10 <_printf_i+0x220>)
 800587e:	e055      	b.n	800592c <_printf_i+0x13c>
 8005880:	6813      	ldr	r3, [r2, #0]
 8005882:	1d19      	adds	r1, r3, #4
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	6011      	str	r1, [r2, #0]
 8005888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800588c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005890:	2301      	movs	r3, #1
 8005892:	e08c      	b.n	80059ae <_printf_i+0x1be>
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	6011      	str	r1, [r2, #0]
 8005898:	f010 0f40 	tst.w	r0, #64	; 0x40
 800589c:	bf18      	it	ne
 800589e:	b21b      	sxthne	r3, r3
 80058a0:	e7cf      	b.n	8005842 <_printf_i+0x52>
 80058a2:	6813      	ldr	r3, [r2, #0]
 80058a4:	6825      	ldr	r5, [r4, #0]
 80058a6:	1d18      	adds	r0, r3, #4
 80058a8:	6010      	str	r0, [r2, #0]
 80058aa:	0628      	lsls	r0, r5, #24
 80058ac:	d501      	bpl.n	80058b2 <_printf_i+0xc2>
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	e002      	b.n	80058b8 <_printf_i+0xc8>
 80058b2:	0668      	lsls	r0, r5, #25
 80058b4:	d5fb      	bpl.n	80058ae <_printf_i+0xbe>
 80058b6:	881b      	ldrh	r3, [r3, #0]
 80058b8:	4854      	ldr	r0, [pc, #336]	; (8005a0c <_printf_i+0x21c>)
 80058ba:	296f      	cmp	r1, #111	; 0x6f
 80058bc:	bf14      	ite	ne
 80058be:	220a      	movne	r2, #10
 80058c0:	2208      	moveq	r2, #8
 80058c2:	2100      	movs	r1, #0
 80058c4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058c8:	6865      	ldr	r5, [r4, #4]
 80058ca:	60a5      	str	r5, [r4, #8]
 80058cc:	2d00      	cmp	r5, #0
 80058ce:	f2c0 8095 	blt.w	80059fc <_printf_i+0x20c>
 80058d2:	6821      	ldr	r1, [r4, #0]
 80058d4:	f021 0104 	bic.w	r1, r1, #4
 80058d8:	6021      	str	r1, [r4, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d13d      	bne.n	800595a <_printf_i+0x16a>
 80058de:	2d00      	cmp	r5, #0
 80058e0:	f040 808e 	bne.w	8005a00 <_printf_i+0x210>
 80058e4:	4665      	mov	r5, ip
 80058e6:	2a08      	cmp	r2, #8
 80058e8:	d10b      	bne.n	8005902 <_printf_i+0x112>
 80058ea:	6823      	ldr	r3, [r4, #0]
 80058ec:	07db      	lsls	r3, r3, #31
 80058ee:	d508      	bpl.n	8005902 <_printf_i+0x112>
 80058f0:	6923      	ldr	r3, [r4, #16]
 80058f2:	6862      	ldr	r2, [r4, #4]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	bfde      	ittt	le
 80058f8:	2330      	movle	r3, #48	; 0x30
 80058fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058fe:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005902:	ebac 0305 	sub.w	r3, ip, r5
 8005906:	6123      	str	r3, [r4, #16]
 8005908:	f8cd 8000 	str.w	r8, [sp]
 800590c:	463b      	mov	r3, r7
 800590e:	aa03      	add	r2, sp, #12
 8005910:	4621      	mov	r1, r4
 8005912:	4630      	mov	r0, r6
 8005914:	f7ff fef6 	bl	8005704 <_printf_common>
 8005918:	3001      	adds	r0, #1
 800591a:	d14d      	bne.n	80059b8 <_printf_i+0x1c8>
 800591c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005920:	b005      	add	sp, #20
 8005922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005926:	4839      	ldr	r0, [pc, #228]	; (8005a0c <_printf_i+0x21c>)
 8005928:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800592c:	6813      	ldr	r3, [r2, #0]
 800592e:	6821      	ldr	r1, [r4, #0]
 8005930:	1d1d      	adds	r5, r3, #4
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6015      	str	r5, [r2, #0]
 8005936:	060a      	lsls	r2, r1, #24
 8005938:	d50b      	bpl.n	8005952 <_printf_i+0x162>
 800593a:	07ca      	lsls	r2, r1, #31
 800593c:	bf44      	itt	mi
 800593e:	f041 0120 	orrmi.w	r1, r1, #32
 8005942:	6021      	strmi	r1, [r4, #0]
 8005944:	b91b      	cbnz	r3, 800594e <_printf_i+0x15e>
 8005946:	6822      	ldr	r2, [r4, #0]
 8005948:	f022 0220 	bic.w	r2, r2, #32
 800594c:	6022      	str	r2, [r4, #0]
 800594e:	2210      	movs	r2, #16
 8005950:	e7b7      	b.n	80058c2 <_printf_i+0xd2>
 8005952:	064d      	lsls	r5, r1, #25
 8005954:	bf48      	it	mi
 8005956:	b29b      	uxthmi	r3, r3
 8005958:	e7ef      	b.n	800593a <_printf_i+0x14a>
 800595a:	4665      	mov	r5, ip
 800595c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005960:	fb02 3311 	mls	r3, r2, r1, r3
 8005964:	5cc3      	ldrb	r3, [r0, r3]
 8005966:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800596a:	460b      	mov	r3, r1
 800596c:	2900      	cmp	r1, #0
 800596e:	d1f5      	bne.n	800595c <_printf_i+0x16c>
 8005970:	e7b9      	b.n	80058e6 <_printf_i+0xf6>
 8005972:	6813      	ldr	r3, [r2, #0]
 8005974:	6825      	ldr	r5, [r4, #0]
 8005976:	6961      	ldr	r1, [r4, #20]
 8005978:	1d18      	adds	r0, r3, #4
 800597a:	6010      	str	r0, [r2, #0]
 800597c:	0628      	lsls	r0, r5, #24
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	d501      	bpl.n	8005986 <_printf_i+0x196>
 8005982:	6019      	str	r1, [r3, #0]
 8005984:	e002      	b.n	800598c <_printf_i+0x19c>
 8005986:	066a      	lsls	r2, r5, #25
 8005988:	d5fb      	bpl.n	8005982 <_printf_i+0x192>
 800598a:	8019      	strh	r1, [r3, #0]
 800598c:	2300      	movs	r3, #0
 800598e:	6123      	str	r3, [r4, #16]
 8005990:	4665      	mov	r5, ip
 8005992:	e7b9      	b.n	8005908 <_printf_i+0x118>
 8005994:	6813      	ldr	r3, [r2, #0]
 8005996:	1d19      	adds	r1, r3, #4
 8005998:	6011      	str	r1, [r2, #0]
 800599a:	681d      	ldr	r5, [r3, #0]
 800599c:	6862      	ldr	r2, [r4, #4]
 800599e:	2100      	movs	r1, #0
 80059a0:	4628      	mov	r0, r5
 80059a2:	f7fa fc1d 	bl	80001e0 <memchr>
 80059a6:	b108      	cbz	r0, 80059ac <_printf_i+0x1bc>
 80059a8:	1b40      	subs	r0, r0, r5
 80059aa:	6060      	str	r0, [r4, #4]
 80059ac:	6863      	ldr	r3, [r4, #4]
 80059ae:	6123      	str	r3, [r4, #16]
 80059b0:	2300      	movs	r3, #0
 80059b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059b6:	e7a7      	b.n	8005908 <_printf_i+0x118>
 80059b8:	6923      	ldr	r3, [r4, #16]
 80059ba:	462a      	mov	r2, r5
 80059bc:	4639      	mov	r1, r7
 80059be:	4630      	mov	r0, r6
 80059c0:	47c0      	blx	r8
 80059c2:	3001      	adds	r0, #1
 80059c4:	d0aa      	beq.n	800591c <_printf_i+0x12c>
 80059c6:	6823      	ldr	r3, [r4, #0]
 80059c8:	079b      	lsls	r3, r3, #30
 80059ca:	d413      	bmi.n	80059f4 <_printf_i+0x204>
 80059cc:	68e0      	ldr	r0, [r4, #12]
 80059ce:	9b03      	ldr	r3, [sp, #12]
 80059d0:	4298      	cmp	r0, r3
 80059d2:	bfb8      	it	lt
 80059d4:	4618      	movlt	r0, r3
 80059d6:	e7a3      	b.n	8005920 <_printf_i+0x130>
 80059d8:	2301      	movs	r3, #1
 80059da:	464a      	mov	r2, r9
 80059dc:	4639      	mov	r1, r7
 80059de:	4630      	mov	r0, r6
 80059e0:	47c0      	blx	r8
 80059e2:	3001      	adds	r0, #1
 80059e4:	d09a      	beq.n	800591c <_printf_i+0x12c>
 80059e6:	3501      	adds	r5, #1
 80059e8:	68e3      	ldr	r3, [r4, #12]
 80059ea:	9a03      	ldr	r2, [sp, #12]
 80059ec:	1a9b      	subs	r3, r3, r2
 80059ee:	42ab      	cmp	r3, r5
 80059f0:	dcf2      	bgt.n	80059d8 <_printf_i+0x1e8>
 80059f2:	e7eb      	b.n	80059cc <_printf_i+0x1dc>
 80059f4:	2500      	movs	r5, #0
 80059f6:	f104 0919 	add.w	r9, r4, #25
 80059fa:	e7f5      	b.n	80059e8 <_printf_i+0x1f8>
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1ac      	bne.n	800595a <_printf_i+0x16a>
 8005a00:	7803      	ldrb	r3, [r0, #0]
 8005a02:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a06:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a0a:	e76c      	b.n	80058e6 <_printf_i+0xf6>
 8005a0c:	080066b1 	.word	0x080066b1
 8005a10:	080066c2 	.word	0x080066c2

08005a14 <__swbuf_r>:
 8005a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a16:	460e      	mov	r6, r1
 8005a18:	4614      	mov	r4, r2
 8005a1a:	4605      	mov	r5, r0
 8005a1c:	b118      	cbz	r0, 8005a26 <__swbuf_r+0x12>
 8005a1e:	6983      	ldr	r3, [r0, #24]
 8005a20:	b90b      	cbnz	r3, 8005a26 <__swbuf_r+0x12>
 8005a22:	f000 f9af 	bl	8005d84 <__sinit>
 8005a26:	4b21      	ldr	r3, [pc, #132]	; (8005aac <__swbuf_r+0x98>)
 8005a28:	429c      	cmp	r4, r3
 8005a2a:	d12a      	bne.n	8005a82 <__swbuf_r+0x6e>
 8005a2c:	686c      	ldr	r4, [r5, #4]
 8005a2e:	69a3      	ldr	r3, [r4, #24]
 8005a30:	60a3      	str	r3, [r4, #8]
 8005a32:	89a3      	ldrh	r3, [r4, #12]
 8005a34:	071a      	lsls	r2, r3, #28
 8005a36:	d52e      	bpl.n	8005a96 <__swbuf_r+0x82>
 8005a38:	6923      	ldr	r3, [r4, #16]
 8005a3a:	b363      	cbz	r3, 8005a96 <__swbuf_r+0x82>
 8005a3c:	6923      	ldr	r3, [r4, #16]
 8005a3e:	6820      	ldr	r0, [r4, #0]
 8005a40:	1ac0      	subs	r0, r0, r3
 8005a42:	6963      	ldr	r3, [r4, #20]
 8005a44:	b2f6      	uxtb	r6, r6
 8005a46:	4283      	cmp	r3, r0
 8005a48:	4637      	mov	r7, r6
 8005a4a:	dc04      	bgt.n	8005a56 <__swbuf_r+0x42>
 8005a4c:	4621      	mov	r1, r4
 8005a4e:	4628      	mov	r0, r5
 8005a50:	f000 f92e 	bl	8005cb0 <_fflush_r>
 8005a54:	bb28      	cbnz	r0, 8005aa2 <__swbuf_r+0x8e>
 8005a56:	68a3      	ldr	r3, [r4, #8]
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	60a3      	str	r3, [r4, #8]
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	1c5a      	adds	r2, r3, #1
 8005a60:	6022      	str	r2, [r4, #0]
 8005a62:	701e      	strb	r6, [r3, #0]
 8005a64:	6963      	ldr	r3, [r4, #20]
 8005a66:	3001      	adds	r0, #1
 8005a68:	4283      	cmp	r3, r0
 8005a6a:	d004      	beq.n	8005a76 <__swbuf_r+0x62>
 8005a6c:	89a3      	ldrh	r3, [r4, #12]
 8005a6e:	07db      	lsls	r3, r3, #31
 8005a70:	d519      	bpl.n	8005aa6 <__swbuf_r+0x92>
 8005a72:	2e0a      	cmp	r6, #10
 8005a74:	d117      	bne.n	8005aa6 <__swbuf_r+0x92>
 8005a76:	4621      	mov	r1, r4
 8005a78:	4628      	mov	r0, r5
 8005a7a:	f000 f919 	bl	8005cb0 <_fflush_r>
 8005a7e:	b190      	cbz	r0, 8005aa6 <__swbuf_r+0x92>
 8005a80:	e00f      	b.n	8005aa2 <__swbuf_r+0x8e>
 8005a82:	4b0b      	ldr	r3, [pc, #44]	; (8005ab0 <__swbuf_r+0x9c>)
 8005a84:	429c      	cmp	r4, r3
 8005a86:	d101      	bne.n	8005a8c <__swbuf_r+0x78>
 8005a88:	68ac      	ldr	r4, [r5, #8]
 8005a8a:	e7d0      	b.n	8005a2e <__swbuf_r+0x1a>
 8005a8c:	4b09      	ldr	r3, [pc, #36]	; (8005ab4 <__swbuf_r+0xa0>)
 8005a8e:	429c      	cmp	r4, r3
 8005a90:	bf08      	it	eq
 8005a92:	68ec      	ldreq	r4, [r5, #12]
 8005a94:	e7cb      	b.n	8005a2e <__swbuf_r+0x1a>
 8005a96:	4621      	mov	r1, r4
 8005a98:	4628      	mov	r0, r5
 8005a9a:	f000 f80d 	bl	8005ab8 <__swsetup_r>
 8005a9e:	2800      	cmp	r0, #0
 8005aa0:	d0cc      	beq.n	8005a3c <__swbuf_r+0x28>
 8005aa2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005aa6:	4638      	mov	r0, r7
 8005aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	080066f4 	.word	0x080066f4
 8005ab0:	08006714 	.word	0x08006714
 8005ab4:	080066d4 	.word	0x080066d4

08005ab8 <__swsetup_r>:
 8005ab8:	4b32      	ldr	r3, [pc, #200]	; (8005b84 <__swsetup_r+0xcc>)
 8005aba:	b570      	push	{r4, r5, r6, lr}
 8005abc:	681d      	ldr	r5, [r3, #0]
 8005abe:	4606      	mov	r6, r0
 8005ac0:	460c      	mov	r4, r1
 8005ac2:	b125      	cbz	r5, 8005ace <__swsetup_r+0x16>
 8005ac4:	69ab      	ldr	r3, [r5, #24]
 8005ac6:	b913      	cbnz	r3, 8005ace <__swsetup_r+0x16>
 8005ac8:	4628      	mov	r0, r5
 8005aca:	f000 f95b 	bl	8005d84 <__sinit>
 8005ace:	4b2e      	ldr	r3, [pc, #184]	; (8005b88 <__swsetup_r+0xd0>)
 8005ad0:	429c      	cmp	r4, r3
 8005ad2:	d10f      	bne.n	8005af4 <__swsetup_r+0x3c>
 8005ad4:	686c      	ldr	r4, [r5, #4]
 8005ad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	0715      	lsls	r5, r2, #28
 8005ade:	d42c      	bmi.n	8005b3a <__swsetup_r+0x82>
 8005ae0:	06d0      	lsls	r0, r2, #27
 8005ae2:	d411      	bmi.n	8005b08 <__swsetup_r+0x50>
 8005ae4:	2209      	movs	r2, #9
 8005ae6:	6032      	str	r2, [r6, #0]
 8005ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aec:	81a3      	strh	r3, [r4, #12]
 8005aee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005af2:	e03e      	b.n	8005b72 <__swsetup_r+0xba>
 8005af4:	4b25      	ldr	r3, [pc, #148]	; (8005b8c <__swsetup_r+0xd4>)
 8005af6:	429c      	cmp	r4, r3
 8005af8:	d101      	bne.n	8005afe <__swsetup_r+0x46>
 8005afa:	68ac      	ldr	r4, [r5, #8]
 8005afc:	e7eb      	b.n	8005ad6 <__swsetup_r+0x1e>
 8005afe:	4b24      	ldr	r3, [pc, #144]	; (8005b90 <__swsetup_r+0xd8>)
 8005b00:	429c      	cmp	r4, r3
 8005b02:	bf08      	it	eq
 8005b04:	68ec      	ldreq	r4, [r5, #12]
 8005b06:	e7e6      	b.n	8005ad6 <__swsetup_r+0x1e>
 8005b08:	0751      	lsls	r1, r2, #29
 8005b0a:	d512      	bpl.n	8005b32 <__swsetup_r+0x7a>
 8005b0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b0e:	b141      	cbz	r1, 8005b22 <__swsetup_r+0x6a>
 8005b10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b14:	4299      	cmp	r1, r3
 8005b16:	d002      	beq.n	8005b1e <__swsetup_r+0x66>
 8005b18:	4630      	mov	r0, r6
 8005b1a:	f000 fa21 	bl	8005f60 <_free_r>
 8005b1e:	2300      	movs	r3, #0
 8005b20:	6363      	str	r3, [r4, #52]	; 0x34
 8005b22:	89a3      	ldrh	r3, [r4, #12]
 8005b24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b28:	81a3      	strh	r3, [r4, #12]
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	6063      	str	r3, [r4, #4]
 8005b2e:	6923      	ldr	r3, [r4, #16]
 8005b30:	6023      	str	r3, [r4, #0]
 8005b32:	89a3      	ldrh	r3, [r4, #12]
 8005b34:	f043 0308 	orr.w	r3, r3, #8
 8005b38:	81a3      	strh	r3, [r4, #12]
 8005b3a:	6923      	ldr	r3, [r4, #16]
 8005b3c:	b94b      	cbnz	r3, 8005b52 <__swsetup_r+0x9a>
 8005b3e:	89a3      	ldrh	r3, [r4, #12]
 8005b40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b48:	d003      	beq.n	8005b52 <__swsetup_r+0x9a>
 8005b4a:	4621      	mov	r1, r4
 8005b4c:	4630      	mov	r0, r6
 8005b4e:	f000 f9c7 	bl	8005ee0 <__smakebuf_r>
 8005b52:	89a2      	ldrh	r2, [r4, #12]
 8005b54:	f012 0301 	ands.w	r3, r2, #1
 8005b58:	d00c      	beq.n	8005b74 <__swsetup_r+0xbc>
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	60a3      	str	r3, [r4, #8]
 8005b5e:	6963      	ldr	r3, [r4, #20]
 8005b60:	425b      	negs	r3, r3
 8005b62:	61a3      	str	r3, [r4, #24]
 8005b64:	6923      	ldr	r3, [r4, #16]
 8005b66:	b953      	cbnz	r3, 8005b7e <__swsetup_r+0xc6>
 8005b68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b6c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005b70:	d1ba      	bne.n	8005ae8 <__swsetup_r+0x30>
 8005b72:	bd70      	pop	{r4, r5, r6, pc}
 8005b74:	0792      	lsls	r2, r2, #30
 8005b76:	bf58      	it	pl
 8005b78:	6963      	ldrpl	r3, [r4, #20]
 8005b7a:	60a3      	str	r3, [r4, #8]
 8005b7c:	e7f2      	b.n	8005b64 <__swsetup_r+0xac>
 8005b7e:	2000      	movs	r0, #0
 8005b80:	e7f7      	b.n	8005b72 <__swsetup_r+0xba>
 8005b82:	bf00      	nop
 8005b84:	20000098 	.word	0x20000098
 8005b88:	080066f4 	.word	0x080066f4
 8005b8c:	08006714 	.word	0x08006714
 8005b90:	080066d4 	.word	0x080066d4

08005b94 <abort>:
 8005b94:	b508      	push	{r3, lr}
 8005b96:	2006      	movs	r0, #6
 8005b98:	f000 fac2 	bl	8006120 <raise>
 8005b9c:	2001      	movs	r0, #1
 8005b9e:	f7ff fa3b 	bl	8005018 <_exit>
	...

08005ba4 <__sflush_r>:
 8005ba4:	898a      	ldrh	r2, [r1, #12]
 8005ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005baa:	4605      	mov	r5, r0
 8005bac:	0710      	lsls	r0, r2, #28
 8005bae:	460c      	mov	r4, r1
 8005bb0:	d458      	bmi.n	8005c64 <__sflush_r+0xc0>
 8005bb2:	684b      	ldr	r3, [r1, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	dc05      	bgt.n	8005bc4 <__sflush_r+0x20>
 8005bb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	dc02      	bgt.n	8005bc4 <__sflush_r+0x20>
 8005bbe:	2000      	movs	r0, #0
 8005bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bc6:	2e00      	cmp	r6, #0
 8005bc8:	d0f9      	beq.n	8005bbe <__sflush_r+0x1a>
 8005bca:	2300      	movs	r3, #0
 8005bcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005bd0:	682f      	ldr	r7, [r5, #0]
 8005bd2:	6a21      	ldr	r1, [r4, #32]
 8005bd4:	602b      	str	r3, [r5, #0]
 8005bd6:	d032      	beq.n	8005c3e <__sflush_r+0x9a>
 8005bd8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005bda:	89a3      	ldrh	r3, [r4, #12]
 8005bdc:	075a      	lsls	r2, r3, #29
 8005bde:	d505      	bpl.n	8005bec <__sflush_r+0x48>
 8005be0:	6863      	ldr	r3, [r4, #4]
 8005be2:	1ac0      	subs	r0, r0, r3
 8005be4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005be6:	b10b      	cbz	r3, 8005bec <__sflush_r+0x48>
 8005be8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005bea:	1ac0      	subs	r0, r0, r3
 8005bec:	2300      	movs	r3, #0
 8005bee:	4602      	mov	r2, r0
 8005bf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bf2:	6a21      	ldr	r1, [r4, #32]
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	47b0      	blx	r6
 8005bf8:	1c43      	adds	r3, r0, #1
 8005bfa:	89a3      	ldrh	r3, [r4, #12]
 8005bfc:	d106      	bne.n	8005c0c <__sflush_r+0x68>
 8005bfe:	6829      	ldr	r1, [r5, #0]
 8005c00:	291d      	cmp	r1, #29
 8005c02:	d848      	bhi.n	8005c96 <__sflush_r+0xf2>
 8005c04:	4a29      	ldr	r2, [pc, #164]	; (8005cac <__sflush_r+0x108>)
 8005c06:	40ca      	lsrs	r2, r1
 8005c08:	07d6      	lsls	r6, r2, #31
 8005c0a:	d544      	bpl.n	8005c96 <__sflush_r+0xf2>
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	6062      	str	r2, [r4, #4]
 8005c10:	04d9      	lsls	r1, r3, #19
 8005c12:	6922      	ldr	r2, [r4, #16]
 8005c14:	6022      	str	r2, [r4, #0]
 8005c16:	d504      	bpl.n	8005c22 <__sflush_r+0x7e>
 8005c18:	1c42      	adds	r2, r0, #1
 8005c1a:	d101      	bne.n	8005c20 <__sflush_r+0x7c>
 8005c1c:	682b      	ldr	r3, [r5, #0]
 8005c1e:	b903      	cbnz	r3, 8005c22 <__sflush_r+0x7e>
 8005c20:	6560      	str	r0, [r4, #84]	; 0x54
 8005c22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c24:	602f      	str	r7, [r5, #0]
 8005c26:	2900      	cmp	r1, #0
 8005c28:	d0c9      	beq.n	8005bbe <__sflush_r+0x1a>
 8005c2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c2e:	4299      	cmp	r1, r3
 8005c30:	d002      	beq.n	8005c38 <__sflush_r+0x94>
 8005c32:	4628      	mov	r0, r5
 8005c34:	f000 f994 	bl	8005f60 <_free_r>
 8005c38:	2000      	movs	r0, #0
 8005c3a:	6360      	str	r0, [r4, #52]	; 0x34
 8005c3c:	e7c0      	b.n	8005bc0 <__sflush_r+0x1c>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	4628      	mov	r0, r5
 8005c42:	47b0      	blx	r6
 8005c44:	1c41      	adds	r1, r0, #1
 8005c46:	d1c8      	bne.n	8005bda <__sflush_r+0x36>
 8005c48:	682b      	ldr	r3, [r5, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d0c5      	beq.n	8005bda <__sflush_r+0x36>
 8005c4e:	2b1d      	cmp	r3, #29
 8005c50:	d001      	beq.n	8005c56 <__sflush_r+0xb2>
 8005c52:	2b16      	cmp	r3, #22
 8005c54:	d101      	bne.n	8005c5a <__sflush_r+0xb6>
 8005c56:	602f      	str	r7, [r5, #0]
 8005c58:	e7b1      	b.n	8005bbe <__sflush_r+0x1a>
 8005c5a:	89a3      	ldrh	r3, [r4, #12]
 8005c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c60:	81a3      	strh	r3, [r4, #12]
 8005c62:	e7ad      	b.n	8005bc0 <__sflush_r+0x1c>
 8005c64:	690f      	ldr	r7, [r1, #16]
 8005c66:	2f00      	cmp	r7, #0
 8005c68:	d0a9      	beq.n	8005bbe <__sflush_r+0x1a>
 8005c6a:	0793      	lsls	r3, r2, #30
 8005c6c:	680e      	ldr	r6, [r1, #0]
 8005c6e:	bf08      	it	eq
 8005c70:	694b      	ldreq	r3, [r1, #20]
 8005c72:	600f      	str	r7, [r1, #0]
 8005c74:	bf18      	it	ne
 8005c76:	2300      	movne	r3, #0
 8005c78:	eba6 0807 	sub.w	r8, r6, r7
 8005c7c:	608b      	str	r3, [r1, #8]
 8005c7e:	f1b8 0f00 	cmp.w	r8, #0
 8005c82:	dd9c      	ble.n	8005bbe <__sflush_r+0x1a>
 8005c84:	4643      	mov	r3, r8
 8005c86:	463a      	mov	r2, r7
 8005c88:	6a21      	ldr	r1, [r4, #32]
 8005c8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	47b0      	blx	r6
 8005c90:	2800      	cmp	r0, #0
 8005c92:	dc06      	bgt.n	8005ca2 <__sflush_r+0xfe>
 8005c94:	89a3      	ldrh	r3, [r4, #12]
 8005c96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c9a:	81a3      	strh	r3, [r4, #12]
 8005c9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ca0:	e78e      	b.n	8005bc0 <__sflush_r+0x1c>
 8005ca2:	4407      	add	r7, r0
 8005ca4:	eba8 0800 	sub.w	r8, r8, r0
 8005ca8:	e7e9      	b.n	8005c7e <__sflush_r+0xda>
 8005caa:	bf00      	nop
 8005cac:	20400001 	.word	0x20400001

08005cb0 <_fflush_r>:
 8005cb0:	b538      	push	{r3, r4, r5, lr}
 8005cb2:	690b      	ldr	r3, [r1, #16]
 8005cb4:	4605      	mov	r5, r0
 8005cb6:	460c      	mov	r4, r1
 8005cb8:	b1db      	cbz	r3, 8005cf2 <_fflush_r+0x42>
 8005cba:	b118      	cbz	r0, 8005cc4 <_fflush_r+0x14>
 8005cbc:	6983      	ldr	r3, [r0, #24]
 8005cbe:	b90b      	cbnz	r3, 8005cc4 <_fflush_r+0x14>
 8005cc0:	f000 f860 	bl	8005d84 <__sinit>
 8005cc4:	4b0c      	ldr	r3, [pc, #48]	; (8005cf8 <_fflush_r+0x48>)
 8005cc6:	429c      	cmp	r4, r3
 8005cc8:	d109      	bne.n	8005cde <_fflush_r+0x2e>
 8005cca:	686c      	ldr	r4, [r5, #4]
 8005ccc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cd0:	b17b      	cbz	r3, 8005cf2 <_fflush_r+0x42>
 8005cd2:	4621      	mov	r1, r4
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cda:	f7ff bf63 	b.w	8005ba4 <__sflush_r>
 8005cde:	4b07      	ldr	r3, [pc, #28]	; (8005cfc <_fflush_r+0x4c>)
 8005ce0:	429c      	cmp	r4, r3
 8005ce2:	d101      	bne.n	8005ce8 <_fflush_r+0x38>
 8005ce4:	68ac      	ldr	r4, [r5, #8]
 8005ce6:	e7f1      	b.n	8005ccc <_fflush_r+0x1c>
 8005ce8:	4b05      	ldr	r3, [pc, #20]	; (8005d00 <_fflush_r+0x50>)
 8005cea:	429c      	cmp	r4, r3
 8005cec:	bf08      	it	eq
 8005cee:	68ec      	ldreq	r4, [r5, #12]
 8005cf0:	e7ec      	b.n	8005ccc <_fflush_r+0x1c>
 8005cf2:	2000      	movs	r0, #0
 8005cf4:	bd38      	pop	{r3, r4, r5, pc}
 8005cf6:	bf00      	nop
 8005cf8:	080066f4 	.word	0x080066f4
 8005cfc:	08006714 	.word	0x08006714
 8005d00:	080066d4 	.word	0x080066d4

08005d04 <std>:
 8005d04:	2300      	movs	r3, #0
 8005d06:	b510      	push	{r4, lr}
 8005d08:	4604      	mov	r4, r0
 8005d0a:	e9c0 3300 	strd	r3, r3, [r0]
 8005d0e:	6083      	str	r3, [r0, #8]
 8005d10:	8181      	strh	r1, [r0, #12]
 8005d12:	6643      	str	r3, [r0, #100]	; 0x64
 8005d14:	81c2      	strh	r2, [r0, #14]
 8005d16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d1a:	6183      	str	r3, [r0, #24]
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	2208      	movs	r2, #8
 8005d20:	305c      	adds	r0, #92	; 0x5c
 8005d22:	f7ff fba8 	bl	8005476 <memset>
 8005d26:	4b05      	ldr	r3, [pc, #20]	; (8005d3c <std+0x38>)
 8005d28:	6263      	str	r3, [r4, #36]	; 0x24
 8005d2a:	4b05      	ldr	r3, [pc, #20]	; (8005d40 <std+0x3c>)
 8005d2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d2e:	4b05      	ldr	r3, [pc, #20]	; (8005d44 <std+0x40>)
 8005d30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d32:	4b05      	ldr	r3, [pc, #20]	; (8005d48 <std+0x44>)
 8005d34:	6224      	str	r4, [r4, #32]
 8005d36:	6323      	str	r3, [r4, #48]	; 0x30
 8005d38:	bd10      	pop	{r4, pc}
 8005d3a:	bf00      	nop
 8005d3c:	08006159 	.word	0x08006159
 8005d40:	0800617b 	.word	0x0800617b
 8005d44:	080061b3 	.word	0x080061b3
 8005d48:	080061d7 	.word	0x080061d7

08005d4c <_cleanup_r>:
 8005d4c:	4901      	ldr	r1, [pc, #4]	; (8005d54 <_cleanup_r+0x8>)
 8005d4e:	f000 b885 	b.w	8005e5c <_fwalk_reent>
 8005d52:	bf00      	nop
 8005d54:	08005cb1 	.word	0x08005cb1

08005d58 <__sfmoreglue>:
 8005d58:	b570      	push	{r4, r5, r6, lr}
 8005d5a:	1e4a      	subs	r2, r1, #1
 8005d5c:	2568      	movs	r5, #104	; 0x68
 8005d5e:	4355      	muls	r5, r2
 8005d60:	460e      	mov	r6, r1
 8005d62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005d66:	f000 f949 	bl	8005ffc <_malloc_r>
 8005d6a:	4604      	mov	r4, r0
 8005d6c:	b140      	cbz	r0, 8005d80 <__sfmoreglue+0x28>
 8005d6e:	2100      	movs	r1, #0
 8005d70:	e9c0 1600 	strd	r1, r6, [r0]
 8005d74:	300c      	adds	r0, #12
 8005d76:	60a0      	str	r0, [r4, #8]
 8005d78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005d7c:	f7ff fb7b 	bl	8005476 <memset>
 8005d80:	4620      	mov	r0, r4
 8005d82:	bd70      	pop	{r4, r5, r6, pc}

08005d84 <__sinit>:
 8005d84:	6983      	ldr	r3, [r0, #24]
 8005d86:	b510      	push	{r4, lr}
 8005d88:	4604      	mov	r4, r0
 8005d8a:	bb33      	cbnz	r3, 8005dda <__sinit+0x56>
 8005d8c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005d90:	6503      	str	r3, [r0, #80]	; 0x50
 8005d92:	4b12      	ldr	r3, [pc, #72]	; (8005ddc <__sinit+0x58>)
 8005d94:	4a12      	ldr	r2, [pc, #72]	; (8005de0 <__sinit+0x5c>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6282      	str	r2, [r0, #40]	; 0x28
 8005d9a:	4298      	cmp	r0, r3
 8005d9c:	bf04      	itt	eq
 8005d9e:	2301      	moveq	r3, #1
 8005da0:	6183      	streq	r3, [r0, #24]
 8005da2:	f000 f81f 	bl	8005de4 <__sfp>
 8005da6:	6060      	str	r0, [r4, #4]
 8005da8:	4620      	mov	r0, r4
 8005daa:	f000 f81b 	bl	8005de4 <__sfp>
 8005dae:	60a0      	str	r0, [r4, #8]
 8005db0:	4620      	mov	r0, r4
 8005db2:	f000 f817 	bl	8005de4 <__sfp>
 8005db6:	2200      	movs	r2, #0
 8005db8:	60e0      	str	r0, [r4, #12]
 8005dba:	2104      	movs	r1, #4
 8005dbc:	6860      	ldr	r0, [r4, #4]
 8005dbe:	f7ff ffa1 	bl	8005d04 <std>
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	2109      	movs	r1, #9
 8005dc6:	68a0      	ldr	r0, [r4, #8]
 8005dc8:	f7ff ff9c 	bl	8005d04 <std>
 8005dcc:	2202      	movs	r2, #2
 8005dce:	2112      	movs	r1, #18
 8005dd0:	68e0      	ldr	r0, [r4, #12]
 8005dd2:	f7ff ff97 	bl	8005d04 <std>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	61a3      	str	r3, [r4, #24]
 8005dda:	bd10      	pop	{r4, pc}
 8005ddc:	0800669c 	.word	0x0800669c
 8005de0:	08005d4d 	.word	0x08005d4d

08005de4 <__sfp>:
 8005de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005de6:	4b1b      	ldr	r3, [pc, #108]	; (8005e54 <__sfp+0x70>)
 8005de8:	681e      	ldr	r6, [r3, #0]
 8005dea:	69b3      	ldr	r3, [r6, #24]
 8005dec:	4607      	mov	r7, r0
 8005dee:	b913      	cbnz	r3, 8005df6 <__sfp+0x12>
 8005df0:	4630      	mov	r0, r6
 8005df2:	f7ff ffc7 	bl	8005d84 <__sinit>
 8005df6:	3648      	adds	r6, #72	; 0x48
 8005df8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	d503      	bpl.n	8005e08 <__sfp+0x24>
 8005e00:	6833      	ldr	r3, [r6, #0]
 8005e02:	b133      	cbz	r3, 8005e12 <__sfp+0x2e>
 8005e04:	6836      	ldr	r6, [r6, #0]
 8005e06:	e7f7      	b.n	8005df8 <__sfp+0x14>
 8005e08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005e0c:	b16d      	cbz	r5, 8005e2a <__sfp+0x46>
 8005e0e:	3468      	adds	r4, #104	; 0x68
 8005e10:	e7f4      	b.n	8005dfc <__sfp+0x18>
 8005e12:	2104      	movs	r1, #4
 8005e14:	4638      	mov	r0, r7
 8005e16:	f7ff ff9f 	bl	8005d58 <__sfmoreglue>
 8005e1a:	6030      	str	r0, [r6, #0]
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	d1f1      	bne.n	8005e04 <__sfp+0x20>
 8005e20:	230c      	movs	r3, #12
 8005e22:	603b      	str	r3, [r7, #0]
 8005e24:	4604      	mov	r4, r0
 8005e26:	4620      	mov	r0, r4
 8005e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e2a:	4b0b      	ldr	r3, [pc, #44]	; (8005e58 <__sfp+0x74>)
 8005e2c:	6665      	str	r5, [r4, #100]	; 0x64
 8005e2e:	e9c4 5500 	strd	r5, r5, [r4]
 8005e32:	60a5      	str	r5, [r4, #8]
 8005e34:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005e38:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005e3c:	2208      	movs	r2, #8
 8005e3e:	4629      	mov	r1, r5
 8005e40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005e44:	f7ff fb17 	bl	8005476 <memset>
 8005e48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005e4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005e50:	e7e9      	b.n	8005e26 <__sfp+0x42>
 8005e52:	bf00      	nop
 8005e54:	0800669c 	.word	0x0800669c
 8005e58:	ffff0001 	.word	0xffff0001

08005e5c <_fwalk_reent>:
 8005e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e60:	4680      	mov	r8, r0
 8005e62:	4689      	mov	r9, r1
 8005e64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005e68:	2600      	movs	r6, #0
 8005e6a:	b914      	cbnz	r4, 8005e72 <_fwalk_reent+0x16>
 8005e6c:	4630      	mov	r0, r6
 8005e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e72:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005e76:	3f01      	subs	r7, #1
 8005e78:	d501      	bpl.n	8005e7e <_fwalk_reent+0x22>
 8005e7a:	6824      	ldr	r4, [r4, #0]
 8005e7c:	e7f5      	b.n	8005e6a <_fwalk_reent+0xe>
 8005e7e:	89ab      	ldrh	r3, [r5, #12]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d907      	bls.n	8005e94 <_fwalk_reent+0x38>
 8005e84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	d003      	beq.n	8005e94 <_fwalk_reent+0x38>
 8005e8c:	4629      	mov	r1, r5
 8005e8e:	4640      	mov	r0, r8
 8005e90:	47c8      	blx	r9
 8005e92:	4306      	orrs	r6, r0
 8005e94:	3568      	adds	r5, #104	; 0x68
 8005e96:	e7ee      	b.n	8005e76 <_fwalk_reent+0x1a>

08005e98 <__swhatbuf_r>:
 8005e98:	b570      	push	{r4, r5, r6, lr}
 8005e9a:	460e      	mov	r6, r1
 8005e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ea0:	2900      	cmp	r1, #0
 8005ea2:	b096      	sub	sp, #88	; 0x58
 8005ea4:	4614      	mov	r4, r2
 8005ea6:	461d      	mov	r5, r3
 8005ea8:	da07      	bge.n	8005eba <__swhatbuf_r+0x22>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	602b      	str	r3, [r5, #0]
 8005eae:	89b3      	ldrh	r3, [r6, #12]
 8005eb0:	061a      	lsls	r2, r3, #24
 8005eb2:	d410      	bmi.n	8005ed6 <__swhatbuf_r+0x3e>
 8005eb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005eb8:	e00e      	b.n	8005ed8 <__swhatbuf_r+0x40>
 8005eba:	466a      	mov	r2, sp
 8005ebc:	f000 f9b2 	bl	8006224 <_fstat_r>
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	dbf2      	blt.n	8005eaa <__swhatbuf_r+0x12>
 8005ec4:	9a01      	ldr	r2, [sp, #4]
 8005ec6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005eca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005ece:	425a      	negs	r2, r3
 8005ed0:	415a      	adcs	r2, r3
 8005ed2:	602a      	str	r2, [r5, #0]
 8005ed4:	e7ee      	b.n	8005eb4 <__swhatbuf_r+0x1c>
 8005ed6:	2340      	movs	r3, #64	; 0x40
 8005ed8:	2000      	movs	r0, #0
 8005eda:	6023      	str	r3, [r4, #0]
 8005edc:	b016      	add	sp, #88	; 0x58
 8005ede:	bd70      	pop	{r4, r5, r6, pc}

08005ee0 <__smakebuf_r>:
 8005ee0:	898b      	ldrh	r3, [r1, #12]
 8005ee2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ee4:	079d      	lsls	r5, r3, #30
 8005ee6:	4606      	mov	r6, r0
 8005ee8:	460c      	mov	r4, r1
 8005eea:	d507      	bpl.n	8005efc <__smakebuf_r+0x1c>
 8005eec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ef0:	6023      	str	r3, [r4, #0]
 8005ef2:	6123      	str	r3, [r4, #16]
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	6163      	str	r3, [r4, #20]
 8005ef8:	b002      	add	sp, #8
 8005efa:	bd70      	pop	{r4, r5, r6, pc}
 8005efc:	ab01      	add	r3, sp, #4
 8005efe:	466a      	mov	r2, sp
 8005f00:	f7ff ffca 	bl	8005e98 <__swhatbuf_r>
 8005f04:	9900      	ldr	r1, [sp, #0]
 8005f06:	4605      	mov	r5, r0
 8005f08:	4630      	mov	r0, r6
 8005f0a:	f000 f877 	bl	8005ffc <_malloc_r>
 8005f0e:	b948      	cbnz	r0, 8005f24 <__smakebuf_r+0x44>
 8005f10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f14:	059a      	lsls	r2, r3, #22
 8005f16:	d4ef      	bmi.n	8005ef8 <__smakebuf_r+0x18>
 8005f18:	f023 0303 	bic.w	r3, r3, #3
 8005f1c:	f043 0302 	orr.w	r3, r3, #2
 8005f20:	81a3      	strh	r3, [r4, #12]
 8005f22:	e7e3      	b.n	8005eec <__smakebuf_r+0xc>
 8005f24:	4b0d      	ldr	r3, [pc, #52]	; (8005f5c <__smakebuf_r+0x7c>)
 8005f26:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f28:	89a3      	ldrh	r3, [r4, #12]
 8005f2a:	6020      	str	r0, [r4, #0]
 8005f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f30:	81a3      	strh	r3, [r4, #12]
 8005f32:	9b00      	ldr	r3, [sp, #0]
 8005f34:	6163      	str	r3, [r4, #20]
 8005f36:	9b01      	ldr	r3, [sp, #4]
 8005f38:	6120      	str	r0, [r4, #16]
 8005f3a:	b15b      	cbz	r3, 8005f54 <__smakebuf_r+0x74>
 8005f3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f40:	4630      	mov	r0, r6
 8005f42:	f000 f981 	bl	8006248 <_isatty_r>
 8005f46:	b128      	cbz	r0, 8005f54 <__smakebuf_r+0x74>
 8005f48:	89a3      	ldrh	r3, [r4, #12]
 8005f4a:	f023 0303 	bic.w	r3, r3, #3
 8005f4e:	f043 0301 	orr.w	r3, r3, #1
 8005f52:	81a3      	strh	r3, [r4, #12]
 8005f54:	89a3      	ldrh	r3, [r4, #12]
 8005f56:	431d      	orrs	r5, r3
 8005f58:	81a5      	strh	r5, [r4, #12]
 8005f5a:	e7cd      	b.n	8005ef8 <__smakebuf_r+0x18>
 8005f5c:	08005d4d 	.word	0x08005d4d

08005f60 <_free_r>:
 8005f60:	b538      	push	{r3, r4, r5, lr}
 8005f62:	4605      	mov	r5, r0
 8005f64:	2900      	cmp	r1, #0
 8005f66:	d045      	beq.n	8005ff4 <_free_r+0x94>
 8005f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f6c:	1f0c      	subs	r4, r1, #4
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	bfb8      	it	lt
 8005f72:	18e4      	addlt	r4, r4, r3
 8005f74:	f000 f98a 	bl	800628c <__malloc_lock>
 8005f78:	4a1f      	ldr	r2, [pc, #124]	; (8005ff8 <_free_r+0x98>)
 8005f7a:	6813      	ldr	r3, [r2, #0]
 8005f7c:	4610      	mov	r0, r2
 8005f7e:	b933      	cbnz	r3, 8005f8e <_free_r+0x2e>
 8005f80:	6063      	str	r3, [r4, #4]
 8005f82:	6014      	str	r4, [r2, #0]
 8005f84:	4628      	mov	r0, r5
 8005f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f8a:	f000 b980 	b.w	800628e <__malloc_unlock>
 8005f8e:	42a3      	cmp	r3, r4
 8005f90:	d90c      	bls.n	8005fac <_free_r+0x4c>
 8005f92:	6821      	ldr	r1, [r4, #0]
 8005f94:	1862      	adds	r2, r4, r1
 8005f96:	4293      	cmp	r3, r2
 8005f98:	bf04      	itt	eq
 8005f9a:	681a      	ldreq	r2, [r3, #0]
 8005f9c:	685b      	ldreq	r3, [r3, #4]
 8005f9e:	6063      	str	r3, [r4, #4]
 8005fa0:	bf04      	itt	eq
 8005fa2:	1852      	addeq	r2, r2, r1
 8005fa4:	6022      	streq	r2, [r4, #0]
 8005fa6:	6004      	str	r4, [r0, #0]
 8005fa8:	e7ec      	b.n	8005f84 <_free_r+0x24>
 8005faa:	4613      	mov	r3, r2
 8005fac:	685a      	ldr	r2, [r3, #4]
 8005fae:	b10a      	cbz	r2, 8005fb4 <_free_r+0x54>
 8005fb0:	42a2      	cmp	r2, r4
 8005fb2:	d9fa      	bls.n	8005faa <_free_r+0x4a>
 8005fb4:	6819      	ldr	r1, [r3, #0]
 8005fb6:	1858      	adds	r0, r3, r1
 8005fb8:	42a0      	cmp	r0, r4
 8005fba:	d10b      	bne.n	8005fd4 <_free_r+0x74>
 8005fbc:	6820      	ldr	r0, [r4, #0]
 8005fbe:	4401      	add	r1, r0
 8005fc0:	1858      	adds	r0, r3, r1
 8005fc2:	4282      	cmp	r2, r0
 8005fc4:	6019      	str	r1, [r3, #0]
 8005fc6:	d1dd      	bne.n	8005f84 <_free_r+0x24>
 8005fc8:	6810      	ldr	r0, [r2, #0]
 8005fca:	6852      	ldr	r2, [r2, #4]
 8005fcc:	605a      	str	r2, [r3, #4]
 8005fce:	4401      	add	r1, r0
 8005fd0:	6019      	str	r1, [r3, #0]
 8005fd2:	e7d7      	b.n	8005f84 <_free_r+0x24>
 8005fd4:	d902      	bls.n	8005fdc <_free_r+0x7c>
 8005fd6:	230c      	movs	r3, #12
 8005fd8:	602b      	str	r3, [r5, #0]
 8005fda:	e7d3      	b.n	8005f84 <_free_r+0x24>
 8005fdc:	6820      	ldr	r0, [r4, #0]
 8005fde:	1821      	adds	r1, r4, r0
 8005fe0:	428a      	cmp	r2, r1
 8005fe2:	bf04      	itt	eq
 8005fe4:	6811      	ldreq	r1, [r2, #0]
 8005fe6:	6852      	ldreq	r2, [r2, #4]
 8005fe8:	6062      	str	r2, [r4, #4]
 8005fea:	bf04      	itt	eq
 8005fec:	1809      	addeq	r1, r1, r0
 8005fee:	6021      	streq	r1, [r4, #0]
 8005ff0:	605c      	str	r4, [r3, #4]
 8005ff2:	e7c7      	b.n	8005f84 <_free_r+0x24>
 8005ff4:	bd38      	pop	{r3, r4, r5, pc}
 8005ff6:	bf00      	nop
 8005ff8:	20004218 	.word	0x20004218

08005ffc <_malloc_r>:
 8005ffc:	b570      	push	{r4, r5, r6, lr}
 8005ffe:	1ccd      	adds	r5, r1, #3
 8006000:	f025 0503 	bic.w	r5, r5, #3
 8006004:	3508      	adds	r5, #8
 8006006:	2d0c      	cmp	r5, #12
 8006008:	bf38      	it	cc
 800600a:	250c      	movcc	r5, #12
 800600c:	2d00      	cmp	r5, #0
 800600e:	4606      	mov	r6, r0
 8006010:	db01      	blt.n	8006016 <_malloc_r+0x1a>
 8006012:	42a9      	cmp	r1, r5
 8006014:	d903      	bls.n	800601e <_malloc_r+0x22>
 8006016:	230c      	movs	r3, #12
 8006018:	6033      	str	r3, [r6, #0]
 800601a:	2000      	movs	r0, #0
 800601c:	bd70      	pop	{r4, r5, r6, pc}
 800601e:	f000 f935 	bl	800628c <__malloc_lock>
 8006022:	4a21      	ldr	r2, [pc, #132]	; (80060a8 <_malloc_r+0xac>)
 8006024:	6814      	ldr	r4, [r2, #0]
 8006026:	4621      	mov	r1, r4
 8006028:	b991      	cbnz	r1, 8006050 <_malloc_r+0x54>
 800602a:	4c20      	ldr	r4, [pc, #128]	; (80060ac <_malloc_r+0xb0>)
 800602c:	6823      	ldr	r3, [r4, #0]
 800602e:	b91b      	cbnz	r3, 8006038 <_malloc_r+0x3c>
 8006030:	4630      	mov	r0, r6
 8006032:	f000 f83d 	bl	80060b0 <_sbrk_r>
 8006036:	6020      	str	r0, [r4, #0]
 8006038:	4629      	mov	r1, r5
 800603a:	4630      	mov	r0, r6
 800603c:	f000 f838 	bl	80060b0 <_sbrk_r>
 8006040:	1c43      	adds	r3, r0, #1
 8006042:	d124      	bne.n	800608e <_malloc_r+0x92>
 8006044:	230c      	movs	r3, #12
 8006046:	6033      	str	r3, [r6, #0]
 8006048:	4630      	mov	r0, r6
 800604a:	f000 f920 	bl	800628e <__malloc_unlock>
 800604e:	e7e4      	b.n	800601a <_malloc_r+0x1e>
 8006050:	680b      	ldr	r3, [r1, #0]
 8006052:	1b5b      	subs	r3, r3, r5
 8006054:	d418      	bmi.n	8006088 <_malloc_r+0x8c>
 8006056:	2b0b      	cmp	r3, #11
 8006058:	d90f      	bls.n	800607a <_malloc_r+0x7e>
 800605a:	600b      	str	r3, [r1, #0]
 800605c:	50cd      	str	r5, [r1, r3]
 800605e:	18cc      	adds	r4, r1, r3
 8006060:	4630      	mov	r0, r6
 8006062:	f000 f914 	bl	800628e <__malloc_unlock>
 8006066:	f104 000b 	add.w	r0, r4, #11
 800606a:	1d23      	adds	r3, r4, #4
 800606c:	f020 0007 	bic.w	r0, r0, #7
 8006070:	1ac3      	subs	r3, r0, r3
 8006072:	d0d3      	beq.n	800601c <_malloc_r+0x20>
 8006074:	425a      	negs	r2, r3
 8006076:	50e2      	str	r2, [r4, r3]
 8006078:	e7d0      	b.n	800601c <_malloc_r+0x20>
 800607a:	428c      	cmp	r4, r1
 800607c:	684b      	ldr	r3, [r1, #4]
 800607e:	bf16      	itet	ne
 8006080:	6063      	strne	r3, [r4, #4]
 8006082:	6013      	streq	r3, [r2, #0]
 8006084:	460c      	movne	r4, r1
 8006086:	e7eb      	b.n	8006060 <_malloc_r+0x64>
 8006088:	460c      	mov	r4, r1
 800608a:	6849      	ldr	r1, [r1, #4]
 800608c:	e7cc      	b.n	8006028 <_malloc_r+0x2c>
 800608e:	1cc4      	adds	r4, r0, #3
 8006090:	f024 0403 	bic.w	r4, r4, #3
 8006094:	42a0      	cmp	r0, r4
 8006096:	d005      	beq.n	80060a4 <_malloc_r+0xa8>
 8006098:	1a21      	subs	r1, r4, r0
 800609a:	4630      	mov	r0, r6
 800609c:	f000 f808 	bl	80060b0 <_sbrk_r>
 80060a0:	3001      	adds	r0, #1
 80060a2:	d0cf      	beq.n	8006044 <_malloc_r+0x48>
 80060a4:	6025      	str	r5, [r4, #0]
 80060a6:	e7db      	b.n	8006060 <_malloc_r+0x64>
 80060a8:	20004218 	.word	0x20004218
 80060ac:	2000421c 	.word	0x2000421c

080060b0 <_sbrk_r>:
 80060b0:	b538      	push	{r3, r4, r5, lr}
 80060b2:	4c06      	ldr	r4, [pc, #24]	; (80060cc <_sbrk_r+0x1c>)
 80060b4:	2300      	movs	r3, #0
 80060b6:	4605      	mov	r5, r0
 80060b8:	4608      	mov	r0, r1
 80060ba:	6023      	str	r3, [r4, #0]
 80060bc:	f7ff f824 	bl	8005108 <_sbrk>
 80060c0:	1c43      	adds	r3, r0, #1
 80060c2:	d102      	bne.n	80060ca <_sbrk_r+0x1a>
 80060c4:	6823      	ldr	r3, [r4, #0]
 80060c6:	b103      	cbz	r3, 80060ca <_sbrk_r+0x1a>
 80060c8:	602b      	str	r3, [r5, #0]
 80060ca:	bd38      	pop	{r3, r4, r5, pc}
 80060cc:	20004814 	.word	0x20004814

080060d0 <_raise_r>:
 80060d0:	291f      	cmp	r1, #31
 80060d2:	b538      	push	{r3, r4, r5, lr}
 80060d4:	4604      	mov	r4, r0
 80060d6:	460d      	mov	r5, r1
 80060d8:	d904      	bls.n	80060e4 <_raise_r+0x14>
 80060da:	2316      	movs	r3, #22
 80060dc:	6003      	str	r3, [r0, #0]
 80060de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060e2:	bd38      	pop	{r3, r4, r5, pc}
 80060e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80060e6:	b112      	cbz	r2, 80060ee <_raise_r+0x1e>
 80060e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80060ec:	b94b      	cbnz	r3, 8006102 <_raise_r+0x32>
 80060ee:	4620      	mov	r0, r4
 80060f0:	f000 f830 	bl	8006154 <_getpid_r>
 80060f4:	462a      	mov	r2, r5
 80060f6:	4601      	mov	r1, r0
 80060f8:	4620      	mov	r0, r4
 80060fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060fe:	f000 b817 	b.w	8006130 <_kill_r>
 8006102:	2b01      	cmp	r3, #1
 8006104:	d00a      	beq.n	800611c <_raise_r+0x4c>
 8006106:	1c59      	adds	r1, r3, #1
 8006108:	d103      	bne.n	8006112 <_raise_r+0x42>
 800610a:	2316      	movs	r3, #22
 800610c:	6003      	str	r3, [r0, #0]
 800610e:	2001      	movs	r0, #1
 8006110:	e7e7      	b.n	80060e2 <_raise_r+0x12>
 8006112:	2400      	movs	r4, #0
 8006114:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006118:	4628      	mov	r0, r5
 800611a:	4798      	blx	r3
 800611c:	2000      	movs	r0, #0
 800611e:	e7e0      	b.n	80060e2 <_raise_r+0x12>

08006120 <raise>:
 8006120:	4b02      	ldr	r3, [pc, #8]	; (800612c <raise+0xc>)
 8006122:	4601      	mov	r1, r0
 8006124:	6818      	ldr	r0, [r3, #0]
 8006126:	f7ff bfd3 	b.w	80060d0 <_raise_r>
 800612a:	bf00      	nop
 800612c:	20000098 	.word	0x20000098

08006130 <_kill_r>:
 8006130:	b538      	push	{r3, r4, r5, lr}
 8006132:	4c07      	ldr	r4, [pc, #28]	; (8006150 <_kill_r+0x20>)
 8006134:	2300      	movs	r3, #0
 8006136:	4605      	mov	r5, r0
 8006138:	4608      	mov	r0, r1
 800613a:	4611      	mov	r1, r2
 800613c:	6023      	str	r3, [r4, #0]
 800613e:	f7fe ff5b 	bl	8004ff8 <_kill>
 8006142:	1c43      	adds	r3, r0, #1
 8006144:	d102      	bne.n	800614c <_kill_r+0x1c>
 8006146:	6823      	ldr	r3, [r4, #0]
 8006148:	b103      	cbz	r3, 800614c <_kill_r+0x1c>
 800614a:	602b      	str	r3, [r5, #0]
 800614c:	bd38      	pop	{r3, r4, r5, pc}
 800614e:	bf00      	nop
 8006150:	20004814 	.word	0x20004814

08006154 <_getpid_r>:
 8006154:	f7fe bf48 	b.w	8004fe8 <_getpid>

08006158 <__sread>:
 8006158:	b510      	push	{r4, lr}
 800615a:	460c      	mov	r4, r1
 800615c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006160:	f000 f896 	bl	8006290 <_read_r>
 8006164:	2800      	cmp	r0, #0
 8006166:	bfab      	itete	ge
 8006168:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800616a:	89a3      	ldrhlt	r3, [r4, #12]
 800616c:	181b      	addge	r3, r3, r0
 800616e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006172:	bfac      	ite	ge
 8006174:	6563      	strge	r3, [r4, #84]	; 0x54
 8006176:	81a3      	strhlt	r3, [r4, #12]
 8006178:	bd10      	pop	{r4, pc}

0800617a <__swrite>:
 800617a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800617e:	461f      	mov	r7, r3
 8006180:	898b      	ldrh	r3, [r1, #12]
 8006182:	05db      	lsls	r3, r3, #23
 8006184:	4605      	mov	r5, r0
 8006186:	460c      	mov	r4, r1
 8006188:	4616      	mov	r6, r2
 800618a:	d505      	bpl.n	8006198 <__swrite+0x1e>
 800618c:	2302      	movs	r3, #2
 800618e:	2200      	movs	r2, #0
 8006190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006194:	f000 f868 	bl	8006268 <_lseek_r>
 8006198:	89a3      	ldrh	r3, [r4, #12]
 800619a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800619e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061a2:	81a3      	strh	r3, [r4, #12]
 80061a4:	4632      	mov	r2, r6
 80061a6:	463b      	mov	r3, r7
 80061a8:	4628      	mov	r0, r5
 80061aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061ae:	f000 b817 	b.w	80061e0 <_write_r>

080061b2 <__sseek>:
 80061b2:	b510      	push	{r4, lr}
 80061b4:	460c      	mov	r4, r1
 80061b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061ba:	f000 f855 	bl	8006268 <_lseek_r>
 80061be:	1c43      	adds	r3, r0, #1
 80061c0:	89a3      	ldrh	r3, [r4, #12]
 80061c2:	bf15      	itete	ne
 80061c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80061c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80061ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80061ce:	81a3      	strheq	r3, [r4, #12]
 80061d0:	bf18      	it	ne
 80061d2:	81a3      	strhne	r3, [r4, #12]
 80061d4:	bd10      	pop	{r4, pc}

080061d6 <__sclose>:
 80061d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061da:	f000 b813 	b.w	8006204 <_close_r>
	...

080061e0 <_write_r>:
 80061e0:	b538      	push	{r3, r4, r5, lr}
 80061e2:	4c07      	ldr	r4, [pc, #28]	; (8006200 <_write_r+0x20>)
 80061e4:	4605      	mov	r5, r0
 80061e6:	4608      	mov	r0, r1
 80061e8:	4611      	mov	r1, r2
 80061ea:	2200      	movs	r2, #0
 80061ec:	6022      	str	r2, [r4, #0]
 80061ee:	461a      	mov	r2, r3
 80061f0:	f7fe ff39 	bl	8005066 <_write>
 80061f4:	1c43      	adds	r3, r0, #1
 80061f6:	d102      	bne.n	80061fe <_write_r+0x1e>
 80061f8:	6823      	ldr	r3, [r4, #0]
 80061fa:	b103      	cbz	r3, 80061fe <_write_r+0x1e>
 80061fc:	602b      	str	r3, [r5, #0]
 80061fe:	bd38      	pop	{r3, r4, r5, pc}
 8006200:	20004814 	.word	0x20004814

08006204 <_close_r>:
 8006204:	b538      	push	{r3, r4, r5, lr}
 8006206:	4c06      	ldr	r4, [pc, #24]	; (8006220 <_close_r+0x1c>)
 8006208:	2300      	movs	r3, #0
 800620a:	4605      	mov	r5, r0
 800620c:	4608      	mov	r0, r1
 800620e:	6023      	str	r3, [r4, #0]
 8006210:	f7fe ff45 	bl	800509e <_close>
 8006214:	1c43      	adds	r3, r0, #1
 8006216:	d102      	bne.n	800621e <_close_r+0x1a>
 8006218:	6823      	ldr	r3, [r4, #0]
 800621a:	b103      	cbz	r3, 800621e <_close_r+0x1a>
 800621c:	602b      	str	r3, [r5, #0]
 800621e:	bd38      	pop	{r3, r4, r5, pc}
 8006220:	20004814 	.word	0x20004814

08006224 <_fstat_r>:
 8006224:	b538      	push	{r3, r4, r5, lr}
 8006226:	4c07      	ldr	r4, [pc, #28]	; (8006244 <_fstat_r+0x20>)
 8006228:	2300      	movs	r3, #0
 800622a:	4605      	mov	r5, r0
 800622c:	4608      	mov	r0, r1
 800622e:	4611      	mov	r1, r2
 8006230:	6023      	str	r3, [r4, #0]
 8006232:	f7fe ff40 	bl	80050b6 <_fstat>
 8006236:	1c43      	adds	r3, r0, #1
 8006238:	d102      	bne.n	8006240 <_fstat_r+0x1c>
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	b103      	cbz	r3, 8006240 <_fstat_r+0x1c>
 800623e:	602b      	str	r3, [r5, #0]
 8006240:	bd38      	pop	{r3, r4, r5, pc}
 8006242:	bf00      	nop
 8006244:	20004814 	.word	0x20004814

08006248 <_isatty_r>:
 8006248:	b538      	push	{r3, r4, r5, lr}
 800624a:	4c06      	ldr	r4, [pc, #24]	; (8006264 <_isatty_r+0x1c>)
 800624c:	2300      	movs	r3, #0
 800624e:	4605      	mov	r5, r0
 8006250:	4608      	mov	r0, r1
 8006252:	6023      	str	r3, [r4, #0]
 8006254:	f7fe ff3f 	bl	80050d6 <_isatty>
 8006258:	1c43      	adds	r3, r0, #1
 800625a:	d102      	bne.n	8006262 <_isatty_r+0x1a>
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	b103      	cbz	r3, 8006262 <_isatty_r+0x1a>
 8006260:	602b      	str	r3, [r5, #0]
 8006262:	bd38      	pop	{r3, r4, r5, pc}
 8006264:	20004814 	.word	0x20004814

08006268 <_lseek_r>:
 8006268:	b538      	push	{r3, r4, r5, lr}
 800626a:	4c07      	ldr	r4, [pc, #28]	; (8006288 <_lseek_r+0x20>)
 800626c:	4605      	mov	r5, r0
 800626e:	4608      	mov	r0, r1
 8006270:	4611      	mov	r1, r2
 8006272:	2200      	movs	r2, #0
 8006274:	6022      	str	r2, [r4, #0]
 8006276:	461a      	mov	r2, r3
 8006278:	f7fe ff38 	bl	80050ec <_lseek>
 800627c:	1c43      	adds	r3, r0, #1
 800627e:	d102      	bne.n	8006286 <_lseek_r+0x1e>
 8006280:	6823      	ldr	r3, [r4, #0]
 8006282:	b103      	cbz	r3, 8006286 <_lseek_r+0x1e>
 8006284:	602b      	str	r3, [r5, #0]
 8006286:	bd38      	pop	{r3, r4, r5, pc}
 8006288:	20004814 	.word	0x20004814

0800628c <__malloc_lock>:
 800628c:	4770      	bx	lr

0800628e <__malloc_unlock>:
 800628e:	4770      	bx	lr

08006290 <_read_r>:
 8006290:	b538      	push	{r3, r4, r5, lr}
 8006292:	4c07      	ldr	r4, [pc, #28]	; (80062b0 <_read_r+0x20>)
 8006294:	4605      	mov	r5, r0
 8006296:	4608      	mov	r0, r1
 8006298:	4611      	mov	r1, r2
 800629a:	2200      	movs	r2, #0
 800629c:	6022      	str	r2, [r4, #0]
 800629e:	461a      	mov	r2, r3
 80062a0:	f7fe fec4 	bl	800502c <_read>
 80062a4:	1c43      	adds	r3, r0, #1
 80062a6:	d102      	bne.n	80062ae <_read_r+0x1e>
 80062a8:	6823      	ldr	r3, [r4, #0]
 80062aa:	b103      	cbz	r3, 80062ae <_read_r+0x1e>
 80062ac:	602b      	str	r3, [r5, #0]
 80062ae:	bd38      	pop	{r3, r4, r5, pc}
 80062b0:	20004814 	.word	0x20004814

080062b4 <_init>:
 80062b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b6:	bf00      	nop
 80062b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ba:	bc08      	pop	{r3}
 80062bc:	469e      	mov	lr, r3
 80062be:	4770      	bx	lr

080062c0 <_fini>:
 80062c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062c2:	bf00      	nop
 80062c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062c6:	bc08      	pop	{r3}
 80062c8:	469e      	mov	lr, r3
 80062ca:	4770      	bx	lr
